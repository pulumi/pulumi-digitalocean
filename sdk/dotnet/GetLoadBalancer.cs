// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// Get information on a load balancer for use in other resources. This data source
        /// provides all of the load balancers properties as configured on your DigitalOcean
        /// account. This is useful if the load balancer in question is not managed by
        /// the provider or you need to utilize any of the load balancers data.
        /// 
        /// An error is triggered if the provided load balancer name does not exist.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the load balancer by name:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetLoadBalancer.InvokeAsync(new DigitalOcean.GetLoadBalancerArgs
        ///         {
        ///             Name = "app",
        ///         }));
        ///         this.LbOutput = example.Apply(example =&gt; example.Ip);
        ///     }
        /// 
        ///     [Output("lbOutput")]
        ///     public Output&lt;string&gt; LbOutput { get; set; }
        /// }
        /// ```
        /// 
        /// Get the load balancer by ID:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetLoadBalancer.InvokeAsync(new DigitalOcean.GetLoadBalancerArgs
        ///         {
        ///             Id = "loadbalancer_id",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("digitalocean:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a load balancer for use in other resources. This data source
        /// provides all of the load balancers properties as configured on your DigitalOcean
        /// account. This is useful if the load balancer in question is not managed by
        /// the provider or you need to utilize any of the load balancers data.
        /// 
        /// An error is triggered if the provided load balancer name does not exist.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the load balancer by name:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetLoadBalancer.InvokeAsync(new DigitalOcean.GetLoadBalancerArgs
        ///         {
        ///             Name = "app",
        ///         }));
        ///         this.LbOutput = example.Apply(example =&gt; example.Ip);
        ///     }
        /// 
        ///     [Output("lbOutput")]
        ///     public Output&lt;string&gt; LbOutput { get; set; }
        /// }
        /// ```
        /// 
        /// Get the load balancer by ID:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetLoadBalancer.InvokeAsync(new DigitalOcean.GetLoadBalancerArgs
        ///         {
        ///             Id = "loadbalancer_id",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("digitalocean:index/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of load balancer.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of load balancer.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLoadBalancerArgs()
        {
        }
    }

    public sealed class GetLoadBalancerInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of load balancer.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of load balancer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLoadBalancerInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly string Algorithm;
        public readonly bool DisableLetsEncryptDnsRecords;
        public readonly ImmutableArray<int> DropletIds;
        public readonly string DropletTag;
        public readonly bool EnableBackendKeepalive;
        public readonly bool EnableProxyProtocol;
        public readonly ImmutableArray<Outputs.GetLoadBalancerForwardingRuleResult> ForwardingRules;
        public readonly ImmutableArray<Outputs.GetLoadBalancerHealthcheckResult> Healthchecks;
        public readonly string? Id;
        public readonly string Ip;
        public readonly string LoadBalancerUrn;
        public readonly string? Name;
        public readonly bool RedirectHttpToHttps;
        public readonly string Region;
        public readonly string Size;
        public readonly int SizeUnit;
        public readonly string Status;
        public readonly ImmutableArray<Outputs.GetLoadBalancerStickySessionResult> StickySessions;
        public readonly string VpcUuid;

        [OutputConstructor]
        private GetLoadBalancerResult(
            string algorithm,

            bool disableLetsEncryptDnsRecords,

            ImmutableArray<int> dropletIds,

            string dropletTag,

            bool enableBackendKeepalive,

            bool enableProxyProtocol,

            ImmutableArray<Outputs.GetLoadBalancerForwardingRuleResult> forwardingRules,

            ImmutableArray<Outputs.GetLoadBalancerHealthcheckResult> healthchecks,

            string? id,

            string ip,

            string loadBalancerUrn,

            string? name,

            bool redirectHttpToHttps,

            string region,

            string size,

            int sizeUnit,

            string status,

            ImmutableArray<Outputs.GetLoadBalancerStickySessionResult> stickySessions,

            string vpcUuid)
        {
            Algorithm = algorithm;
            DisableLetsEncryptDnsRecords = disableLetsEncryptDnsRecords;
            DropletIds = dropletIds;
            DropletTag = dropletTag;
            EnableBackendKeepalive = enableBackendKeepalive;
            EnableProxyProtocol = enableProxyProtocol;
            ForwardingRules = forwardingRules;
            Healthchecks = healthchecks;
            Id = id;
            Ip = ip;
            LoadBalancerUrn = loadBalancerUrn;
            Name = name;
            RedirectHttpToHttps = redirectHttpToHttps;
            Region = region;
            Size = size;
            SizeUnit = sizeUnit;
            Status = status;
            StickySessions = stickySessions;
            VpcUuid = vpcUuid;
        }
    }
}
