// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a [DigitalOcean Uptime Checks](https://docs.digitalocean.com/reference/api/api-reference/#tag/Uptime)
    /// resource. Uptime Checks provide the ability to monitor your endpoints from around the world, and alert you when they're slow, unavailable, or SSL certificates are expiring.
    /// 
    /// ## Import
    /// 
    /// Uptime checks can be imported using the uptime check's `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import digitalocean:index/uptimeCheck:UptimeCheck target 5a4981aa-9653-4bd1-bef5-d6bff52042e4
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/uptimeCheck:UptimeCheck")]
    public partial class UptimeCheck : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A boolean value indicating whether the check is enabled/disabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// A human-friendly display name for the check.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// The endpoint to perform healthchecks on.
        /// </summary>
        [Output("target")]
        public Output<string> Target { get; private set; } = null!;

        /// <summary>
        /// The type of health check to perform: 'ping' 'http' 'https'.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a UptimeCheck resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UptimeCheck(string name, UptimeCheckArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/uptimeCheck:UptimeCheck", name, args ?? new UptimeCheckArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UptimeCheck(string name, Input<string> id, UptimeCheckState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/uptimeCheck:UptimeCheck", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UptimeCheck resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UptimeCheck Get(string name, Input<string> id, UptimeCheckState? state = null, CustomResourceOptions? options = null)
        {
            return new UptimeCheck(name, id, state, options);
        }
    }

    public sealed class UptimeCheckArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value indicating whether the check is enabled/disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A human-friendly display name for the check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The endpoint to perform healthchecks on.
        /// </summary>
        [Input("target", required: true)]
        public Input<string> Target { get; set; } = null!;

        /// <summary>
        /// The type of health check to perform: 'ping' 'http' 'https'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public UptimeCheckArgs()
        {
        }
        public static new UptimeCheckArgs Empty => new UptimeCheckArgs();
    }

    public sealed class UptimeCheckState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value indicating whether the check is enabled/disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// A human-friendly display name for the check.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// An array containing the selected regions to perform healthchecks from: "us_east", "us_west", "eu_west", "se_asia"
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The endpoint to perform healthchecks on.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The type of health check to perform: 'ping' 'http' 'https'.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public UptimeCheckState()
        {
        }
        public static new UptimeCheckState Empty => new UptimeCheckState();
    }
}
