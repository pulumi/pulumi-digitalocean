// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetVpcNatGateway
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// Get the VPC NAT Gateway by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Name = my_existing_vpc_nat_gateway.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Get the VPC NAT Gateway by ID:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Id = my_existing_vpc_nat_gateway.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcNatGatewayResult> InvokeAsync(GetVpcNatGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcNatGatewayResult>("digitalocean:index/getVpcNatGateway:getVpcNatGateway", args ?? new GetVpcNatGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// Get the VPC NAT Gateway by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Name = my_existing_vpc_nat_gateway.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Get the VPC NAT Gateway by ID:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Id = my_existing_vpc_nat_gateway.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcNatGatewayResult> Invoke(GetVpcNatGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcNatGatewayResult>("digitalocean:index/getVpcNatGateway:getVpcNatGateway", args ?? new GetVpcNatGatewayInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// Get the VPC NAT Gateway by name:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Name = my_existing_vpc_nat_gateway.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Get the VPC NAT Gateway by ID:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_imported_vpc_nat_gateway = DigitalOcean.GetVpcNatGateway.Invoke(new()
        ///     {
        ///         Id = my_existing_vpc_nat_gateway.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcNatGatewayResult> Invoke(GetVpcNatGatewayInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcNatGatewayResult>("digitalocean:index/getVpcNatGateway:getVpcNatGateway", args ?? new GetVpcNatGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcNatGatewayArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of VPC NAT Gateway.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of VPC NAT Gateway.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVpcNatGatewayArgs()
        {
        }
        public static new GetVpcNatGatewayArgs Empty => new GetVpcNatGatewayArgs();
    }

    public sealed class GetVpcNatGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of VPC NAT Gateway.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of VPC NAT Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVpcNatGatewayInvokeArgs()
        {
        }
        public static new GetVpcNatGatewayInvokeArgs Empty => new GetVpcNatGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcNatGatewayResult
    {
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.GetVpcNatGatewayEgressResult> Egresses;
        public readonly int IcmpTimeoutSeconds;
        public readonly string? Id;
        public readonly string? Name;
        public readonly string Region;
        public readonly int Size;
        public readonly string State;
        public readonly int TcpTimeoutSeconds;
        public readonly string Type;
        public readonly int UdpTimeoutSeconds;
        public readonly string UpdatedAt;
        public readonly ImmutableArray<Outputs.GetVpcNatGatewayVpcResult> Vpcs;

        [OutputConstructor]
        private GetVpcNatGatewayResult(
            string createdAt,

            ImmutableArray<Outputs.GetVpcNatGatewayEgressResult> egresses,

            int icmpTimeoutSeconds,

            string? id,

            string? name,

            string region,

            int size,

            string state,

            int tcpTimeoutSeconds,

            string type,

            int udpTimeoutSeconds,

            string updatedAt,

            ImmutableArray<Outputs.GetVpcNatGatewayVpcResult> vpcs)
        {
            CreatedAt = createdAt;
            Egresses = egresses;
            IcmpTimeoutSeconds = icmpTimeoutSeconds;
            Id = id;
            Name = name;
            Region = region;
            Size = size;
            State = state;
            TcpTimeoutSeconds = tcpTimeoutSeconds;
            Type = type;
            UdpTimeoutSeconds = udpTimeoutSeconds;
            UpdatedAt = updatedAt;
            Vpcs = vpcs;
        }
    }
}
