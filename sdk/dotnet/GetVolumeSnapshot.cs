// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetVolumeSnapshot
    {
        /// <summary>
        /// Volume snapshots are saved instances of a block storage volume. Use this data
        /// source to retrieve the ID of a DigitalOcean volume snapshot for use in other
        /// resources.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVolumeSnapshotResult> InvokeAsync(GetVolumeSnapshotArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVolumeSnapshotResult>("digitalocean:index/getVolumeSnapshot:getVolumeSnapshot", args ?? new GetVolumeSnapshotArgs(), options.WithVersion());
    }


    public sealed class GetVolumeSnapshotArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// If more than one result is returned, use the most recent volume snapshot.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// The name of the volume snapshot.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A regex string to apply to the volume snapshot list returned by DigitalOcean. This allows more advanced filtering not supported from the DigitalOcean API. This filtering is done locally on what DigitalOcean returns.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// A "slug" representing a DigitalOcean region (e.g. `nyc1`). If set, only volume snapshots available in the region will be returned.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetVolumeSnapshotArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVolumeSnapshotResult
    {
        /// <summary>
        /// The date and time the volume snapshot was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The minimum size in gigabytes required for a volume to be created based on this volume snapshot.
        /// </summary>
        public readonly int MinDiskSize;
        public readonly bool? MostRecent;
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? Region;
        /// <summary>
        /// A list of DigitalOcean region "slugs" indicating where the volume snapshot is available.
        /// </summary>
        public readonly ImmutableArray<string> Regions;
        /// <summary>
        /// The billable size of the volume snapshot in gigabytes.
        /// </summary>
        public readonly double Size;
        /// <summary>
        /// A list of the tags associated to the volume snapshot.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The ID of the volume from which the volume snapshot originated.
        /// </summary>
        public readonly string VolumeId;

        [OutputConstructor]
        private GetVolumeSnapshotResult(
            string createdAt,

            string id,

            int minDiskSize,

            bool? mostRecent,

            string? name,

            string? nameRegex,

            string? region,

            ImmutableArray<string> regions,

            double size,

            ImmutableArray<string> tags,

            string volumeId)
        {
            CreatedAt = createdAt;
            Id = id;
            MinDiskSize = minDiskSize;
            MostRecent = mostRecent;
            Name = name;
            NameRegex = nameRegex;
            Region = region;
            Regions = regions;
            Size = size;
            Tags = tags;
            VolumeId = volumeId;
        }
    }
}
