// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean.Inputs
{

    public sealed class AppSpecFunctionGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("alerts")]
        private InputList<Inputs.AppSpecFunctionAlertGetArgs>? _alerts;

        /// <summary>
        /// Describes an alert policy for the component.
        /// </summary>
        public InputList<Inputs.AppSpecFunctionAlertGetArgs> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<Inputs.AppSpecFunctionAlertGetArgs>());
            set => _alerts = value;
        }

        /// <summary>
        /// The [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) policies of the app.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.AppSpecFunctionCorsGetArgs>? Cors { get; set; }

        [Input("envs")]
        private InputList<Inputs.AppSpecFunctionEnvGetArgs>? _envs;

        /// <summary>
        /// Describes an environment variable made available to an app competent.
        /// </summary>
        public InputList<Inputs.AppSpecFunctionEnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.AppSpecFunctionEnvGetArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// A Git repo to use as the component's source. The repository must be able to be cloned without authentication.  Only one of `git`, `github` or `gitlab`  may be set.
        /// </summary>
        [Input("git")]
        public Input<Inputs.AppSpecFunctionGitGetArgs>? Git { get; set; }

        /// <summary>
        /// A GitHub repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/github/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
        /// </summary>
        [Input("github")]
        public Input<Inputs.AppSpecFunctionGithubGetArgs>? Github { get; set; }

        /// <summary>
        /// A Gitlab repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/gitlab/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
        /// </summary>
        [Input("gitlab")]
        public Input<Inputs.AppSpecFunctionGitlabGetArgs>? Gitlab { get; set; }

        [Input("logDestinations")]
        private InputList<Inputs.AppSpecFunctionLogDestinationGetArgs>? _logDestinations;

        /// <summary>
        /// Describes a log forwarding destination.
        /// </summary>
        public InputList<Inputs.AppSpecFunctionLogDestinationGetArgs> LogDestinations
        {
            get => _logDestinations ?? (_logDestinations = new InputList<Inputs.AppSpecFunctionLogDestinationGetArgs>());
            set => _logDestinations = value;
        }

        /// <summary>
        /// The name of the component.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("routes")]
        private InputList<Inputs.AppSpecFunctionRouteGetArgs>? _routes;

        /// <summary>
        /// An HTTP paths that should be routed to this component.
        /// </summary>
        [Obsolete(@"Service level routes are deprecated in favor of ingresses")]
        public InputList<Inputs.AppSpecFunctionRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.AppSpecFunctionRouteGetArgs>());
            set => _routes = value;
        }

        /// <summary>
        /// An optional path to the working directory to use for the build.
        /// </summary>
        [Input("sourceDir")]
        public Input<string>? SourceDir { get; set; }

        public AppSpecFunctionGetArgs()
        {
        }
        public static new AppSpecFunctionGetArgs Empty => new AppSpecFunctionGetArgs();
    }
}
