// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean.Inputs
{

    public sealed class AppSpecJobGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("alerts")]
        private InputList<Inputs.AppSpecJobAlertGetArgs>? _alerts;

        /// <summary>
        /// Describes an alert policy for the component.
        /// </summary>
        public InputList<Inputs.AppSpecJobAlertGetArgs> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<Inputs.AppSpecJobAlertGetArgs>());
            set => _alerts = value;
        }

        /// <summary>
        /// An optional build command to run while building this component from source.
        /// </summary>
        [Input("buildCommand")]
        public Input<string>? BuildCommand { get; set; }

        /// <summary>
        /// The path to a Dockerfile relative to the root of the repo. If set, overrides usage of buildpacks.
        /// </summary>
        [Input("dockerfilePath")]
        public Input<string>? DockerfilePath { get; set; }

        /// <summary>
        /// An environment slug describing the type of this app.
        /// </summary>
        [Input("environmentSlug")]
        public Input<string>? EnvironmentSlug { get; set; }

        [Input("envs")]
        private InputList<Inputs.AppSpecJobEnvGetArgs>? _envs;

        /// <summary>
        /// Describes an environment variable made available to an app competent.
        /// </summary>
        public InputList<Inputs.AppSpecJobEnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.AppSpecJobEnvGetArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// A Git repo to use as the component's source. The repository must be able to be cloned without authentication.  Only one of `git`, `github` or `gitlab`  may be set.
        /// </summary>
        [Input("git")]
        public Input<Inputs.AppSpecJobGitGetArgs>? Git { get; set; }

        /// <summary>
        /// A GitHub repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/github/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
        /// </summary>
        [Input("github")]
        public Input<Inputs.AppSpecJobGithubGetArgs>? Github { get; set; }

        /// <summary>
        /// A Gitlab repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/gitlab/install). Only one of `git`, `github`, `gitlab`, or `image` may be set.
        /// </summary>
        [Input("gitlab")]
        public Input<Inputs.AppSpecJobGitlabGetArgs>? Gitlab { get; set; }

        /// <summary>
        /// An image to use as the component's source. Only one of `git`, `github`, `gitlab`, or `image` may be set.
        /// </summary>
        [Input("image")]
        public Input<Inputs.AppSpecJobImageGetArgs>? Image { get; set; }

        /// <summary>
        /// The amount of instances that this component should be scaled to.
        /// </summary>
        [Input("instanceCount")]
        public Input<int>? InstanceCount { get; set; }

        /// <summary>
        /// The instance size to use for this component. This determines the plan (basic or professional) and the available CPU and memory. The list of available instance sizes can be [found with the API](https://docs.digitalocean.com/reference/api/api-reference/#operation/list_instance_sizes) or using the [doctl CLI](https://docs.digitalocean.com/reference/doctl/) (`doctl apps tier instance-size list`). Default: `basic-xxs`
        /// </summary>
        [Input("instanceSizeSlug")]
        public Input<string>? InstanceSizeSlug { get; set; }

        /// <summary>
        /// The type of job and when it will be run during the deployment process. It may be one of:
        /// - `UNSPECIFIED`: Default job type, will auto-complete to POST_DEPLOY kind.
        /// - `PRE_DEPLOY`: Indicates a job that runs before an app deployment.
        /// - `POST_DEPLOY`: Indicates a job that runs after an app deployment.
        /// - `FAILED_DEPLOY`: Indicates a job that runs after a component fails to deploy.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("logDestinations")]
        private InputList<Inputs.AppSpecJobLogDestinationGetArgs>? _logDestinations;

        /// <summary>
        /// Describes a log forwarding destination.
        /// </summary>
        public InputList<Inputs.AppSpecJobLogDestinationGetArgs> LogDestinations
        {
            get => _logDestinations ?? (_logDestinations = new InputList<Inputs.AppSpecJobLogDestinationGetArgs>());
            set => _logDestinations = value;
        }

        /// <summary>
        /// The name of the component.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// An optional run command to override the component's default.
        /// </summary>
        [Input("runCommand")]
        public Input<string>? RunCommand { get; set; }

        /// <summary>
        /// An optional path to the working directory to use for the build.
        /// </summary>
        [Input("sourceDir")]
        public Input<string>? SourceDir { get; set; }

        public AppSpecJobGetArgs()
        {
        }
        public static new AppSpecJobGetArgs Empty => new AppSpecJobGetArgs();
    }
}
