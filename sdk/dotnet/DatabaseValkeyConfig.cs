// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to change advanced configuration
    /// options for a DigitalOcean managed Valkey database cluster.
    /// 
    /// &gt; **Note** Valkey configurations are only removed from state when destroyed. The remote configuration is not unset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabaseCluster = new DigitalOcean.DatabaseCluster("example", new()
    ///     {
    ///         Name = "example-valkey-cluster",
    ///         Engine = "valkey",
    ///         Version = "8",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU1GB,
    ///         Region = DigitalOcean.Region.NYC1,
    ///         NodeCount = 1,
    ///     });
    /// 
    ///     var example = new DigitalOcean.DatabaseValkeyConfig("example", new()
    ///     {
    ///         ClusterId = exampleDatabaseCluster.Id,
    ///         NotifyKeyspaceEvents = "KEA",
    ///         Timeout = 90,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Valkey database cluster's configuration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig example 245bcfd0-7f31-4ce6-a2bc-475a116cca97
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig")]
    public partial class DatabaseValkeyConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `Allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `Allchannels` and `Resetchannels`
        /// </summary>
        [Output("aclChannelsDefault")]
        public Output<string> AclChannelsDefault { get; private set; } = null!;

        /// <summary>
        /// The ID of the target Valkey cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when ValkeyPersistence is set to off.
        /// </summary>
        [Output("frequentSnapshots")]
        public Output<bool> FrequentSnapshots { get; private set; } = null!;

        /// <summary>
        /// The Valkey IO thread count.
        /// </summary>
        [Output("ioThreads")]
        public Output<int> IoThreads { get; private set; } = null!;

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Output("lfuDecayTime")]
        public Output<int> LfuDecayTime { get; private set; } = null!;

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Output("lfuLogFactor")]
        public Output<int> LfuLogFactor { get; private set; } = null!;

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Output("notifyKeyspaceEvents")]
        public Output<string> NotifyKeyspaceEvents { get; private set; } = null!;

        /// <summary>
        /// The number of Valkey databases. Changing this will cause a restart of Valkey service.
        /// </summary>
        [Output("numberOfDatabases")]
        public Output<int> NumberOfDatabases { get; private set; } = null!;

        /// <summary>
        /// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Output("persistence")]
        public Output<string> Persistence { get; private set; } = null!;

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Output("pubsubClientOutputBufferLimit")]
        public Output<int> PubsubClientOutputBufferLimit { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether to require SSL to access Valkey.
        /// </summary>
        [Output("ssl")]
        public Output<bool> Ssl { get; private set; } = null!;

        /// <summary>
        /// The Valkey idle connection timeout in seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        /// <summary>
        /// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
        /// </summary>
        [Output("valkeyActiveExpireEffort")]
        public Output<int> ValkeyActiveExpireEffort { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseValkeyConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseValkeyConfig(string name, DatabaseValkeyConfigArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, args ?? new DatabaseValkeyConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseValkeyConfig(string name, Input<string> id, DatabaseValkeyConfigState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseValkeyConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseValkeyConfig Get(string name, Input<string> id, DatabaseValkeyConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseValkeyConfig(name, id, state, options);
        }
    }

    public sealed class DatabaseValkeyConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `Allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `Allchannels` and `Resetchannels`
        /// </summary>
        [Input("aclChannelsDefault")]
        public Input<string>? AclChannelsDefault { get; set; }

        /// <summary>
        /// The ID of the target Valkey cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when ValkeyPersistence is set to off.
        /// </summary>
        [Input("frequentSnapshots")]
        public Input<bool>? FrequentSnapshots { get; set; }

        /// <summary>
        /// The Valkey IO thread count.
        /// </summary>
        [Input("ioThreads")]
        public Input<int>? IoThreads { get; set; }

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Input("lfuDecayTime")]
        public Input<int>? LfuDecayTime { get; set; }

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Input("lfuLogFactor")]
        public Input<int>? LfuLogFactor { get; set; }

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Input("notifyKeyspaceEvents")]
        public Input<string>? NotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// The number of Valkey databases. Changing this will cause a restart of Valkey service.
        /// </summary>
        [Input("numberOfDatabases")]
        public Input<int>? NumberOfDatabases { get; set; }

        /// <summary>
        /// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Input("persistence")]
        public Input<string>? Persistence { get; set; }

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Input("pubsubClientOutputBufferLimit")]
        public Input<int>? PubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// A boolean indicating whether to require SSL to access Valkey.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// The Valkey idle connection timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
        /// </summary>
        [Input("valkeyActiveExpireEffort")]
        public Input<int>? ValkeyActiveExpireEffort { get; set; }

        public DatabaseValkeyConfigArgs()
        {
        }
        public static new DatabaseValkeyConfigArgs Empty => new DatabaseValkeyConfigArgs();
    }

    public sealed class DatabaseValkeyConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `Allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `Allchannels` and `Resetchannels`
        /// </summary>
        [Input("aclChannelsDefault")]
        public Input<string>? AclChannelsDefault { get; set; }

        /// <summary>
        /// The ID of the target Valkey cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when ValkeyPersistence is set to off.
        /// </summary>
        [Input("frequentSnapshots")]
        public Input<bool>? FrequentSnapshots { get; set; }

        /// <summary>
        /// The Valkey IO thread count.
        /// </summary>
        [Input("ioThreads")]
        public Input<int>? IoThreads { get; set; }

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Input("lfuDecayTime")]
        public Input<int>? LfuDecayTime { get; set; }

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Input("lfuLogFactor")]
        public Input<int>? LfuLogFactor { get; set; }

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Input("notifyKeyspaceEvents")]
        public Input<string>? NotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// The number of Valkey databases. Changing this will cause a restart of Valkey service.
        /// </summary>
        [Input("numberOfDatabases")]
        public Input<int>? NumberOfDatabases { get; set; }

        /// <summary>
        /// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Input("persistence")]
        public Input<string>? Persistence { get; set; }

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Input("pubsubClientOutputBufferLimit")]
        public Input<int>? PubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// A boolean indicating whether to require SSL to access Valkey.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// The Valkey idle connection timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
        /// </summary>
        [Input("valkeyActiveExpireEffort")]
        public Input<int>? ValkeyActiveExpireEffort { get; set; }

        public DatabaseValkeyConfigState()
        {
        }
        public static new DatabaseValkeyConfigState Empty => new DatabaseValkeyConfigState();
    }
}
