// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to change advanced configuration
    /// options for a DigitalOcean managed Opensearch database cluster.
    /// 
    /// &gt; **Note** Opensearch configurations are only removed from state when destroyed. The remote configuration is not unset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabaseCluster = new DigitalOcean.DatabaseCluster("example", new()
    ///     {
    ///         Name = "example-opensearch-cluster",
    ///         Engine = "opensearch",
    ///         Version = "2",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU2GB,
    ///         Region = DigitalOcean.Region.NYC3,
    ///         NodeCount = 1,
    ///     });
    /// 
    ///     var example = new DigitalOcean.DatabaseOpensearchConfig("example", new()
    ///     {
    ///         ClusterId = exampleDatabaseCluster.Id,
    ///         IsmEnabled = true,
    ///         IsmHistoryEnabled = true,
    ///         IsmHistoryMaxAgeHours = 24,
    ///         IsmHistoryMaxDocs = 2500000,
    ///         IsmHistoryRolloverCheckPeriodHours = 8,
    ///         IsmHistoryRolloverRetentionPeriodDays = 30,
    ///         HttpMaxContentLengthBytes = 100000000,
    ///         HttpMaxHeaderSizeBytes = 8192,
    ///         HttpMaxInitialLineLengthBytes = 4096,
    ///         IndicesQueryBoolMaxClauseCount = 1024,
    ///         SearchMaxBuckets = 10000,
    ///         IndicesFielddataCacheSizePercentage = 3,
    ///         IndicesMemoryIndexBufferSizePercentage = 10,
    ///         IndicesMemoryMinIndexBufferSizeMb = 48,
    ///         IndicesMemoryMaxIndexBufferSizeMb = 3,
    ///         IndicesQueriesCacheSizePercentage = 10,
    ///         IndicesRecoveryMaxMbPerSec = 40,
    ///         IndicesRecoveryMaxConcurrentFileChunks = 2,
    ///         ActionAutoCreateIndexEnabled = true,
    ///         ActionDestructiveRequiresName = false,
    ///         EnableSecurityAudit = false,
    ///         ThreadPoolSearchSize = 1,
    ///         ThreadPoolSearchThrottledSize = 1,
    ///         ThreadPoolSearchThrottledQueueSize = 10,
    ///         ThreadPoolSearchQueueSize = 10,
    ///         ThreadPoolGetSize = 1,
    ///         ThreadPoolGetQueueSize = 10,
    ///         ThreadPoolAnalyzeSize = 1,
    ///         ThreadPoolAnalyzeQueueSize = 10,
    ///         ThreadPoolWriteSize = 1,
    ///         ThreadPoolWriteQueueSize = 10,
    ///         ThreadPoolForceMergeSize = 1,
    ///         OverrideMainResponseVersion = false,
    ///         ScriptMaxCompilationsRate = "use-context",
    ///         ClusterMaxShardsPerNode = 100,
    ///         ClusterRoutingAllocationNodeConcurrentRecoveries = 2,
    ///         PluginsAlertingFilterByBackendRolesEnabled = false,
    ///         ReindexRemoteWhitelists = new[]
    ///         {
    ///             "cloud.digitalocean.com:8080",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Opensearch database cluster's configuration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/databaseOpensearchConfig:DatabaseOpensearchConfig example 4b62829a-9c42-465b-aaa3-84051048e712
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseOpensearchConfig:DatabaseOpensearchConfig")]
    public partial class DatabaseOpensearchConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifices whether to allow automatic creation of indices. Default: `true`
        /// </summary>
        [Output("actionAutoCreateIndexEnabled")]
        public Output<bool> ActionAutoCreateIndexEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to require explicit index names when deleting indices.
        /// </summary>
        [Output("actionDestructiveRequiresName")]
        public Output<bool> ActionDestructiveRequiresName { get; private set; } = null!;

        /// <summary>
        /// The ID of the target Opensearch cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Maximum number of shards allowed per data node.
        /// </summary>
        [Output("clusterMaxShardsPerNode")]
        public Output<int> ClusterMaxShardsPerNode { get; private set; } = null!;

        /// <summary>
        /// Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
        /// </summary>
        [Output("clusterRoutingAllocationNodeConcurrentRecoveries")]
        public Output<int> ClusterRoutingAllocationNodeConcurrentRecoveries { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to allow security audit logging. Default: `false`
        /// </summary>
        [Output("enableSecurityAudit")]
        public Output<bool> EnableSecurityAudit { get; private set; } = null!;

        /// <summary>
        /// Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
        /// </summary>
        [Output("httpMaxContentLengthBytes")]
        public Output<int> HttpMaxContentLengthBytes { get; private set; } = null!;

        /// <summary>
        /// Maximum size of allowed headers, in bytes. Default: `8192`
        /// </summary>
        [Output("httpMaxHeaderSizeBytes")]
        public Output<int> HttpMaxHeaderSizeBytes { get; private set; } = null!;

        /// <summary>
        /// Maximum length of an HTTP URL, in bytes. Default: `4096`
        /// </summary>
        [Output("httpMaxInitialLineLengthBytes")]
        public Output<int> HttpMaxInitialLineLengthBytes { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
        /// </summary>
        [Output("indicesFielddataCacheSizePercentage")]
        public Output<int> IndicesFielddataCacheSizePercentage { get; private set; } = null!;

        /// <summary>
        /// Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
        /// </summary>
        [Output("indicesMemoryIndexBufferSizePercentage")]
        public Output<int> IndicesMemoryIndexBufferSizePercentage { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
        /// </summary>
        [Output("indicesMemoryMaxIndexBufferSizeMb")]
        public Output<int> IndicesMemoryMaxIndexBufferSizeMb { get; private set; } = null!;

        /// <summary>
        /// Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
        /// </summary>
        [Output("indicesMemoryMinIndexBufferSizeMb")]
        public Output<int> IndicesMemoryMinIndexBufferSizeMb { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
        /// </summary>
        [Output("indicesQueriesCacheSizePercentage")]
        public Output<int> IndicesQueriesCacheSizePercentage { get; private set; } = null!;

        /// <summary>
        /// Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
        /// </summary>
        [Output("indicesQueryBoolMaxClauseCount")]
        public Output<int> IndicesQueryBoolMaxClauseCount { get; private set; } = null!;

        /// <summary>
        /// Maximum number of file chunks sent in parallel for each recovery. Default: `2`
        /// </summary>
        [Output("indicesRecoveryMaxConcurrentFileChunks")]
        public Output<int> IndicesRecoveryMaxConcurrentFileChunks { get; private set; } = null!;

        /// <summary>
        /// Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
        /// </summary>
        [Output("indicesRecoveryMaxMbPerSec")]
        public Output<int> IndicesRecoveryMaxMbPerSec { get; private set; } = null!;

        /// <summary>
        /// Specifies whether ISM is enabled or not. Default: `true`
        /// </summary>
        [Output("ismEnabled")]
        public Output<bool> IsmEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
        /// </summary>
        [Output("ismHistoryEnabled")]
        public Output<bool> IsmHistoryEnabled { get; private set; } = null!;

        /// <summary>
        /// Maximum age before rolling over the audit history index, in hours. Default: `24`
        /// </summary>
        [Output("ismHistoryMaxAgeHours")]
        public Output<int> IsmHistoryMaxAgeHours { get; private set; } = null!;

        /// <summary>
        /// Maximum number of documents before rolling over the audit history index. Default: `2500000`
        /// </summary>
        [Output("ismHistoryMaxDocs")]
        public Output<int> IsmHistoryMaxDocs { get; private set; } = null!;

        /// <summary>
        /// The time between rollover checks for the audit history index, in hours. Default: `8`
        /// </summary>
        [Output("ismHistoryRolloverCheckPeriodHours")]
        public Output<int> IsmHistoryRolloverCheckPeriodHours { get; private set; } = null!;

        /// <summary>
        /// Length of time long audit history indices are kept, in days. Default: `30`
        /// </summary>
        [Output("ismHistoryRolloverRetentionPeriodDays")]
        public Output<int> IsmHistoryRolloverRetentionPeriodDays { get; private set; } = null!;

        /// <summary>
        /// Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
        /// </summary>
        [Output("overrideMainResponseVersion")]
        public Output<bool> OverrideMainResponseVersion { get; private set; } = null!;

        /// <summary>
        /// Enable or disable filtering of alerting by backend roles. Default: `false`
        /// </summary>
        [Output("pluginsAlertingFilterByBackendRolesEnabled")]
        public Output<bool> PluginsAlertingFilterByBackendRolesEnabled { get; private set; } = null!;

        /// <summary>
        /// Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
        /// </summary>
        [Output("reindexRemoteWhitelists")]
        public Output<ImmutableArray<string>> ReindexRemoteWhitelists { get; private set; } = null!;

        /// <summary>
        /// Limits the number of inline script compilations within a period of time. Default is `use-context`
        /// </summary>
        [Output("scriptMaxCompilationsRate")]
        public Output<string> ScriptMaxCompilationsRate { get; private set; } = null!;

        /// <summary>
        /// Maximum number of aggregation buckets allowed in a single response. Default: `10000`
        /// </summary>
        [Output("searchMaxBuckets")]
        public Output<int> SearchMaxBuckets { get; private set; } = null!;

        /// <summary>
        /// Size of queue for operations in the analyze thread pool.
        /// </summary>
        [Output("threadPoolAnalyzeQueueSize")]
        public Output<int> ThreadPoolAnalyzeQueueSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolAnalyzeSize")]
        public Output<int> ThreadPoolAnalyzeSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolForceMergeSize")]
        public Output<int> ThreadPoolForceMergeSize { get; private set; } = null!;

        /// <summary>
        /// Size of queue for operations in the get thread pool.
        /// </summary>
        [Output("threadPoolGetQueueSize")]
        public Output<int> ThreadPoolGetQueueSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolGetSize")]
        public Output<int> ThreadPoolGetSize { get; private set; } = null!;

        /// <summary>
        /// Size of queue for operations in the search thread pool.
        /// </summary>
        [Output("threadPoolSearchQueueSize")]
        public Output<int> ThreadPoolSearchQueueSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolSearchSize")]
        public Output<int> ThreadPoolSearchSize { get; private set; } = null!;

        /// <summary>
        /// Size of queue for operations in the search throttled thread pool.
        /// </summary>
        [Output("threadPoolSearchThrottledQueueSize")]
        public Output<int> ThreadPoolSearchThrottledQueueSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolSearchThrottledSize")]
        public Output<int> ThreadPoolSearchThrottledSize { get; private set; } = null!;

        /// <summary>
        /// Size of queue for operations in the write thread pool.
        /// </summary>
        [Output("threadPoolWriteQueueSize")]
        public Output<int> ThreadPoolWriteQueueSize { get; private set; } = null!;

        /// <summary>
        /// Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Output("threadPoolWriteSize")]
        public Output<int> ThreadPoolWriteSize { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseOpensearchConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseOpensearchConfig(string name, DatabaseOpensearchConfigArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseOpensearchConfig:DatabaseOpensearchConfig", name, args ?? new DatabaseOpensearchConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseOpensearchConfig(string name, Input<string> id, DatabaseOpensearchConfigState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseOpensearchConfig:DatabaseOpensearchConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseOpensearchConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseOpensearchConfig Get(string name, Input<string> id, DatabaseOpensearchConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseOpensearchConfig(name, id, state, options);
        }
    }

    public sealed class DatabaseOpensearchConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifices whether to allow automatic creation of indices. Default: `true`
        /// </summary>
        [Input("actionAutoCreateIndexEnabled")]
        public Input<bool>? ActionAutoCreateIndexEnabled { get; set; }

        /// <summary>
        /// Specifies whether to require explicit index names when deleting indices.
        /// </summary>
        [Input("actionDestructiveRequiresName")]
        public Input<bool>? ActionDestructiveRequiresName { get; set; }

        /// <summary>
        /// The ID of the target Opensearch cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Maximum number of shards allowed per data node.
        /// </summary>
        [Input("clusterMaxShardsPerNode")]
        public Input<int>? ClusterMaxShardsPerNode { get; set; }

        /// <summary>
        /// Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
        /// </summary>
        [Input("clusterRoutingAllocationNodeConcurrentRecoveries")]
        public Input<int>? ClusterRoutingAllocationNodeConcurrentRecoveries { get; set; }

        /// <summary>
        /// Specifies whether to allow security audit logging. Default: `false`
        /// </summary>
        [Input("enableSecurityAudit")]
        public Input<bool>? EnableSecurityAudit { get; set; }

        /// <summary>
        /// Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
        /// </summary>
        [Input("httpMaxContentLengthBytes")]
        public Input<int>? HttpMaxContentLengthBytes { get; set; }

        /// <summary>
        /// Maximum size of allowed headers, in bytes. Default: `8192`
        /// </summary>
        [Input("httpMaxHeaderSizeBytes")]
        public Input<int>? HttpMaxHeaderSizeBytes { get; set; }

        /// <summary>
        /// Maximum length of an HTTP URL, in bytes. Default: `4096`
        /// </summary>
        [Input("httpMaxInitialLineLengthBytes")]
        public Input<int>? HttpMaxInitialLineLengthBytes { get; set; }

        /// <summary>
        /// Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
        /// </summary>
        [Input("indicesFielddataCacheSizePercentage")]
        public Input<int>? IndicesFielddataCacheSizePercentage { get; set; }

        /// <summary>
        /// Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
        /// </summary>
        [Input("indicesMemoryIndexBufferSizePercentage")]
        public Input<int>? IndicesMemoryIndexBufferSizePercentage { get; set; }

        /// <summary>
        /// Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
        /// </summary>
        [Input("indicesMemoryMaxIndexBufferSizeMb")]
        public Input<int>? IndicesMemoryMaxIndexBufferSizeMb { get; set; }

        /// <summary>
        /// Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
        /// </summary>
        [Input("indicesMemoryMinIndexBufferSizeMb")]
        public Input<int>? IndicesMemoryMinIndexBufferSizeMb { get; set; }

        /// <summary>
        /// Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
        /// </summary>
        [Input("indicesQueriesCacheSizePercentage")]
        public Input<int>? IndicesQueriesCacheSizePercentage { get; set; }

        /// <summary>
        /// Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
        /// </summary>
        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        /// <summary>
        /// Maximum number of file chunks sent in parallel for each recovery. Default: `2`
        /// </summary>
        [Input("indicesRecoveryMaxConcurrentFileChunks")]
        public Input<int>? IndicesRecoveryMaxConcurrentFileChunks { get; set; }

        /// <summary>
        /// Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
        /// </summary>
        [Input("indicesRecoveryMaxMbPerSec")]
        public Input<int>? IndicesRecoveryMaxMbPerSec { get; set; }

        /// <summary>
        /// Specifies whether ISM is enabled or not. Default: `true`
        /// </summary>
        [Input("ismEnabled")]
        public Input<bool>? IsmEnabled { get; set; }

        /// <summary>
        /// Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
        /// </summary>
        [Input("ismHistoryEnabled")]
        public Input<bool>? IsmHistoryEnabled { get; set; }

        /// <summary>
        /// Maximum age before rolling over the audit history index, in hours. Default: `24`
        /// </summary>
        [Input("ismHistoryMaxAgeHours")]
        public Input<int>? IsmHistoryMaxAgeHours { get; set; }

        /// <summary>
        /// Maximum number of documents before rolling over the audit history index. Default: `2500000`
        /// </summary>
        [Input("ismHistoryMaxDocs")]
        public Input<int>? IsmHistoryMaxDocs { get; set; }

        /// <summary>
        /// The time between rollover checks for the audit history index, in hours. Default: `8`
        /// </summary>
        [Input("ismHistoryRolloverCheckPeriodHours")]
        public Input<int>? IsmHistoryRolloverCheckPeriodHours { get; set; }

        /// <summary>
        /// Length of time long audit history indices are kept, in days. Default: `30`
        /// </summary>
        [Input("ismHistoryRolloverRetentionPeriodDays")]
        public Input<int>? IsmHistoryRolloverRetentionPeriodDays { get; set; }

        /// <summary>
        /// Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
        /// </summary>
        [Input("overrideMainResponseVersion")]
        public Input<bool>? OverrideMainResponseVersion { get; set; }

        /// <summary>
        /// Enable or disable filtering of alerting by backend roles. Default: `false`
        /// </summary>
        [Input("pluginsAlertingFilterByBackendRolesEnabled")]
        public Input<bool>? PluginsAlertingFilterByBackendRolesEnabled { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;

        /// <summary>
        /// Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
        /// </summary>
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        /// <summary>
        /// Limits the number of inline script compilations within a period of time. Default is `use-context`
        /// </summary>
        [Input("scriptMaxCompilationsRate")]
        public Input<string>? ScriptMaxCompilationsRate { get; set; }

        /// <summary>
        /// Maximum number of aggregation buckets allowed in a single response. Default: `10000`
        /// </summary>
        [Input("searchMaxBuckets")]
        public Input<int>? SearchMaxBuckets { get; set; }

        /// <summary>
        /// Size of queue for operations in the analyze thread pool.
        /// </summary>
        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        /// <summary>
        /// Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the get thread pool.
        /// </summary>
        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the search thread pool.
        /// </summary>
        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the search throttled thread pool.
        /// </summary>
        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the write thread pool.
        /// </summary>
        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public DatabaseOpensearchConfigArgs()
        {
        }
        public static new DatabaseOpensearchConfigArgs Empty => new DatabaseOpensearchConfigArgs();
    }

    public sealed class DatabaseOpensearchConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifices whether to allow automatic creation of indices. Default: `true`
        /// </summary>
        [Input("actionAutoCreateIndexEnabled")]
        public Input<bool>? ActionAutoCreateIndexEnabled { get; set; }

        /// <summary>
        /// Specifies whether to require explicit index names when deleting indices.
        /// </summary>
        [Input("actionDestructiveRequiresName")]
        public Input<bool>? ActionDestructiveRequiresName { get; set; }

        /// <summary>
        /// The ID of the target Opensearch cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Maximum number of shards allowed per data node.
        /// </summary>
        [Input("clusterMaxShardsPerNode")]
        public Input<int>? ClusterMaxShardsPerNode { get; set; }

        /// <summary>
        /// Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
        /// </summary>
        [Input("clusterRoutingAllocationNodeConcurrentRecoveries")]
        public Input<int>? ClusterRoutingAllocationNodeConcurrentRecoveries { get; set; }

        /// <summary>
        /// Specifies whether to allow security audit logging. Default: `false`
        /// </summary>
        [Input("enableSecurityAudit")]
        public Input<bool>? EnableSecurityAudit { get; set; }

        /// <summary>
        /// Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
        /// </summary>
        [Input("httpMaxContentLengthBytes")]
        public Input<int>? HttpMaxContentLengthBytes { get; set; }

        /// <summary>
        /// Maximum size of allowed headers, in bytes. Default: `8192`
        /// </summary>
        [Input("httpMaxHeaderSizeBytes")]
        public Input<int>? HttpMaxHeaderSizeBytes { get; set; }

        /// <summary>
        /// Maximum length of an HTTP URL, in bytes. Default: `4096`
        /// </summary>
        [Input("httpMaxInitialLineLengthBytes")]
        public Input<int>? HttpMaxInitialLineLengthBytes { get; set; }

        /// <summary>
        /// Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
        /// </summary>
        [Input("indicesFielddataCacheSizePercentage")]
        public Input<int>? IndicesFielddataCacheSizePercentage { get; set; }

        /// <summary>
        /// Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
        /// </summary>
        [Input("indicesMemoryIndexBufferSizePercentage")]
        public Input<int>? IndicesMemoryIndexBufferSizePercentage { get; set; }

        /// <summary>
        /// Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
        /// </summary>
        [Input("indicesMemoryMaxIndexBufferSizeMb")]
        public Input<int>? IndicesMemoryMaxIndexBufferSizeMb { get; set; }

        /// <summary>
        /// Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
        /// </summary>
        [Input("indicesMemoryMinIndexBufferSizeMb")]
        public Input<int>? IndicesMemoryMinIndexBufferSizeMb { get; set; }

        /// <summary>
        /// Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
        /// </summary>
        [Input("indicesQueriesCacheSizePercentage")]
        public Input<int>? IndicesQueriesCacheSizePercentage { get; set; }

        /// <summary>
        /// Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
        /// </summary>
        [Input("indicesQueryBoolMaxClauseCount")]
        public Input<int>? IndicesQueryBoolMaxClauseCount { get; set; }

        /// <summary>
        /// Maximum number of file chunks sent in parallel for each recovery. Default: `2`
        /// </summary>
        [Input("indicesRecoveryMaxConcurrentFileChunks")]
        public Input<int>? IndicesRecoveryMaxConcurrentFileChunks { get; set; }

        /// <summary>
        /// Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
        /// </summary>
        [Input("indicesRecoveryMaxMbPerSec")]
        public Input<int>? IndicesRecoveryMaxMbPerSec { get; set; }

        /// <summary>
        /// Specifies whether ISM is enabled or not. Default: `true`
        /// </summary>
        [Input("ismEnabled")]
        public Input<bool>? IsmEnabled { get; set; }

        /// <summary>
        /// Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
        /// </summary>
        [Input("ismHistoryEnabled")]
        public Input<bool>? IsmHistoryEnabled { get; set; }

        /// <summary>
        /// Maximum age before rolling over the audit history index, in hours. Default: `24`
        /// </summary>
        [Input("ismHistoryMaxAgeHours")]
        public Input<int>? IsmHistoryMaxAgeHours { get; set; }

        /// <summary>
        /// Maximum number of documents before rolling over the audit history index. Default: `2500000`
        /// </summary>
        [Input("ismHistoryMaxDocs")]
        public Input<int>? IsmHistoryMaxDocs { get; set; }

        /// <summary>
        /// The time between rollover checks for the audit history index, in hours. Default: `8`
        /// </summary>
        [Input("ismHistoryRolloverCheckPeriodHours")]
        public Input<int>? IsmHistoryRolloverCheckPeriodHours { get; set; }

        /// <summary>
        /// Length of time long audit history indices are kept, in days. Default: `30`
        /// </summary>
        [Input("ismHistoryRolloverRetentionPeriodDays")]
        public Input<int>? IsmHistoryRolloverRetentionPeriodDays { get; set; }

        /// <summary>
        /// Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
        /// </summary>
        [Input("overrideMainResponseVersion")]
        public Input<bool>? OverrideMainResponseVersion { get; set; }

        /// <summary>
        /// Enable or disable filtering of alerting by backend roles. Default: `false`
        /// </summary>
        [Input("pluginsAlertingFilterByBackendRolesEnabled")]
        public Input<bool>? PluginsAlertingFilterByBackendRolesEnabled { get; set; }

        [Input("reindexRemoteWhitelists")]
        private InputList<string>? _reindexRemoteWhitelists;

        /// <summary>
        /// Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
        /// </summary>
        public InputList<string> ReindexRemoteWhitelists
        {
            get => _reindexRemoteWhitelists ?? (_reindexRemoteWhitelists = new InputList<string>());
            set => _reindexRemoteWhitelists = value;
        }

        /// <summary>
        /// Limits the number of inline script compilations within a period of time. Default is `use-context`
        /// </summary>
        [Input("scriptMaxCompilationsRate")]
        public Input<string>? ScriptMaxCompilationsRate { get; set; }

        /// <summary>
        /// Maximum number of aggregation buckets allowed in a single response. Default: `10000`
        /// </summary>
        [Input("searchMaxBuckets")]
        public Input<int>? SearchMaxBuckets { get; set; }

        /// <summary>
        /// Size of queue for operations in the analyze thread pool.
        /// </summary>
        [Input("threadPoolAnalyzeQueueSize")]
        public Input<int>? ThreadPoolAnalyzeQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolAnalyzeSize")]
        public Input<int>? ThreadPoolAnalyzeSize { get; set; }

        /// <summary>
        /// Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolForceMergeSize")]
        public Input<int>? ThreadPoolForceMergeSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the get thread pool.
        /// </summary>
        [Input("threadPoolGetQueueSize")]
        public Input<int>? ThreadPoolGetQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolGetSize")]
        public Input<int>? ThreadPoolGetSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the search thread pool.
        /// </summary>
        [Input("threadPoolSearchQueueSize")]
        public Input<int>? ThreadPoolSearchQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchSize")]
        public Input<int>? ThreadPoolSearchSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the search throttled thread pool.
        /// </summary>
        [Input("threadPoolSearchThrottledQueueSize")]
        public Input<int>? ThreadPoolSearchThrottledQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolSearchThrottledSize")]
        public Input<int>? ThreadPoolSearchThrottledSize { get; set; }

        /// <summary>
        /// Size of queue for operations in the write thread pool.
        /// </summary>
        [Input("threadPoolWriteQueueSize")]
        public Input<int>? ThreadPoolWriteQueueSize { get; set; }

        /// <summary>
        /// Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
        /// </summary>
        [Input("threadPoolWriteSize")]
        public Input<int>? ThreadPoolWriteSize { get; set; }

        public DatabaseOpensearchConfigState()
        {
        }
        public static new DatabaseOpensearchConfigState Empty => new DatabaseOpensearchConfigState();
    }
}
