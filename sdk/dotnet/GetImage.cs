// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetImage
    {
        /// <summary>
        /// Get information on an image for use in other resources (e.g. creating a Droplet
        /// based on snapshot). This data source provides all of the image properties as
        /// configured on your DigitalOcean account. This is useful if the image in question
        /// is not managed by the provider or you need to utilize any of the image's data.
        /// 
        /// An error is triggered if zero or more than one result is returned by the query.
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("digitalocean:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on an image for use in other resources (e.g. creating a Droplet
        /// based on snapshot). This data source provides all of the image properties as
        /// configured on your DigitalOcean account. This is useful if the image in question
        /// is not managed by the provider or you need to utilize any of the image's data.
        /// 
        /// An error is triggered if zero or more than one result is returned by the query.
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("digitalocean:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the image
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The slug of the official image.
        /// 
        /// If `name` is specified, you may also specify:
        /// </summary>
        [Input("slug")]
        public string? Slug { get; set; }

        /// <summary>
        /// Restrict the search to one of the following categories of images:
        /// </summary>
        [Input("source")]
        public string? Source { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the image
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// The name of the image.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The slug of the official image.
        /// 
        /// If `name` is specified, you may also specify:
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// Restrict the search to one of the following categories of images:
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// When the image was created
        /// </summary>
        public readonly string Created;
        public readonly string Description;
        /// <summary>
        /// The name of the distribution of the OS of the image.
        /// </summary>
        public readonly string Distribution;
        /// <summary>
        /// Any applicable error message pertaining to the image
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// The ID of the image.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The id of the image (legacy parameter).
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The minimum 'disk' required for the image.
        /// </summary>
        public readonly int MinDiskSize;
        /// <summary>
        /// The name of the image.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Is image a public image or not. Public images represent
        /// Linux distributions or One-Click Applications, while non-public images represent
        /// snapshots and backups and are only available within your account.
        /// </summary>
        public readonly bool Private;
        /// <summary>
        /// A set of the regions that the image is available in.
        /// </summary>
        public readonly ImmutableArray<string> Regions;
        /// <summary>
        /// The size of the image in GB.
        /// </summary>
        public readonly double SizeGigabytes;
        /// <summary>
        /// Unique text identifier of the image.
        /// </summary>
        public readonly string Slug;
        public readonly string? Source;
        /// <summary>
        /// Current status of the image
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A set of tags applied to the image
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Type of the image.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetImageResult(
            string created,

            string description,

            string distribution,

            string errorMessage,

            int id,

            string image,

            int minDiskSize,

            string name,

            bool @private,

            ImmutableArray<string> regions,

            double sizeGigabytes,

            string slug,

            string? source,

            string status,

            ImmutableArray<string> tags,

            string type)
        {
            Created = created;
            Description = description;
            Distribution = distribution;
            ErrorMessage = errorMessage;
            Id = id;
            Image = image;
            MinDiskSize = minDiskSize;
            Name = name;
            Private = @private;
            Regions = regions;
            SizeGigabytes = sizeGigabytes;
            Slug = slug;
            Source = source;
            Status = status;
            Tags = tags;
            Type = type;
        }
    }
}
