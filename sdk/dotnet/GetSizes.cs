// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetSizes
    {
        /// <summary>
        /// Retrieves information about the Droplet sizes that DigitalOcean supports, with
        /// the ability to filter and sort the results. If no filters are specified, all sizes
        /// will be returned.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Most common usage will probably be to supply a size to droplet:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = Output.Create(DigitalOcean.GetSizes.InvokeAsync(new DigitalOcean.GetSizesArgs
        ///         {
        ///             Filter = 
        ///             {
        ///                 
        ///                 {
        ///                     { "key", "slug" },
        ///                     { "values", 
        ///                     {
        ///                         "s-1vcpu-1gb",
        ///                     } },
        ///                 },
        ///             },
        ///         }));
        ///         var web = new DigitalOcean.Droplet("web", new DigitalOcean.DropletArgs
        ///         {
        ///             Image = "ubuntu-18-04-x64",
        ///             Region = "sgp1",
        ///             Size = main.Apply(main =&gt; main.Sizes)[0].Apply(sizes =&gt; sizes.Slug),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// The data source also supports multiple filters and sorts. For example, to fetch sizes with 1 or 2 virtual CPU that are available "sgp1" region, then pick the cheapest one:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = Output.Create(DigitalOcean.GetSizes.InvokeAsync(new DigitalOcean.GetSizesArgs
        ///         {
        ///             Filter = 
        ///             {
        ///                 
        ///                 {
        ///                     { "key", "vcpus" },
        ///                     { "values", 
        ///                     {
        ///                         1,
        ///                         2,
        ///                     } },
        ///                 },
        ///                 
        ///                 {
        ///                     { "key", "regions" },
        ///                     { "values", 
        ///                     {
        ///                         "sgp1",
        ///                     } },
        ///                 },
        ///             },
        ///             Sort = 
        ///             {
        ///                 
        ///                 {
        ///                     { "key", "price_monthly" },
        ///                     { "direction", "asc" },
        ///                 },
        ///             },
        ///         }));
        ///         var web = new DigitalOcean.Droplet("web", new DigitalOcean.DropletArgs
        ///         {
        ///             Image = "ubuntu-18-04-x64",
        ///             Region = "sgp1",
        ///             Size = main.Apply(main =&gt; main.Sizes)[0].Apply(sizes =&gt; sizes.Slug),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// The data source can also handle multiple sorts. In which case, the sort will be applied in the order it is defined. For example, to sort by memory in ascending order, then sort by disk in descending order between sizes with same memory:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var main = Output.Create(DigitalOcean.GetSizes.InvokeAsync(new DigitalOcean.GetSizesArgs
        ///         {
        ///             Sorts = 
        ///             {
        ///                 new DigitalOcean.Inputs.GetSizesSortArgs
        ///                 {
        ///                     Direction = "asc",
        ///                     Key = "memory",
        ///                 },
        ///                 new DigitalOcean.Inputs.GetSizesSortArgs
        ///                 {
        ///                     Direction = "desc",
        ///                     Key = "disk",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSizesResult> InvokeAsync(GetSizesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSizesResult>("digitalocean:index/getSizes:getSizes", args ?? new GetSizesArgs(), options.WithVersion());
    }


    public sealed class GetSizesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSizesFilterArgs>? _filters;

        /// <summary>
        /// Filter the results.
        /// The `filter` block is documented below.
        /// </summary>
        public List<Inputs.GetSizesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSizesFilterArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private List<Inputs.GetSizesSortArgs>? _sorts;

        /// <summary>
        /// Sort the results.
        /// The `sort` block is documented below.
        /// </summary>
        public List<Inputs.GetSizesSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetSizesSortArgs>());
            set => _sorts = value;
        }

        public GetSizesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSizesResult
    {
        public readonly ImmutableArray<Outputs.GetSizesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetSizesSizeResult> Sizes;
        public readonly ImmutableArray<Outputs.GetSizesSortResult> Sorts;

        [OutputConstructor]
        private GetSizesResult(
            ImmutableArray<Outputs.GetSizesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSizesSizeResult> sizes,

            ImmutableArray<Outputs.GetSizesSortResult> sorts)
        {
            Filters = filters;
            Id = id;
            Sizes = sizes;
            Sorts = sorts;
        }
    }
}
