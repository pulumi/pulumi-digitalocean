// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetProjects
    {
        /// <summary>
        /// Retrieve information about all DigitalOcean projects associated with an account, with
        /// the ability to filter and sort the results. If no filters are specified, all projects
        /// will be returned.
        /// 
        /// Note: You can use the `digitalocean.Project` data source to
        /// obtain metadata about a single project if you already know the `id` to retrieve or the unique
        /// `name` of the project.
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("digitalocean:index/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithVersion());
    }


    public sealed class GetProjectsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetProjectsFilterArgs>? _filters;

        /// <summary>
        /// Filter the results.
        /// The `filter` block is documented below.
        /// </summary>
        public List<Inputs.GetProjectsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetProjectsFilterArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private List<Inputs.GetProjectsSortArgs>? _sorts;

        /// <summary>
        /// Sort the results.
        /// The `sort` block is documented below.
        /// </summary>
        public List<Inputs.GetProjectsSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetProjectsSortArgs>());
            set => _sorts = value;
        }

        public GetProjectsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        public readonly ImmutableArray<Outputs.GetProjectsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A set of projects satisfying any `filter` and `sort` criteria. Each project has
        /// the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsProjectResult> Projects;
        public readonly ImmutableArray<Outputs.GetProjectsSortResult> Sorts;

        [OutputConstructor]
        private GetProjectsResult(
            ImmutableArray<Outputs.GetProjectsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetProjectsProjectResult> projects,

            ImmutableArray<Outputs.GetProjectsSortResult> sorts)
        {
            Filters = filters;
            Id = id;
            Projects = projects;
            Sorts = sorts;
        }
    }
}
