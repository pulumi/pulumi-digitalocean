// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetGenaiAgents
    {
        public static Task<GetGenaiAgentsResult> InvokeAsync(GetGenaiAgentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGenaiAgentsResult>("digitalocean:index/getGenaiAgents:getGenaiAgents", args ?? new GetGenaiAgentsArgs(), options.WithDefaults());

        public static Output<GetGenaiAgentsResult> Invoke(GetGenaiAgentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGenaiAgentsResult>("digitalocean:index/getGenaiAgents:getGenaiAgents", args ?? new GetGenaiAgentsInvokeArgs(), options.WithDefaults());

        public static Output<GetGenaiAgentsResult> Invoke(GetGenaiAgentsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGenaiAgentsResult>("digitalocean:index/getGenaiAgents:getGenaiAgents", args ?? new GetGenaiAgentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGenaiAgentsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetGenaiAgentsFilterArgs>? _filters;
        public List<Inputs.GetGenaiAgentsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetGenaiAgentsFilterArgs>());
            set => _filters = value;
        }

        [Input("onlyDeployed")]
        public bool? OnlyDeployed { get; set; }

        [Input("sorts")]
        private List<Inputs.GetGenaiAgentsSortArgs>? _sorts;
        public List<Inputs.GetGenaiAgentsSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetGenaiAgentsSortArgs>());
            set => _sorts = value;
        }

        public GetGenaiAgentsArgs()
        {
        }
        public static new GetGenaiAgentsArgs Empty => new GetGenaiAgentsArgs();
    }

    public sealed class GetGenaiAgentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetGenaiAgentsFilterInputArgs>? _filters;
        public InputList<Inputs.GetGenaiAgentsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetGenaiAgentsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("onlyDeployed")]
        public Input<bool>? OnlyDeployed { get; set; }

        [Input("sorts")]
        private InputList<Inputs.GetGenaiAgentsSortInputArgs>? _sorts;
        public InputList<Inputs.GetGenaiAgentsSortInputArgs> Sorts
        {
            get => _sorts ?? (_sorts = new InputList<Inputs.GetGenaiAgentsSortInputArgs>());
            set => _sorts = value;
        }

        public GetGenaiAgentsInvokeArgs()
        {
        }
        public static new GetGenaiAgentsInvokeArgs Empty => new GetGenaiAgentsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGenaiAgentsResult
    {
        public readonly ImmutableArray<Outputs.GetGenaiAgentsAgentResult> Agents;
        public readonly ImmutableArray<Outputs.GetGenaiAgentsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? OnlyDeployed;
        public readonly ImmutableArray<Outputs.GetGenaiAgentsSortResult> Sorts;

        [OutputConstructor]
        private GetGenaiAgentsResult(
            ImmutableArray<Outputs.GetGenaiAgentsAgentResult> agents,

            ImmutableArray<Outputs.GetGenaiAgentsFilterResult> filters,

            string id,

            bool? onlyDeployed,

            ImmutableArray<Outputs.GetGenaiAgentsSortResult> sorts)
        {
            Agents = agents;
            Filters = filters;
            Id = id;
            OnlyDeployed = onlyDeployed;
            Sorts = sorts;
        }
    }
}
