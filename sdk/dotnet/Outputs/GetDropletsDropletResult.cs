// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean.Outputs
{

    [OutputType]
    public sealed class GetDropletsDropletResult
    {
        /// <summary>
        /// Whether backups are enabled.
        /// </summary>
        public readonly bool Backups;
        /// <summary>
        /// the creation date for the Droplet
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The size of the Droplet's disk in GB.
        /// </summary>
        public readonly int Disk;
        /// <summary>
        /// The ID of the Droplet.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// The Droplet image ID or slug.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The Droplet's public IPv4 address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// The Droplet's private IPv4 address
        /// </summary>
        public readonly string Ipv4AddressPrivate;
        /// <summary>
        /// Whether IPv6 is enabled.
        /// </summary>
        public readonly bool Ipv6;
        /// <summary>
        /// The Droplet's public IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// The Droplet's private IPv6 address
        /// </summary>
        public readonly string Ipv6AddressPrivate;
        /// <summary>
        /// Whether the Droplet is locked.
        /// </summary>
        public readonly bool Locked;
        /// <summary>
        /// The amount of the Droplet's memory in MB.
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// Whether monitoring agent is installed.
        /// </summary>
        public readonly bool Monitoring;
        /// <summary>
        /// name of the Droplet
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Droplet hourly price.
        /// </summary>
        public readonly double PriceHourly;
        /// <summary>
        /// Droplet monthly price.
        /// </summary>
        public readonly double PriceMonthly;
        /// <summary>
        /// Whether private networks are enabled.
        /// </summary>
        public readonly bool PrivateNetworking;
        /// <summary>
        /// The region the Droplet is running in.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The unique slug that identifies the type of Droplet.
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// The status of the Droplet.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A list of the tags associated to the Droplet.
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// The uniform resource name of the Droplet
        /// </summary>
        public readonly string Urn;
        /// <summary>
        /// The number of the Droplet's virtual CPUs.
        /// </summary>
        public readonly int Vcpus;
        /// <summary>
        /// List of the IDs of each volumes attached to the Droplet.
        /// </summary>
        public readonly ImmutableArray<string> VolumeIds;
        /// <summary>
        /// The ID of the VPC where the Droplet is located.
        /// </summary>
        public readonly string VpcUuid;

        [OutputConstructor]
        private GetDropletsDropletResult(
            bool backups,

            string createdAt,

            int disk,

            int id,

            string image,

            string ipv4Address,

            string ipv4AddressPrivate,

            bool ipv6,

            string ipv6Address,

            string ipv6AddressPrivate,

            bool locked,

            int memory,

            bool monitoring,

            string name,

            double priceHourly,

            double priceMonthly,

            bool privateNetworking,

            string region,

            string size,

            string status,

            ImmutableArray<string> tags,

            string urn,

            int vcpus,

            ImmutableArray<string> volumeIds,

            string vpcUuid)
        {
            Backups = backups;
            CreatedAt = createdAt;
            Disk = disk;
            Id = id;
            Image = image;
            Ipv4Address = ipv4Address;
            Ipv4AddressPrivate = ipv4AddressPrivate;
            Ipv6 = ipv6;
            Ipv6Address = ipv6Address;
            Ipv6AddressPrivate = ipv6AddressPrivate;
            Locked = locked;
            Memory = memory;
            Monitoring = monitoring;
            Name = name;
            PriceHourly = priceHourly;
            PriceMonthly = priceMonthly;
            PrivateNetworking = privateNetworking;
            Region = region;
            Size = size;
            Status = status;
            Tags = tags;
            Urn = urn;
            Vcpus = vcpus;
            VolumeIds = volumeIds;
            VpcUuid = vpcUuid;
        }
    }
}
