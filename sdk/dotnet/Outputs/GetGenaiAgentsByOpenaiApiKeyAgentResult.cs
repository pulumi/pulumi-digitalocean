// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean.Outputs
{

    [OutputType]
    public sealed class GetGenaiAgentsByOpenaiApiKeyAgentResult
    {
        /// <summary>
        /// AgentGuardrail represents a Guardrail attached to Gen AI Agent
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentAgentGuardrailResult> AgentGuardrails;
        /// <summary>
        /// ID of the Agent to retrieve
        /// </summary>
        public readonly string AgentId;
        /// <summary>
        /// Anthropic API Key information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentAnthropicApiKeyResult> AnthropicApiKeys;
        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentApiKeyInfoResult> ApiKeyInfos;
        /// <summary>
        /// List of API Keys
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentApiKeyResult> ApiKeys;
        /// <summary>
        /// List of Chatbot Identifiers
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChatbotIdentifierResult> ChatbotIdentifiers;
        /// <summary>
        /// ChatBot configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChatbotResult> Chatbots;
        /// <summary>
        /// List of child agents
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChildAgentResult> ChildAgents;
        /// <summary>
        /// Timestamp when the Agent was created
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentDeploymentResult> Deployments;
        /// <summary>
        /// Description for the Agent
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentFunctionResult> Functions;
        /// <summary>
        /// If case condition
        /// </summary>
        public readonly string? IfCase;
        /// <summary>
        /// Instruction for the Agent
        /// </summary>
        public readonly string Instruction;
        /// <summary>
        /// K value
        /// </summary>
        public readonly int? K;
        /// <summary>
        /// List of Knowledge Bases
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentKnowledgeBaseResult> KnowledgeBases;
        /// <summary>
        /// Maximum tokens allowed
        /// </summary>
        public readonly int? MaxTokens;
        /// <summary>
        /// Model UUID of the Agent
        /// </summary>
        public readonly string ModelUuid;
        /// <summary>
        /// Model of the Agent
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentModelResult> Models;
        /// <summary>
        /// Name of the Agent
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// OpenAI API Key information
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentOpenAiApiKeyResult> OpenAiApiKeys;
        /// <summary>
        /// List of parent agents
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentParentAgentResult> ParentAgents;
        /// <summary>
        /// Project ID of the Agent
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Region where the Agent is deployed
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Retrieval method used
        /// </summary>
        public readonly string? RetrievalMethod;
        /// <summary>
        /// Timestamp when the route was created
        /// </summary>
        public readonly string RouteCreatedAt;
        /// <summary>
        /// User who created the route
        /// </summary>
        public readonly string? RouteCreatedBy;
        /// <summary>
        /// Route name
        /// </summary>
        public readonly string? RouteName;
        /// <summary>
        /// Route UUID
        /// </summary>
        public readonly string? RouteUuid;
        /// <summary>
        /// List of Tags
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Agent temperature setting
        /// </summary>
        public readonly double? Temperature;
        /// <summary>
        /// Agent Template
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentTemplateResult> Templates;
        /// <summary>
        /// Top P sampling parameter
        /// </summary>
        public readonly double? TopP;
        /// <summary>
        /// Timestamp when the Agent was updated
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// URL for the Agent
        /// </summary>
        public readonly string? Url;
        /// <summary>
        /// User ID linked with the Agent
        /// </summary>
        public readonly string? UserId;

        [OutputConstructor]
        private GetGenaiAgentsByOpenaiApiKeyAgentResult(
            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentAgentGuardrailResult> agentGuardrails,

            string agentId,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentAnthropicApiKeyResult> anthropicApiKeys,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentApiKeyInfoResult> apiKeyInfos,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentApiKeyResult> apiKeys,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChatbotIdentifierResult> chatbotIdentifiers,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChatbotResult> chatbots,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentChildAgentResult> childAgents,

            string createdAt,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentDeploymentResult> deployments,

            string? description,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentFunctionResult> functions,

            string? ifCase,

            string instruction,

            int? k,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentKnowledgeBaseResult> knowledgeBases,

            int? maxTokens,

            string modelUuid,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentModelResult> models,

            string name,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentOpenAiApiKeyResult> openAiApiKeys,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentParentAgentResult> parentAgents,

            string projectId,

            string region,

            string? retrievalMethod,

            string routeCreatedAt,

            string? routeCreatedBy,

            string? routeName,

            string? routeUuid,

            ImmutableArray<string> tags,

            double? temperature,

            ImmutableArray<Outputs.GetGenaiAgentsByOpenaiApiKeyAgentTemplateResult> templates,

            double? topP,

            string updatedAt,

            string? url,

            string? userId)
        {
            AgentGuardrails = agentGuardrails;
            AgentId = agentId;
            AnthropicApiKeys = anthropicApiKeys;
            ApiKeyInfos = apiKeyInfos;
            ApiKeys = apiKeys;
            ChatbotIdentifiers = chatbotIdentifiers;
            Chatbots = chatbots;
            ChildAgents = childAgents;
            CreatedAt = createdAt;
            Deployments = deployments;
            Description = description;
            Functions = functions;
            IfCase = ifCase;
            Instruction = instruction;
            K = k;
            KnowledgeBases = knowledgeBases;
            MaxTokens = maxTokens;
            ModelUuid = modelUuid;
            Models = models;
            Name = name;
            OpenAiApiKeys = openAiApiKeys;
            ParentAgents = parentAgents;
            ProjectId = projectId;
            Region = region;
            RetrievalMethod = retrievalMethod;
            RouteCreatedAt = routeCreatedAt;
            RouteCreatedBy = routeCreatedBy;
            RouteName = routeName;
            RouteUuid = routeUuid;
            Tags = tags;
            Temperature = temperature;
            Templates = templates;
            TopP = topP;
            UpdatedAt = updatedAt;
            Url = url;
            UserId = userId;
        }
    }
}
