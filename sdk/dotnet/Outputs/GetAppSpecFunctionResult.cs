// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean.Outputs
{

    [OutputType]
    public sealed class GetAppSpecFunctionResult
    {
        /// <summary>
        /// Describes an alert policy for the component.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAppSpecFunctionAlertResult> Alerts;
        /// <summary>
        /// A Bitbucket repo to use as component's source. Only one of `Git`, `Github`, `Bitbucket`, `Gitlab`, or `Image` may be set. To read your repo, App Platform must be authorized to access your Bitbucket account. Go to this URL to link App Platform to your Bitbucket account: `https://cloud.digitalocean.com/apps/bitbucket/install`.
        /// </summary>
        public readonly Outputs.GetAppSpecFunctionBitbucketResult? Bitbucket;
        /// <summary>
        /// The [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) policies of the app.
        /// </summary>
        public readonly Outputs.GetAppSpecFunctionCorsResult? Cors;
        /// <summary>
        /// Describes an environment variable made available to an app competent.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAppSpecFunctionEnvResult> Envs;
        /// <summary>
        /// A Git repo to use as the component's source. The repository must be able to be cloned without authentication.  Only one of `Git`, `Github` or `Gitlab`  may be set.
        /// </summary>
        public readonly Outputs.GetAppSpecFunctionGitResult? Git;
        /// <summary>
        /// A GitHub repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/github/install). Only one of `Git`, `Github`, `Bitbucket`, `Gitlab`, or `Image` may be set.
        /// </summary>
        public readonly Outputs.GetAppSpecFunctionGithubResult? Github;
        /// <summary>
        /// A Gitlab repo to use as the component's source. DigitalOcean App Platform must have [access to the repository](https://cloud.digitalocean.com/apps/gitlab/install). Only one of `Git`, `Github`, `Bitbucket`, `Gitlab`, or `Image` may be set.
        /// </summary>
        public readonly Outputs.GetAppSpecFunctionGitlabResult? Gitlab;
        /// <summary>
        /// Describes a log forwarding destination.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAppSpecFunctionLogDestinationResult> LogDestinations;
        /// <summary>
        /// The name of the component.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetAppSpecFunctionRouteResult> Routes;
        /// <summary>
        /// An optional path to the working directory to use for the build.
        /// </summary>
        public readonly string? SourceDir;

        [OutputConstructor]
        private GetAppSpecFunctionResult(
            ImmutableArray<Outputs.GetAppSpecFunctionAlertResult> alerts,

            Outputs.GetAppSpecFunctionBitbucketResult? bitbucket,

            Outputs.GetAppSpecFunctionCorsResult? cors,

            ImmutableArray<Outputs.GetAppSpecFunctionEnvResult> envs,

            Outputs.GetAppSpecFunctionGitResult? git,

            Outputs.GetAppSpecFunctionGithubResult? github,

            Outputs.GetAppSpecFunctionGitlabResult? gitlab,

            ImmutableArray<Outputs.GetAppSpecFunctionLogDestinationResult> logDestinations,

            string name,

            ImmutableArray<Outputs.GetAppSpecFunctionRouteResult> routes,

            string? sourceDir)
        {
            Alerts = alerts;
            Bitbucket = bitbucket;
            Cors = cors;
            Envs = envs;
            Git = git;
            Github = github;
            Gitlab = gitlab;
            LogDestinations = logDestinations;
            Name = name;
            Routes = routes;
            SourceDir = sourceDir;
        }
    }
}
