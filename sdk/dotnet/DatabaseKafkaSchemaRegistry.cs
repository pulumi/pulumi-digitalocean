// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a DigitalOcean Kafka schema registry for Kafka clusters.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a new Kafka Schema Registry
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var kafka_example = new DigitalOcean.DatabaseCluster("kafka-example", new()
    ///     {
    ///         Name = "example-kafka-cluster",
    ///         Engine = "kafka",
    ///         Version = "3.5",
    ///         Size = "gd-2vcpu-8gb",
    ///         Region = DigitalOcean.Region.BLR1,
    ///         NodeCount = 3,
    ///         Tags = new[]
    ///         {
    ///             "production",
    ///         },
    ///     });
    /// 
    ///     var schema_01 = new DigitalOcean.DatabaseKafkaSchemaRegistry("schema-01", new()
    ///     {
    ///         ClusterId = kafka_example.Id,
    ///         SubjectName = "test-schema",
    ///         SchemaType = "avro",
    ///         Schema = @"{
    ///   ""type"": ""record"",
    ///   ""namespace"": ""example"",
    ///   ""name"": ""TestRecord"",
    ///   ""fields"": [
    ///     {""name"": ""id"", ""type"": ""string""},
    ///     {""name"": ""name"", ""type"": ""string""},
    ///     {""name"": ""value"", ""type"": ""int""}
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseKafkaSchemaRegistry:DatabaseKafkaSchemaRegistry")]
    public partial class DatabaseKafkaSchemaRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the target Kafka cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The schema definition as a string.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// The schema type. Available values are: avro, json, or protobuf.
        /// </summary>
        [Output("schemaType")]
        public Output<string> SchemaType { get; private set; } = null!;

        /// <summary>
        /// The name of the schema subject.
        /// </summary>
        [Output("subjectName")]
        public Output<string> SubjectName { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseKafkaSchemaRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseKafkaSchemaRegistry(string name, DatabaseKafkaSchemaRegistryArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseKafkaSchemaRegistry:DatabaseKafkaSchemaRegistry", name, args ?? new DatabaseKafkaSchemaRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseKafkaSchemaRegistry(string name, Input<string> id, DatabaseKafkaSchemaRegistryState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseKafkaSchemaRegistry:DatabaseKafkaSchemaRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseKafkaSchemaRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseKafkaSchemaRegistry Get(string name, Input<string> id, DatabaseKafkaSchemaRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseKafkaSchemaRegistry(name, id, state, options);
        }
    }

    public sealed class DatabaseKafkaSchemaRegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target Kafka cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The schema definition as a string.
        /// </summary>
        [Input("schema", required: true)]
        public Input<string> Schema { get; set; } = null!;

        /// <summary>
        /// The schema type. Available values are: avro, json, or protobuf.
        /// </summary>
        [Input("schemaType", required: true)]
        public Input<string> SchemaType { get; set; } = null!;

        /// <summary>
        /// The name of the schema subject.
        /// </summary>
        [Input("subjectName", required: true)]
        public Input<string> SubjectName { get; set; } = null!;

        public DatabaseKafkaSchemaRegistryArgs()
        {
        }
        public static new DatabaseKafkaSchemaRegistryArgs Empty => new DatabaseKafkaSchemaRegistryArgs();
    }

    public sealed class DatabaseKafkaSchemaRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target Kafka cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The schema definition as a string.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// The schema type. Available values are: avro, json, or protobuf.
        /// </summary>
        [Input("schemaType")]
        public Input<string>? SchemaType { get; set; }

        /// <summary>
        /// The name of the schema subject.
        /// </summary>
        [Input("subjectName")]
        public Input<string>? SubjectName { get; set; }

        public DatabaseKafkaSchemaRegistryState()
        {
        }
        public static new DatabaseKafkaSchemaRegistryState Empty => new DatabaseKafkaSchemaRegistryState();
    }
}
