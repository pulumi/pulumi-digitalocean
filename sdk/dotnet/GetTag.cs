// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetTag
    {
        /// <summary>
        /// Get information on a tag. This data source provides the name as configured on
        /// your DigitalOcean account. This is useful if the tag name in question is not
        /// managed by the provider or you need validate if the tag exists in the account.
        /// 
        /// An error is triggered if the provided tag name does not exist.
        /// </summary>
        public static Task<GetTagResult> InvokeAsync(GetTagArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTagResult>("digitalocean:index/getTag:getTag", args ?? new GetTagArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a tag. This data source provides the name as configured on
        /// your DigitalOcean account. This is useful if the tag name in question is not
        /// managed by the provider or you need validate if the tag exists in the account.
        /// 
        /// An error is triggered if the provided tag name does not exist.
        /// </summary>
        public static Output<GetTagResult> Invoke(GetTagInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTagResult>("digitalocean:index/getTag:getTag", args ?? new GetTagInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTagArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetTagArgs()
        {
        }
        public static new GetTagArgs Empty => new GetTagArgs();
    }

    public sealed class GetTagInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the tag.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetTagInvokeArgs()
        {
        }
        public static new GetTagInvokeArgs Empty => new GetTagInvokeArgs();
    }


    [OutputType]
    public sealed class GetTagResult
    {
        /// <summary>
        /// A count of the database clusters that the tag is applied to.
        /// </summary>
        public readonly int DatabasesCount;
        /// <summary>
        /// A count of the Droplets the tag is applied to.
        /// </summary>
        public readonly int DropletsCount;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A count of the images that the tag is applied to.
        /// </summary>
        public readonly int ImagesCount;
        public readonly string Name;
        /// <summary>
        /// A count of the total number of resources that the tag is applied to.
        /// </summary>
        public readonly int TotalResourceCount;
        /// <summary>
        /// A count of the volume snapshots that the tag is applied to.
        /// </summary>
        public readonly int VolumeSnapshotsCount;
        /// <summary>
        /// A count of the volumes that the tag is applied to.
        /// </summary>
        public readonly int VolumesCount;

        [OutputConstructor]
        private GetTagResult(
            int databasesCount,

            int dropletsCount,

            string id,

            int imagesCount,

            string name,

            int totalResourceCount,

            int volumeSnapshotsCount,

            int volumesCount)
        {
            DatabasesCount = databasesCount;
            DropletsCount = dropletsCount;
            Id = id;
            ImagesCount = imagesCount;
            Name = name;
            TotalResourceCount = totalResourceCount;
            VolumeSnapshotsCount = volumeSnapshotsCount;
            VolumesCount = volumesCount;
        }
    }
}
