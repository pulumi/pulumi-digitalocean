// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to start an online migration
    /// for a DigitalOcean managed database cluster. Migrating a cluster establishes a
    /// connection with an existing cluster and replicates its contents to the target
    /// cluster. If the existing database is continuously being written to, the migration
    /// process will continue for up to two weeks unless it is manually stopped.
    /// Online migration is only available for MySQL, PostgreSQL, Caching, and Valkey clusters.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var source = new DigitalOcean.DatabaseCluster("source", new()
    ///     {
    ///         Name = "st01",
    ///         Engine = "mysql",
    ///         Version = "8",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU1GB,
    ///         Region = DigitalOcean.Region.NYC1,
    ///         NodeCount = 1,
    ///         Tags = new[]
    ///         {
    ///             "production",
    ///         },
    ///     });
    /// 
    ///     var destination = new DigitalOcean.DatabaseCluster("destination", new()
    ///     {
    ///         Name = "dt01",
    ///         Engine = "mysql",
    ///         Version = "8",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU1GB,
    ///         Region = DigitalOcean.Region.NYC1,
    ///         NodeCount = 1,
    ///         Tags = new[]
    ///         {
    ///             "production",
    ///         },
    ///     });
    /// 
    ///     var sourceDb = new DigitalOcean.DatabaseDb("source_db", new()
    ///     {
    ///         ClusterId = source.Id,
    ///         Name = "terraform-db-om-source",
    ///     });
    /// 
    ///     var foobar = new DigitalOcean.DatabaseOnlineMigration("foobar", new()
    ///     {
    ///         ClusterId = destination.Id,
    ///         Source = new DigitalOcean.Inputs.DatabaseOnlineMigrationSourceArgs
    ///         {
    ///             Host = source.Host,
    ///             DbName = sourceDb.Name,
    ///             Port = source.Port,
    ///             Username = source.User,
    ///             Password = source.Password,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             destination,
    ///             source,
    ///             sourceDb,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A MySQL database cluster's online_migration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration example 4b62829a-9c42-465b-aaa3-84051048e712
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration")]
    public partial class DatabaseOnlineMigration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the target MySQL cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The date and time when the online migration was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// When set to true, enables SSL encryption when connecting to the source database.
        /// </summary>
        [Output("disableSsl")]
        public Output<bool?> DisableSsl { get; private set; } = null!;

        /// <summary>
        /// A list of databases that should be ignored during migration.
        /// </summary>
        [Output("ignoreDbs")]
        public Output<ImmutableArray<string>> IgnoreDbs { get; private set; } = null!;

        /// <summary>
        /// Configuration for migration
        /// </summary>
        [Output("source")]
        public Output<Outputs.DatabaseOnlineMigrationSource> Source { get; private set; } = null!;

        /// <summary>
        /// The status of the online migration
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseOnlineMigration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseOnlineMigration(string name, DatabaseOnlineMigrationArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration", name, args ?? new DatabaseOnlineMigrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseOnlineMigration(string name, Input<string> id, DatabaseOnlineMigrationState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseOnlineMigration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseOnlineMigration Get(string name, Input<string> id, DatabaseOnlineMigrationState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseOnlineMigration(name, id, state, options);
        }
    }

    public sealed class DatabaseOnlineMigrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target MySQL cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// When set to true, enables SSL encryption when connecting to the source database.
        /// </summary>
        [Input("disableSsl")]
        public Input<bool>? DisableSsl { get; set; }

        [Input("ignoreDbs")]
        private InputList<string>? _ignoreDbs;

        /// <summary>
        /// A list of databases that should be ignored during migration.
        /// </summary>
        public InputList<string> IgnoreDbs
        {
            get => _ignoreDbs ?? (_ignoreDbs = new InputList<string>());
            set => _ignoreDbs = value;
        }

        /// <summary>
        /// Configuration for migration
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.DatabaseOnlineMigrationSourceArgs> Source { get; set; } = null!;

        public DatabaseOnlineMigrationArgs()
        {
        }
        public static new DatabaseOnlineMigrationArgs Empty => new DatabaseOnlineMigrationArgs();
    }

    public sealed class DatabaseOnlineMigrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target MySQL cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The date and time when the online migration was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// When set to true, enables SSL encryption when connecting to the source database.
        /// </summary>
        [Input("disableSsl")]
        public Input<bool>? DisableSsl { get; set; }

        [Input("ignoreDbs")]
        private InputList<string>? _ignoreDbs;

        /// <summary>
        /// A list of databases that should be ignored during migration.
        /// </summary>
        public InputList<string> IgnoreDbs
        {
            get => _ignoreDbs ?? (_ignoreDbs = new InputList<string>());
            set => _ignoreDbs = value;
        }

        /// <summary>
        /// Configuration for migration
        /// </summary>
        [Input("source")]
        public Input<Inputs.DatabaseOnlineMigrationSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// The status of the online migration
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DatabaseOnlineMigrationState()
        {
        }
        public static new DatabaseOnlineMigrationState Empty => new DatabaseOnlineMigrationState();
    }
}
