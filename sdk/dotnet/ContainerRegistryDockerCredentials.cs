// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Get Docker credentials for your DigitalOcean container registry.
    /// 
    /// An error is triggered if the provided container registry name does not exist.
    /// 
    /// ## Example Usage
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials")]
    public partial class ContainerRegistryDockerCredentials : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and time the registry access token will expire.
        /// </summary>
        [Output("credentialExpirationTime")]
        public Output<string> CredentialExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Credentials for the container registry.
        /// </summary>
        [Output("dockerCredentials")]
        public Output<string> DockerCredentials { get; private set; } = null!;

        /// <summary>
        /// The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
        /// </summary>
        [Output("expirySeconds")]
        public Output<int?> ExpirySeconds { get; private set; } = null!;

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Output("registryName")]
        public Output<string> RegistryName { get; private set; } = null!;

        /// <summary>
        /// Allow for write access to the container registry. Defaults to false.
        /// </summary>
        [Output("write")]
        public Output<bool?> Write { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerRegistryDockerCredentials resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerRegistryDockerCredentials(string name, ContainerRegistryDockerCredentialsArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials", name, args ?? new ContainerRegistryDockerCredentialsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerRegistryDockerCredentials(string name, Input<string> id, ContainerRegistryDockerCredentialsState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "dockerCredentials",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerRegistryDockerCredentials resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerRegistryDockerCredentials Get(string name, Input<string> id, ContainerRegistryDockerCredentialsState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerRegistryDockerCredentials(name, id, state, options);
        }
    }

    public sealed class ContainerRegistryDockerCredentialsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
        /// </summary>
        [Input("expirySeconds")]
        public Input<int>? ExpirySeconds { get; set; }

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName", required: true)]
        public Input<string> RegistryName { get; set; } = null!;

        /// <summary>
        /// Allow for write access to the container registry. Defaults to false.
        /// </summary>
        [Input("write")]
        public Input<bool>? Write { get; set; }

        public ContainerRegistryDockerCredentialsArgs()
        {
        }
        public static new ContainerRegistryDockerCredentialsArgs Empty => new ContainerRegistryDockerCredentialsArgs();
    }

    public sealed class ContainerRegistryDockerCredentialsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and time the registry access token will expire.
        /// </summary>
        [Input("credentialExpirationTime")]
        public Input<string>? CredentialExpirationTime { get; set; }

        [Input("dockerCredentials")]
        private Input<string>? _dockerCredentials;

        /// <summary>
        /// Credentials for the container registry.
        /// </summary>
        public Input<string>? DockerCredentials
        {
            get => _dockerCredentials;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dockerCredentials = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
        /// </summary>
        [Input("expirySeconds")]
        public Input<int>? ExpirySeconds { get; set; }

        /// <summary>
        /// The name of the container registry.
        /// </summary>
        [Input("registryName")]
        public Input<string>? RegistryName { get; set; }

        /// <summary>
        /// Allow for write access to the container registry. Defaults to false.
        /// </summary>
        [Input("write")]
        public Input<bool>? Write { get; set; }

        public ContainerRegistryDockerCredentialsState()
        {
        }
        public static new ContainerRegistryDockerCredentialsState Empty => new ContainerRegistryDockerCredentialsState();
    }
}
