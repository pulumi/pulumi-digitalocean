// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetDatabaseCa
    {
        /// <summary>
        /// Provides the CA certificate for a DigitalOcean database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ca = Output.Create(DigitalOcean.GetDatabaseCa.InvokeAsync(new DigitalOcean.GetDatabaseCaArgs
        ///         {
        ///             ClusterId = "aaa-bbb-ccc-ddd",
        ///         }));
        ///         this.CaOutput = ca.Apply(ca =&gt; ca.Certificate);
        ///     }
        /// 
        ///     [Output("caOutput")]
        ///     public Output&lt;string&gt; CaOutput { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseCaResult> InvokeAsync(GetDatabaseCaArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseCaResult>("digitalocean:index/getDatabaseCa:getDatabaseCa", args ?? new GetDatabaseCaArgs(), options.WithDefaults());

        /// <summary>
        /// Provides the CA certificate for a DigitalOcean database.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ca = Output.Create(DigitalOcean.GetDatabaseCa.InvokeAsync(new DigitalOcean.GetDatabaseCaArgs
        ///         {
        ///             ClusterId = "aaa-bbb-ccc-ddd",
        ///         }));
        ///         this.CaOutput = ca.Apply(ca =&gt; ca.Certificate);
        ///     }
        /// 
        ///     [Output("caOutput")]
        ///     public Output&lt;string&gt; CaOutput { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDatabaseCaResult> Invoke(GetDatabaseCaInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDatabaseCaResult>("digitalocean:index/getDatabaseCa:getDatabaseCa", args ?? new GetDatabaseCaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDatabaseCaArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the source database cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetDatabaseCaArgs()
        {
        }
    }

    public sealed class GetDatabaseCaInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the source database cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetDatabaseCaInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatabaseCaResult
    {
        /// <summary>
        /// The CA certificate used to secure database connections decoded to a string.
        /// </summary>
        public readonly string Certificate;
        public readonly string ClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDatabaseCaResult(
            string certificate,

            string clusterId,

            string id)
        {
            Certificate = certificate;
            ClusterId = clusterId;
            Id = id;
        }
    }
}
