// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var assets = new DigitalOcean.SpacesBucket("assets", new()
    ///     {
    ///         Name = "assets",
    ///         Region = DigitalOcean.Region.NYC3,
    ///     });
    /// 
    ///     var logs = new DigitalOcean.SpacesBucket("logs", new()
    ///     {
    ///         Name = "logs",
    ///         Region = DigitalOcean.Region.NYC3,
    ///     });
    /// 
    ///     var example = new DigitalOcean.SpacesBucketLogging("example", new()
    ///     {
    ///         Region = "%s",
    ///         Bucket = assets.Id,
    ///         TargetBucket = logs.Id,
    ///         TargetPrefix = "access-logs/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Spaces bucket logging can be imported using the `region` and `bucket` attributes (delimited by a comma):
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/spacesBucketLogging:SpacesBucketLogging example `region`,`bucket`
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/spacesBucketLogging:SpacesBucketLogging")]
    public partial class SpacesBucketLogging : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the bucket which will be logged.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The region where the bucket resides.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The name of the bucket which will store the logs.
        /// </summary>
        [Output("targetBucket")]
        public Output<string> TargetBucket { get; private set; } = null!;

        /// <summary>
        /// The prefix for the log files.
        /// </summary>
        [Output("targetPrefix")]
        public Output<string> TargetPrefix { get; private set; } = null!;


        /// <summary>
        /// Create a SpacesBucketLogging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpacesBucketLogging(string name, SpacesBucketLoggingArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/spacesBucketLogging:SpacesBucketLogging", name, args ?? new SpacesBucketLoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SpacesBucketLogging(string name, Input<string> id, SpacesBucketLoggingState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/spacesBucketLogging:SpacesBucketLogging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpacesBucketLogging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpacesBucketLogging Get(string name, Input<string> id, SpacesBucketLoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new SpacesBucketLogging(name, id, state, options);
        }
    }

    public sealed class SpacesBucketLoggingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket which will be logged.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The region where the bucket resides.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The name of the bucket which will store the logs.
        /// </summary>
        [Input("targetBucket", required: true)]
        public Input<string> TargetBucket { get; set; } = null!;

        /// <summary>
        /// The prefix for the log files.
        /// </summary>
        [Input("targetPrefix", required: true)]
        public Input<string> TargetPrefix { get; set; } = null!;

        public SpacesBucketLoggingArgs()
        {
        }
        public static new SpacesBucketLoggingArgs Empty => new SpacesBucketLoggingArgs();
    }

    public sealed class SpacesBucketLoggingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket which will be logged.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The region where the bucket resides.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The name of the bucket which will store the logs.
        /// </summary>
        [Input("targetBucket")]
        public Input<string>? TargetBucket { get; set; }

        /// <summary>
        /// The prefix for the log files.
        /// </summary>
        [Input("targetPrefix")]
        public Input<string>? TargetPrefix { get; set; }

        public SpacesBucketLoggingState()
        {
        }
        public static new SpacesBucketLoggingState Empty => new SpacesBucketLoggingState();
    }
}
