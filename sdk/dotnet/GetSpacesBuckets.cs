// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetSpacesBuckets
    {
        /// <summary>
        /// Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
        /// If no filters are specified, all Spaces buckets will be returned.
        /// 
        /// Note: You can use the `digitalocean.SpacesBucket` data source to
        /// obtain metadata about a single bucket if you already know its `name` and `region`.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Use the `filter` block with a `key` string and `values` list to filter buckets.
        /// 
        /// Get all buckets in a region:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var nyc3 = Output.Create(DigitalOcean.GetSpacesBuckets.InvokeAsync(new DigitalOcean.GetSpacesBucketsArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new DigitalOcean.Inputs.GetSpacesBucketsFilterArgs
        ///                 {
        ///                     Key = "region",
        ///                     Values = 
        ///                     {
        ///                         "nyc3",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// You can sort the results as well:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var nyc3 = Output.Create(DigitalOcean.GetSpacesBuckets.InvokeAsync(new DigitalOcean.GetSpacesBucketsArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new DigitalOcean.Inputs.GetSpacesBucketsFilterArgs
        ///                 {
        ///                     Key = "region",
        ///                     Values = 
        ///                     {
        ///                         "nyc3",
        ///                     },
        ///                 },
        ///             },
        ///             Sorts = 
        ///             {
        ///                 new DigitalOcean.Inputs.GetSpacesBucketsSortArgs
        ///                 {
        ///                     Direction = "desc",
        ///                     Key = "name",
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSpacesBucketsResult> InvokeAsync(GetSpacesBucketsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSpacesBucketsResult>("digitalocean:index/getSpacesBuckets:getSpacesBuckets", args ?? new GetSpacesBucketsArgs(), options.WithVersion());
    }


    public sealed class GetSpacesBucketsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSpacesBucketsFilterArgs>? _filters;

        /// <summary>
        /// Filter the results.
        /// The `filter` block is documented below.
        /// </summary>
        public List<Inputs.GetSpacesBucketsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSpacesBucketsFilterArgs>());
            set => _filters = value;
        }

        [Input("sorts")]
        private List<Inputs.GetSpacesBucketsSortArgs>? _sorts;

        /// <summary>
        /// Sort the results.
        /// The `sort` block is documented below.
        /// </summary>
        public List<Inputs.GetSpacesBucketsSortArgs> Sorts
        {
            get => _sorts ?? (_sorts = new List<Inputs.GetSpacesBucketsSortArgs>());
            set => _sorts = value;
        }

        public GetSpacesBucketsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSpacesBucketsResult
    {
        /// <summary>
        /// A list of Spaces buckets satisfying any `filter` and `sort` criteria. Each bucket has the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSpacesBucketsBucketResult> Buckets;
        public readonly ImmutableArray<Outputs.GetSpacesBucketsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetSpacesBucketsSortResult> Sorts;

        [OutputConstructor]
        private GetSpacesBucketsResult(
            ImmutableArray<Outputs.GetSpacesBucketsBucketResult> buckets,

            ImmutableArray<Outputs.GetSpacesBucketsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetSpacesBucketsSortResult> sorts)
        {
            Buckets = buckets;
            Filters = filters;
            Id = id;
            Sorts = sorts;
        }
    }
}
