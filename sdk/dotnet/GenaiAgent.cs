// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    [DigitalOceanResourceType("digitalocean:index/genaiAgent:GenaiAgent")]
    public partial class GenaiAgent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AgentGuardrail represents a Guardrail attached to Gen AI Agent
        /// </summary>
        [Output("agentGuardrails")]
        public Output<ImmutableArray<Outputs.GenaiAgentAgentGuardrail>> AgentGuardrails { get; private set; } = null!;

        /// <summary>
        /// Anthropic API Key information
        /// </summary>
        [Output("anthropicApiKeys")]
        public Output<ImmutableArray<Outputs.GenaiAgentAnthropicApiKey>> AnthropicApiKeys { get; private set; } = null!;

        /// <summary>
        /// Optional Anthropic API key ID to use with Anthropic models
        /// </summary>
        [Output("anthropicKeyUuid")]
        public Output<string?> AnthropicKeyUuid { get; private set; } = null!;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        [Output("apiKeyInfos")]
        public Output<ImmutableArray<Outputs.GenaiAgentApiKeyInfo>> ApiKeyInfos { get; private set; } = null!;

        /// <summary>
        /// List of API Keys
        /// </summary>
        [Output("apiKeys")]
        public Output<ImmutableArray<Outputs.GenaiAgentApiKey>> ApiKeys { get; private set; } = null!;

        /// <summary>
        /// List of Chatbot Identifiers
        /// </summary>
        [Output("chatbotIdentifiers")]
        public Output<ImmutableArray<Outputs.GenaiAgentChatbotIdentifier>> ChatbotIdentifiers { get; private set; } = null!;

        /// <summary>
        /// ChatBot configuration
        /// </summary>
        [Output("chatbots")]
        public Output<ImmutableArray<Outputs.GenaiAgentChatbot>> Chatbots { get; private set; } = null!;

        /// <summary>
        /// List of child agents
        /// </summary>
        [Output("childAgents")]
        public Output<ImmutableArray<Outputs.GenaiAgentChildAgent>> ChildAgents { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the Agent was created
        /// </summary>
        [Output("createdAt")]
        public Output<string?> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        [Output("deployments")]
        public Output<ImmutableArray<Outputs.GenaiAgentDeployment>> Deployments { get; private set; } = null!;

        /// <summary>
        /// Description for the Agent
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of Functions
        /// </summary>
        [Output("functions")]
        public Output<ImmutableArray<Outputs.GenaiAgentFunction>> Functions { get; private set; } = null!;

        /// <summary>
        /// If case condition
        /// </summary>
        [Output("ifCase")]
        public Output<string?> IfCase { get; private set; } = null!;

        /// <summary>
        /// Instruction for the Agent
        /// </summary>
        [Output("instruction")]
        public Output<string> Instruction { get; private set; } = null!;

        /// <summary>
        /// K value
        /// </summary>
        [Output("k")]
        public Output<int?> K { get; private set; } = null!;

        /// <summary>
        /// Ids of the knowledge base(s) to attach to the agent
        /// </summary>
        [Output("knowledgeBaseUuids")]
        public Output<ImmutableArray<string>> KnowledgeBaseUuids { get; private set; } = null!;

        /// <summary>
        /// List of Knowledge Bases
        /// </summary>
        [Output("knowledgeBases")]
        public Output<ImmutableArray<Outputs.GenaiAgentKnowledgeBase>> KnowledgeBases { get; private set; } = null!;

        /// <summary>
        /// Maximum tokens allowed
        /// </summary>
        [Output("maxTokens")]
        public Output<int?> MaxTokens { get; private set; } = null!;

        /// <summary>
        /// Model UUID of the Agent
        /// </summary>
        [Output("modelUuid")]
        public Output<string> ModelUuid { get; private set; } = null!;

        /// <summary>
        /// Model of the Agent
        /// </summary>
        [Output("models")]
        public Output<ImmutableArray<Outputs.GenaiAgentModel>> Models { get; private set; } = null!;

        /// <summary>
        /// Name of the Agent
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// OpenAI API Key information
        /// </summary>
        [Output("openAiApiKeys")]
        public Output<ImmutableArray<Outputs.GenaiAgentOpenAiApiKey>> OpenAiApiKeys { get; private set; } = null!;

        /// <summary>
        /// Optional OpenAI API key ID to use with OpenAI models
        /// </summary>
        [Output("openAiKeyUuid")]
        public Output<string?> OpenAiKeyUuid { get; private set; } = null!;

        /// <summary>
        /// List of child agents
        /// </summary>
        [Output("parentAgents")]
        public Output<ImmutableArray<Outputs.GenaiAgentParentAgent>> ParentAgents { get; private set; } = null!;

        /// <summary>
        /// Project ID of the Agent
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Indicates if the agent should provide citations in responses
        /// </summary>
        [Output("provideCitations")]
        public Output<bool?> ProvideCitations { get; private set; } = null!;

        /// <summary>
        /// Region where the Agent is deployed
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Retrieval method used
        /// </summary>
        [Output("retrievalMethod")]
        public Output<string?> RetrievalMethod { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the route was created
        /// </summary>
        [Output("routeCreatedAt")]
        public Output<string> RouteCreatedAt { get; private set; } = null!;

        /// <summary>
        /// User who created the route
        /// </summary>
        [Output("routeCreatedBy")]
        public Output<string?> RouteCreatedBy { get; private set; } = null!;

        /// <summary>
        /// Route name
        /// </summary>
        [Output("routeName")]
        public Output<string?> RouteName { get; private set; } = null!;

        /// <summary>
        /// Route UUID
        /// </summary>
        [Output("routeUuid")]
        public Output<string?> RouteUuid { get; private set; } = null!;

        /// <summary>
        /// List of Tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Agent temperature setting
        /// </summary>
        [Output("temperature")]
        public Output<double?> Temperature { get; private set; } = null!;

        /// <summary>
        /// Agent Template
        /// </summary>
        [Output("templates")]
        public Output<ImmutableArray<Outputs.GenaiAgentTemplate>> Templates { get; private set; } = null!;

        /// <summary>
        /// Top P sampling parameter
        /// </summary>
        [Output("topP")]
        public Output<double?> TopP { get; private set; } = null!;

        /// <summary>
        /// Timestamp when the Agent was updated
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// URL for the Agent
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        /// <summary>
        /// User ID linked with the Agent
        /// </summary>
        [Output("userId")]
        public Output<string?> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a GenaiAgent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GenaiAgent(string name, GenaiAgentArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/genaiAgent:GenaiAgent", name, args ?? new GenaiAgentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GenaiAgent(string name, Input<string> id, GenaiAgentState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/genaiAgent:GenaiAgent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GenaiAgent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GenaiAgent Get(string name, Input<string> id, GenaiAgentState? state = null, CustomResourceOptions? options = null)
        {
            return new GenaiAgent(name, id, state, options);
        }
    }

    public sealed class GenaiAgentArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentGuardrails")]
        private InputList<Inputs.GenaiAgentAgentGuardrailArgs>? _agentGuardrails;

        /// <summary>
        /// AgentGuardrail represents a Guardrail attached to Gen AI Agent
        /// </summary>
        public InputList<Inputs.GenaiAgentAgentGuardrailArgs> AgentGuardrails
        {
            get => _agentGuardrails ?? (_agentGuardrails = new InputList<Inputs.GenaiAgentAgentGuardrailArgs>());
            set => _agentGuardrails = value;
        }

        [Input("anthropicApiKeys")]
        private InputList<Inputs.GenaiAgentAnthropicApiKeyArgs>? _anthropicApiKeys;

        /// <summary>
        /// Anthropic API Key information
        /// </summary>
        public InputList<Inputs.GenaiAgentAnthropicApiKeyArgs> AnthropicApiKeys
        {
            get => _anthropicApiKeys ?? (_anthropicApiKeys = new InputList<Inputs.GenaiAgentAnthropicApiKeyArgs>());
            set => _anthropicApiKeys = value;
        }

        /// <summary>
        /// Optional Anthropic API key ID to use with Anthropic models
        /// </summary>
        [Input("anthropicKeyUuid")]
        public Input<string>? AnthropicKeyUuid { get; set; }

        [Input("apiKeyInfos")]
        private InputList<Inputs.GenaiAgentApiKeyInfoArgs>? _apiKeyInfos;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public InputList<Inputs.GenaiAgentApiKeyInfoArgs> ApiKeyInfos
        {
            get => _apiKeyInfos ?? (_apiKeyInfos = new InputList<Inputs.GenaiAgentApiKeyInfoArgs>());
            set => _apiKeyInfos = value;
        }

        [Input("apiKeys")]
        private InputList<Inputs.GenaiAgentApiKeyArgs>? _apiKeys;

        /// <summary>
        /// List of API Keys
        /// </summary>
        public InputList<Inputs.GenaiAgentApiKeyArgs> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new InputList<Inputs.GenaiAgentApiKeyArgs>());
            set => _apiKeys = value;
        }

        [Input("chatbotIdentifiers")]
        private InputList<Inputs.GenaiAgentChatbotIdentifierArgs>? _chatbotIdentifiers;

        /// <summary>
        /// List of Chatbot Identifiers
        /// </summary>
        public InputList<Inputs.GenaiAgentChatbotIdentifierArgs> ChatbotIdentifiers
        {
            get => _chatbotIdentifiers ?? (_chatbotIdentifiers = new InputList<Inputs.GenaiAgentChatbotIdentifierArgs>());
            set => _chatbotIdentifiers = value;
        }

        [Input("chatbots")]
        private InputList<Inputs.GenaiAgentChatbotArgs>? _chatbots;

        /// <summary>
        /// ChatBot configuration
        /// </summary>
        public InputList<Inputs.GenaiAgentChatbotArgs> Chatbots
        {
            get => _chatbots ?? (_chatbots = new InputList<Inputs.GenaiAgentChatbotArgs>());
            set => _chatbots = value;
        }

        [Input("childAgents")]
        private InputList<Inputs.GenaiAgentChildAgentArgs>? _childAgents;

        /// <summary>
        /// List of child agents
        /// </summary>
        public InputList<Inputs.GenaiAgentChildAgentArgs> ChildAgents
        {
            get => _childAgents ?? (_childAgents = new InputList<Inputs.GenaiAgentChildAgentArgs>());
            set => _childAgents = value;
        }

        /// <summary>
        /// Timestamp when the Agent was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("deployments")]
        private InputList<Inputs.GenaiAgentDeploymentArgs>? _deployments;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public InputList<Inputs.GenaiAgentDeploymentArgs> Deployments
        {
            get => _deployments ?? (_deployments = new InputList<Inputs.GenaiAgentDeploymentArgs>());
            set => _deployments = value;
        }

        /// <summary>
        /// Description for the Agent
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("functions")]
        private InputList<Inputs.GenaiAgentFunctionArgs>? _functions;

        /// <summary>
        /// List of Functions
        /// </summary>
        public InputList<Inputs.GenaiAgentFunctionArgs> Functions
        {
            get => _functions ?? (_functions = new InputList<Inputs.GenaiAgentFunctionArgs>());
            set => _functions = value;
        }

        /// <summary>
        /// If case condition
        /// </summary>
        [Input("ifCase")]
        public Input<string>? IfCase { get; set; }

        /// <summary>
        /// Instruction for the Agent
        /// </summary>
        [Input("instruction", required: true)]
        public Input<string> Instruction { get; set; } = null!;

        /// <summary>
        /// K value
        /// </summary>
        [Input("k")]
        public Input<int>? K { get; set; }

        [Input("knowledgeBaseUuids")]
        private InputList<string>? _knowledgeBaseUuids;

        /// <summary>
        /// Ids of the knowledge base(s) to attach to the agent
        /// </summary>
        public InputList<string> KnowledgeBaseUuids
        {
            get => _knowledgeBaseUuids ?? (_knowledgeBaseUuids = new InputList<string>());
            set => _knowledgeBaseUuids = value;
        }

        [Input("knowledgeBases")]
        private InputList<Inputs.GenaiAgentKnowledgeBaseArgs>? _knowledgeBases;

        /// <summary>
        /// List of Knowledge Bases
        /// </summary>
        public InputList<Inputs.GenaiAgentKnowledgeBaseArgs> KnowledgeBases
        {
            get => _knowledgeBases ?? (_knowledgeBases = new InputList<Inputs.GenaiAgentKnowledgeBaseArgs>());
            set => _knowledgeBases = value;
        }

        /// <summary>
        /// Maximum tokens allowed
        /// </summary>
        [Input("maxTokens")]
        public Input<int>? MaxTokens { get; set; }

        /// <summary>
        /// Model UUID of the Agent
        /// </summary>
        [Input("modelUuid", required: true)]
        public Input<string> ModelUuid { get; set; } = null!;

        [Input("models")]
        private InputList<Inputs.GenaiAgentModelArgs>? _models;

        /// <summary>
        /// Model of the Agent
        /// </summary>
        public InputList<Inputs.GenaiAgentModelArgs> Models
        {
            get => _models ?? (_models = new InputList<Inputs.GenaiAgentModelArgs>());
            set => _models = value;
        }

        /// <summary>
        /// Name of the Agent
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("openAiApiKeys")]
        private InputList<Inputs.GenaiAgentOpenAiApiKeyArgs>? _openAiApiKeys;

        /// <summary>
        /// OpenAI API Key information
        /// </summary>
        public InputList<Inputs.GenaiAgentOpenAiApiKeyArgs> OpenAiApiKeys
        {
            get => _openAiApiKeys ?? (_openAiApiKeys = new InputList<Inputs.GenaiAgentOpenAiApiKeyArgs>());
            set => _openAiApiKeys = value;
        }

        /// <summary>
        /// Optional OpenAI API key ID to use with OpenAI models
        /// </summary>
        [Input("openAiKeyUuid")]
        public Input<string>? OpenAiKeyUuid { get; set; }

        [Input("parentAgents")]
        private InputList<Inputs.GenaiAgentParentAgentArgs>? _parentAgents;

        /// <summary>
        /// List of child agents
        /// </summary>
        public InputList<Inputs.GenaiAgentParentAgentArgs> ParentAgents
        {
            get => _parentAgents ?? (_parentAgents = new InputList<Inputs.GenaiAgentParentAgentArgs>());
            set => _parentAgents = value;
        }

        /// <summary>
        /// Project ID of the Agent
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Indicates if the agent should provide citations in responses
        /// </summary>
        [Input("provideCitations")]
        public Input<bool>? ProvideCitations { get; set; }

        /// <summary>
        /// Region where the Agent is deployed
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Retrieval method used
        /// </summary>
        [Input("retrievalMethod")]
        public Input<string>? RetrievalMethod { get; set; }

        /// <summary>
        /// User who created the route
        /// </summary>
        [Input("routeCreatedBy")]
        public Input<string>? RouteCreatedBy { get; set; }

        /// <summary>
        /// Route name
        /// </summary>
        [Input("routeName")]
        public Input<string>? RouteName { get; set; }

        /// <summary>
        /// Route UUID
        /// </summary>
        [Input("routeUuid")]
        public Input<string>? RouteUuid { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of Tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Agent temperature setting
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        [Input("templates")]
        private InputList<Inputs.GenaiAgentTemplateArgs>? _templates;

        /// <summary>
        /// Agent Template
        /// </summary>
        public InputList<Inputs.GenaiAgentTemplateArgs> Templates
        {
            get => _templates ?? (_templates = new InputList<Inputs.GenaiAgentTemplateArgs>());
            set => _templates = value;
        }

        /// <summary>
        /// Top P sampling parameter
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        /// <summary>
        /// URL for the Agent
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// User ID linked with the Agent
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GenaiAgentArgs()
        {
        }
        public static new GenaiAgentArgs Empty => new GenaiAgentArgs();
    }

    public sealed class GenaiAgentState : global::Pulumi.ResourceArgs
    {
        [Input("agentGuardrails")]
        private InputList<Inputs.GenaiAgentAgentGuardrailGetArgs>? _agentGuardrails;

        /// <summary>
        /// AgentGuardrail represents a Guardrail attached to Gen AI Agent
        /// </summary>
        public InputList<Inputs.GenaiAgentAgentGuardrailGetArgs> AgentGuardrails
        {
            get => _agentGuardrails ?? (_agentGuardrails = new InputList<Inputs.GenaiAgentAgentGuardrailGetArgs>());
            set => _agentGuardrails = value;
        }

        [Input("anthropicApiKeys")]
        private InputList<Inputs.GenaiAgentAnthropicApiKeyGetArgs>? _anthropicApiKeys;

        /// <summary>
        /// Anthropic API Key information
        /// </summary>
        public InputList<Inputs.GenaiAgentAnthropicApiKeyGetArgs> AnthropicApiKeys
        {
            get => _anthropicApiKeys ?? (_anthropicApiKeys = new InputList<Inputs.GenaiAgentAnthropicApiKeyGetArgs>());
            set => _anthropicApiKeys = value;
        }

        /// <summary>
        /// Optional Anthropic API key ID to use with Anthropic models
        /// </summary>
        [Input("anthropicKeyUuid")]
        public Input<string>? AnthropicKeyUuid { get; set; }

        [Input("apiKeyInfos")]
        private InputList<Inputs.GenaiAgentApiKeyInfoGetArgs>? _apiKeyInfos;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public InputList<Inputs.GenaiAgentApiKeyInfoGetArgs> ApiKeyInfos
        {
            get => _apiKeyInfos ?? (_apiKeyInfos = new InputList<Inputs.GenaiAgentApiKeyInfoGetArgs>());
            set => _apiKeyInfos = value;
        }

        [Input("apiKeys")]
        private InputList<Inputs.GenaiAgentApiKeyGetArgs>? _apiKeys;

        /// <summary>
        /// List of API Keys
        /// </summary>
        public InputList<Inputs.GenaiAgentApiKeyGetArgs> ApiKeys
        {
            get => _apiKeys ?? (_apiKeys = new InputList<Inputs.GenaiAgentApiKeyGetArgs>());
            set => _apiKeys = value;
        }

        [Input("chatbotIdentifiers")]
        private InputList<Inputs.GenaiAgentChatbotIdentifierGetArgs>? _chatbotIdentifiers;

        /// <summary>
        /// List of Chatbot Identifiers
        /// </summary>
        public InputList<Inputs.GenaiAgentChatbotIdentifierGetArgs> ChatbotIdentifiers
        {
            get => _chatbotIdentifiers ?? (_chatbotIdentifiers = new InputList<Inputs.GenaiAgentChatbotIdentifierGetArgs>());
            set => _chatbotIdentifiers = value;
        }

        [Input("chatbots")]
        private InputList<Inputs.GenaiAgentChatbotGetArgs>? _chatbots;

        /// <summary>
        /// ChatBot configuration
        /// </summary>
        public InputList<Inputs.GenaiAgentChatbotGetArgs> Chatbots
        {
            get => _chatbots ?? (_chatbots = new InputList<Inputs.GenaiAgentChatbotGetArgs>());
            set => _chatbots = value;
        }

        [Input("childAgents")]
        private InputList<Inputs.GenaiAgentChildAgentGetArgs>? _childAgents;

        /// <summary>
        /// List of child agents
        /// </summary>
        public InputList<Inputs.GenaiAgentChildAgentGetArgs> ChildAgents
        {
            get => _childAgents ?? (_childAgents = new InputList<Inputs.GenaiAgentChildAgentGetArgs>());
            set => _childAgents = value;
        }

        /// <summary>
        /// Timestamp when the Agent was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("deployments")]
        private InputList<Inputs.GenaiAgentDeploymentGetArgs>? _deployments;

        /// <summary>
        /// List of API Key Infos
        /// </summary>
        public InputList<Inputs.GenaiAgentDeploymentGetArgs> Deployments
        {
            get => _deployments ?? (_deployments = new InputList<Inputs.GenaiAgentDeploymentGetArgs>());
            set => _deployments = value;
        }

        /// <summary>
        /// Description for the Agent
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("functions")]
        private InputList<Inputs.GenaiAgentFunctionGetArgs>? _functions;

        /// <summary>
        /// List of Functions
        /// </summary>
        public InputList<Inputs.GenaiAgentFunctionGetArgs> Functions
        {
            get => _functions ?? (_functions = new InputList<Inputs.GenaiAgentFunctionGetArgs>());
            set => _functions = value;
        }

        /// <summary>
        /// If case condition
        /// </summary>
        [Input("ifCase")]
        public Input<string>? IfCase { get; set; }

        /// <summary>
        /// Instruction for the Agent
        /// </summary>
        [Input("instruction")]
        public Input<string>? Instruction { get; set; }

        /// <summary>
        /// K value
        /// </summary>
        [Input("k")]
        public Input<int>? K { get; set; }

        [Input("knowledgeBaseUuids")]
        private InputList<string>? _knowledgeBaseUuids;

        /// <summary>
        /// Ids of the knowledge base(s) to attach to the agent
        /// </summary>
        public InputList<string> KnowledgeBaseUuids
        {
            get => _knowledgeBaseUuids ?? (_knowledgeBaseUuids = new InputList<string>());
            set => _knowledgeBaseUuids = value;
        }

        [Input("knowledgeBases")]
        private InputList<Inputs.GenaiAgentKnowledgeBaseGetArgs>? _knowledgeBases;

        /// <summary>
        /// List of Knowledge Bases
        /// </summary>
        public InputList<Inputs.GenaiAgentKnowledgeBaseGetArgs> KnowledgeBases
        {
            get => _knowledgeBases ?? (_knowledgeBases = new InputList<Inputs.GenaiAgentKnowledgeBaseGetArgs>());
            set => _knowledgeBases = value;
        }

        /// <summary>
        /// Maximum tokens allowed
        /// </summary>
        [Input("maxTokens")]
        public Input<int>? MaxTokens { get; set; }

        /// <summary>
        /// Model UUID of the Agent
        /// </summary>
        [Input("modelUuid")]
        public Input<string>? ModelUuid { get; set; }

        [Input("models")]
        private InputList<Inputs.GenaiAgentModelGetArgs>? _models;

        /// <summary>
        /// Model of the Agent
        /// </summary>
        public InputList<Inputs.GenaiAgentModelGetArgs> Models
        {
            get => _models ?? (_models = new InputList<Inputs.GenaiAgentModelGetArgs>());
            set => _models = value;
        }

        /// <summary>
        /// Name of the Agent
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("openAiApiKeys")]
        private InputList<Inputs.GenaiAgentOpenAiApiKeyGetArgs>? _openAiApiKeys;

        /// <summary>
        /// OpenAI API Key information
        /// </summary>
        public InputList<Inputs.GenaiAgentOpenAiApiKeyGetArgs> OpenAiApiKeys
        {
            get => _openAiApiKeys ?? (_openAiApiKeys = new InputList<Inputs.GenaiAgentOpenAiApiKeyGetArgs>());
            set => _openAiApiKeys = value;
        }

        /// <summary>
        /// Optional OpenAI API key ID to use with OpenAI models
        /// </summary>
        [Input("openAiKeyUuid")]
        public Input<string>? OpenAiKeyUuid { get; set; }

        [Input("parentAgents")]
        private InputList<Inputs.GenaiAgentParentAgentGetArgs>? _parentAgents;

        /// <summary>
        /// List of child agents
        /// </summary>
        public InputList<Inputs.GenaiAgentParentAgentGetArgs> ParentAgents
        {
            get => _parentAgents ?? (_parentAgents = new InputList<Inputs.GenaiAgentParentAgentGetArgs>());
            set => _parentAgents = value;
        }

        /// <summary>
        /// Project ID of the Agent
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Indicates if the agent should provide citations in responses
        /// </summary>
        [Input("provideCitations")]
        public Input<bool>? ProvideCitations { get; set; }

        /// <summary>
        /// Region where the Agent is deployed
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Retrieval method used
        /// </summary>
        [Input("retrievalMethod")]
        public Input<string>? RetrievalMethod { get; set; }

        /// <summary>
        /// Timestamp when the route was created
        /// </summary>
        [Input("routeCreatedAt")]
        public Input<string>? RouteCreatedAt { get; set; }

        /// <summary>
        /// User who created the route
        /// </summary>
        [Input("routeCreatedBy")]
        public Input<string>? RouteCreatedBy { get; set; }

        /// <summary>
        /// Route name
        /// </summary>
        [Input("routeName")]
        public Input<string>? RouteName { get; set; }

        /// <summary>
        /// Route UUID
        /// </summary>
        [Input("routeUuid")]
        public Input<string>? RouteUuid { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of Tags
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Agent temperature setting
        /// </summary>
        [Input("temperature")]
        public Input<double>? Temperature { get; set; }

        [Input("templates")]
        private InputList<Inputs.GenaiAgentTemplateGetArgs>? _templates;

        /// <summary>
        /// Agent Template
        /// </summary>
        public InputList<Inputs.GenaiAgentTemplateGetArgs> Templates
        {
            get => _templates ?? (_templates = new InputList<Inputs.GenaiAgentTemplateGetArgs>());
            set => _templates = value;
        }

        /// <summary>
        /// Top P sampling parameter
        /// </summary>
        [Input("topP")]
        public Input<double>? TopP { get; set; }

        /// <summary>
        /// Timestamp when the Agent was updated
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// URL for the Agent
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// User ID linked with the Agent
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GenaiAgentState()
        {
        }
        public static new GenaiAgentState Empty => new GenaiAgentState();
    }
}
