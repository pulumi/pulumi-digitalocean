// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to change advanced configuration
    /// options for a DigitalOcean managed MongoDB database cluster.
    /// 
    /// &gt; **Note** MongoDB configurations are only removed from state when destroyed. The remote configuration is not unset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabaseCluster = new DigitalOcean.DatabaseCluster("example", new()
    ///     {
    ///         Name = "example-mongodb-cluster",
    ///         Engine = "mongodb",
    ///         Version = "7",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU1GB,
    ///         Region = DigitalOcean.Region.NYC3,
    ///         NodeCount = 1,
    ///     });
    /// 
    ///     var example = new DigitalOcean.DatabaseMongodbConfig("example", new()
    ///     {
    ///         ClusterId = exampleDatabaseCluster.Id,
    ///         DefaultReadConcern = "majority",
    ///         DefaultWriteConcern = "majority",
    ///         TransactionLifetimeLimitSeconds = 100,
    ///         SlowOpThresholdMs = 100,
    ///         Verbosity = 3,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A MongoDB database cluster's configuration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig example 4b62829a-9c42-465b-aaa3-84051048e712
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig")]
    public partial class DatabaseMongodbConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the target MongoDB cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
        /// </summary>
        [Output("defaultReadConcern")]
        public Output<string> DefaultReadConcern { get; private set; } = null!;

        /// <summary>
        /// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
        /// </summary>
        [Output("defaultWriteConcern")]
        public Output<string> DefaultWriteConcern { get; private set; } = null!;

        /// <summary>
        /// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
        /// </summary>
        [Output("slowOpThresholdMs")]
        public Output<int> SlowOpThresholdMs { get; private set; } = null!;

        /// <summary>
        /// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
        /// </summary>
        [Output("transactionLifetimeLimitSeconds")]
        public Output<int> TransactionLifetimeLimitSeconds { get; private set; } = null!;

        /// <summary>
        /// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
        /// </summary>
        [Output("verbosity")]
        public Output<int> Verbosity { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseMongodbConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseMongodbConfig(string name, DatabaseMongodbConfigArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig", name, args ?? new DatabaseMongodbConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseMongodbConfig(string name, Input<string> id, DatabaseMongodbConfigState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseMongodbConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseMongodbConfig Get(string name, Input<string> id, DatabaseMongodbConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseMongodbConfig(name, id, state, options);
        }
    }

    public sealed class DatabaseMongodbConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target MongoDB cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
        /// </summary>
        [Input("defaultReadConcern")]
        public Input<string>? DefaultReadConcern { get; set; }

        /// <summary>
        /// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
        /// </summary>
        [Input("defaultWriteConcern")]
        public Input<string>? DefaultWriteConcern { get; set; }

        /// <summary>
        /// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
        /// </summary>
        [Input("slowOpThresholdMs")]
        public Input<int>? SlowOpThresholdMs { get; set; }

        /// <summary>
        /// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
        /// </summary>
        [Input("transactionLifetimeLimitSeconds")]
        public Input<int>? TransactionLifetimeLimitSeconds { get; set; }

        /// <summary>
        /// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
        /// </summary>
        [Input("verbosity")]
        public Input<int>? Verbosity { get; set; }

        public DatabaseMongodbConfigArgs()
        {
        }
        public static new DatabaseMongodbConfigArgs Empty => new DatabaseMongodbConfigArgs();
    }

    public sealed class DatabaseMongodbConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target MongoDB cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
        /// </summary>
        [Input("defaultReadConcern")]
        public Input<string>? DefaultReadConcern { get; set; }

        /// <summary>
        /// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
        /// </summary>
        [Input("defaultWriteConcern")]
        public Input<string>? DefaultWriteConcern { get; set; }

        /// <summary>
        /// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
        /// </summary>
        [Input("slowOpThresholdMs")]
        public Input<int>? SlowOpThresholdMs { get; set; }

        /// <summary>
        /// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
        /// </summary>
        [Input("transactionLifetimeLimitSeconds")]
        public Input<int>? TransactionLifetimeLimitSeconds { get; set; }

        /// <summary>
        /// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. &lt;em&gt;Changing this parameter will lead to a restart of the MongoDB service.&lt;/em&gt; Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
        /// </summary>
        [Input("verbosity")]
        public Input<int>? Verbosity { get; set; }

        public DatabaseMongodbConfigState()
        {
        }
        public static new DatabaseMongodbConfigState Empty => new DatabaseMongodbConfigState();
    }
}
