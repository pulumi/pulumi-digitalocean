// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    [DigitalOceanResourceType("digitalocean:index/genaiFunction:GenaiFunction")]
    public partial class GenaiFunction : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the GenAI resource.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// The region where the GenAI resource will be created.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The model to use for the GenAI resource.
        /// </summary>
        [Output("faasName")]
        public Output<string?> FaasName { get; private set; } = null!;

        /// <summary>
        /// The current status of the GenAI resource.
        /// </summary>
        [Output("faasNamespace")]
        public Output<string> FaasNamespace { get; private set; } = null!;

        /// <summary>
        /// The creation timestamp of the GenAI resource.
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the GenAI function.
        /// </summary>
        [Output("functionUuid")]
        public Output<string> FunctionUuid { get; private set; } = null!;

        /// <summary>
        /// The input schema of the GenAI resource.
        /// </summary>
        [Output("inputSchema")]
        public Output<string> InputSchema { get; private set; } = null!;

        /// <summary>
        /// The output schema of the GenAI resource.
        /// </summary>
        [Output("outputSchema")]
        public Output<string?> OutputSchema { get; private set; } = null!;


        /// <summary>
        /// Create a GenaiFunction resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GenaiFunction(string name, GenaiFunctionArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/genaiFunction:GenaiFunction", name, args ?? new GenaiFunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GenaiFunction(string name, Input<string> id, GenaiFunctionState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/genaiFunction:GenaiFunction", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GenaiFunction resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GenaiFunction Get(string name, Input<string> id, GenaiFunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new GenaiFunction(name, id, state, options);
        }
    }

    public sealed class GenaiFunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the GenAI resource.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// The region where the GenAI resource will be created.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The model to use for the GenAI resource.
        /// </summary>
        [Input("faasName")]
        public Input<string>? FaasName { get; set; }

        /// <summary>
        /// The current status of the GenAI resource.
        /// </summary>
        [Input("faasNamespace", required: true)]
        public Input<string> FaasNamespace { get; set; } = null!;

        /// <summary>
        /// The creation timestamp of the GenAI resource.
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// The input schema of the GenAI resource.
        /// </summary>
        [Input("inputSchema", required: true)]
        public Input<string> InputSchema { get; set; } = null!;

        /// <summary>
        /// The output schema of the GenAI resource.
        /// </summary>
        [Input("outputSchema")]
        public Input<string>? OutputSchema { get; set; }

        public GenaiFunctionArgs()
        {
        }
        public static new GenaiFunctionArgs Empty => new GenaiFunctionArgs();
    }

    public sealed class GenaiFunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the GenAI resource.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// The region where the GenAI resource will be created.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The model to use for the GenAI resource.
        /// </summary>
        [Input("faasName")]
        public Input<string>? FaasName { get; set; }

        /// <summary>
        /// The current status of the GenAI resource.
        /// </summary>
        [Input("faasNamespace")]
        public Input<string>? FaasNamespace { get; set; }

        /// <summary>
        /// The creation timestamp of the GenAI resource.
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        /// <summary>
        /// The unique identifier of the GenAI function.
        /// </summary>
        [Input("functionUuid")]
        public Input<string>? FunctionUuid { get; set; }

        /// <summary>
        /// The input schema of the GenAI resource.
        /// </summary>
        [Input("inputSchema")]
        public Input<string>? InputSchema { get; set; }

        /// <summary>
        /// The output schema of the GenAI resource.
        /// </summary>
        [Input("outputSchema")]
        public Input<string>? OutputSchema { get; set; }

        public GenaiFunctionState()
        {
        }
        public static new GenaiFunctionState Empty => new GenaiFunctionState();
    }
}
