// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    public static class GetFirewall
    {
        /// <summary>
        /// Get information on a DigitalOcean Firewall.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the firewall:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetFirewall.InvokeAsync(new DigitalOcean.GetFirewallArgs
        ///         {
        ///             FirewallId = "1df48973-6eef-4214-854f-fa7726e7e583",
        ///         }));
        ///         this.ExampleFirewallName = example.Apply(example =&gt; example.Name);
        ///     }
        /// 
        ///     [Output("exampleFirewallName")]
        ///     public Output&lt;string&gt; ExampleFirewallName { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFirewallResult> InvokeAsync(GetFirewallArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFirewallResult>("digitalocean:index/getFirewall:getFirewall", args ?? new GetFirewallArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a DigitalOcean Firewall.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Get the firewall:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using DigitalOcean = Pulumi.DigitalOcean;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(DigitalOcean.GetFirewall.InvokeAsync(new DigitalOcean.GetFirewallArgs
        ///         {
        ///             FirewallId = "1df48973-6eef-4214-854f-fa7726e7e583",
        ///         }));
        ///         this.ExampleFirewallName = example.Apply(example =&gt; example.Name);
        ///     }
        /// 
        ///     [Output("exampleFirewallName")]
        ///     public Output&lt;string&gt; ExampleFirewallName { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFirewallResult> Invoke(GetFirewallInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetFirewallResult>("digitalocean:index/getFirewall:getFirewall", args ?? new GetFirewallInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallArgs : Pulumi.InvokeArgs
    {
        [Input("dropletIds")]
        private List<int>? _dropletIds;

        /// <summary>
        /// The list of the IDs of the Droplets assigned to
        /// the Firewall.
        /// </summary>
        public List<int> DropletIds
        {
            get => _dropletIds ?? (_dropletIds = new List<int>());
            set => _dropletIds = value;
        }

        /// <summary>
        /// The ID of the firewall to retrieve information
        /// about.
        /// </summary>
        [Input("firewallId", required: true)]
        public string FirewallId { get; set; } = null!;

        [Input("inboundRules")]
        private List<Inputs.GetFirewallInboundRuleArgs>? _inboundRules;
        public List<Inputs.GetFirewallInboundRuleArgs> InboundRules
        {
            get => _inboundRules ?? (_inboundRules = new List<Inputs.GetFirewallInboundRuleArgs>());
            set => _inboundRules = value;
        }

        [Input("outboundRules")]
        private List<Inputs.GetFirewallOutboundRuleArgs>? _outboundRules;
        public List<Inputs.GetFirewallOutboundRuleArgs> OutboundRules
        {
            get => _outboundRules ?? (_outboundRules = new List<Inputs.GetFirewallOutboundRuleArgs>());
            set => _outboundRules = value;
        }

        [Input("tags")]
        private List<string>? _tags;

        /// <summary>
        /// The names of the Tags assigned to the Firewall.
        /// </summary>
        public List<string> Tags
        {
            get => _tags ?? (_tags = new List<string>());
            set => _tags = value;
        }

        public GetFirewallArgs()
        {
        }
    }

    public sealed class GetFirewallInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("dropletIds")]
        private InputList<int>? _dropletIds;

        /// <summary>
        /// The list of the IDs of the Droplets assigned to
        /// the Firewall.
        /// </summary>
        public InputList<int> DropletIds
        {
            get => _dropletIds ?? (_dropletIds = new InputList<int>());
            set => _dropletIds = value;
        }

        /// <summary>
        /// The ID of the firewall to retrieve information
        /// about.
        /// </summary>
        [Input("firewallId", required: true)]
        public Input<string> FirewallId { get; set; } = null!;

        [Input("inboundRules")]
        private InputList<Inputs.GetFirewallInboundRuleInputArgs>? _inboundRules;
        public InputList<Inputs.GetFirewallInboundRuleInputArgs> InboundRules
        {
            get => _inboundRules ?? (_inboundRules = new InputList<Inputs.GetFirewallInboundRuleInputArgs>());
            set => _inboundRules = value;
        }

        [Input("outboundRules")]
        private InputList<Inputs.GetFirewallOutboundRuleInputArgs>? _outboundRules;
        public InputList<Inputs.GetFirewallOutboundRuleInputArgs> OutboundRules
        {
            get => _outboundRules ?? (_outboundRules = new InputList<Inputs.GetFirewallOutboundRuleInputArgs>());
            set => _outboundRules = value;
        }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The names of the Tags assigned to the Firewall.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GetFirewallInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFirewallResult
    {
        /// <summary>
        /// A time value given in ISO8601 combined date and time format
        /// that represents when the Firewall was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The list of the IDs of the Droplets assigned to
        /// the Firewall.
        /// </summary>
        public readonly ImmutableArray<int> DropletIds;
        public readonly string FirewallId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetFirewallInboundRuleResult> InboundRules;
        /// <summary>
        /// The name of the Firewall.
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetFirewallOutboundRuleResult> OutboundRules;
        /// <summary>
        /// A set of object containing the fields, `droplet_id`,
        /// `removing`, and `status`.  It is provided to detail exactly which Droplets
        /// are having their security policies updated.  When empty, all changes
        /// have been successfully applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallPendingChangeResult> PendingChanges;
        /// <summary>
        /// A status string indicating the current state of the Firewall.
        /// This can be "waiting", "succeeded", or "failed".
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The names of the Tags assigned to the Firewall.
        /// </summary>
        public readonly ImmutableArray<string> Tags;

        [OutputConstructor]
        private GetFirewallResult(
            string createdAt,

            ImmutableArray<int> dropletIds,

            string firewallId,

            string id,

            ImmutableArray<Outputs.GetFirewallInboundRuleResult> inboundRules,

            string name,

            ImmutableArray<Outputs.GetFirewallOutboundRuleResult> outboundRules,

            ImmutableArray<Outputs.GetFirewallPendingChangeResult> pendingChanges,

            string status,

            ImmutableArray<string> tags)
        {
            CreatedAt = createdAt;
            DropletIds = dropletIds;
            FirewallId = firewallId;
            Id = id;
            InboundRules = inboundRules;
            Name = name;
            OutboundRules = outboundRules;
            PendingChanges = pendingChanges;
            Status = status;
            Tags = tags;
        }
    }
}
