// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to change advanced configuration
    /// options for a DigitalOcean managed PostgreSQL database cluster.
    /// 
    /// &gt; **Note** PostgreSQL configurations are only removed from state when destroyed. The remote configuration is not unset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabaseCluster = new DigitalOcean.DatabaseCluster("exampleDatabaseCluster", new()
    ///     {
    ///         Engine = "pg",
    ///         Version = "15",
    ///         Size = DigitalOcean.DatabaseSlug.DB_1VPCU1GB,
    ///         Region = DigitalOcean.Region.NYC1,
    ///         NodeCount = 1,
    ///     });
    /// 
    ///     var exampleDatabasePostgresqlConfig = new DigitalOcean.DatabasePostgresqlConfig("exampleDatabasePostgresqlConfig", new()
    ///     {
    ///         ClusterId = exampleDatabaseCluster.Id,
    ///         Timezone = "UTC",
    ///         WorkMem = 16,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A PostgreSQL database cluster's configuration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig example 52556c07-788e-4d41-b8a7-c796432197d1
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig")]
    public partial class DatabasePostgresqlConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
        /// </summary>
        [Output("autovacuumAnalyzeScaleFactor")]
        public Output<double> AutovacuumAnalyzeScaleFactor { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        /// </summary>
        [Output("autovacuumAnalyzeThreshold")]
        public Output<int> AutovacuumAnalyzeThreshold { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        /// </summary>
        [Output("autovacuumFreezeMaxAge")]
        public Output<int> AutovacuumFreezeMaxAge { get; private set; } = null!;

        /// <summary>
        /// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
        /// </summary>
        [Output("autovacuumMaxWorkers")]
        public Output<int> AutovacuumMaxWorkers { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
        /// </summary>
        [Output("autovacuumNaptime")]
        public Output<int> AutovacuumNaptime { get; private set; } = null!;

        /// <summary>
        /// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
        /// </summary>
        [Output("autovacuumVacuumCostDelay")]
        public Output<int> AutovacuumVacuumCostDelay { get; private set; } = null!;

        /// <summary>
        /// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
        /// </summary>
        [Output("autovacuumVacuumCostLimit")]
        public Output<int> AutovacuumVacuumCostLimit { get; private set; } = null!;

        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        /// </summary>
        [Output("autovacuumVacuumScaleFactor")]
        public Output<double> AutovacuumVacuumScaleFactor { get; private set; } = null!;

        /// <summary>
        /// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
        /// </summary>
        [Output("autovacuumVacuumThreshold")]
        public Output<int> AutovacuumVacuumThreshold { get; private set; } = null!;

        /// <summary>
        /// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
        /// </summary>
        [Output("backupHour")]
        public Output<int> BackupHour { get; private set; } = null!;

        /// <summary>
        /// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
        /// </summary>
        [Output("backupMinute")]
        public Output<int> BackupMinute { get; private set; } = null!;

        /// <summary>
        /// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
        /// </summary>
        [Output("bgwriterDelay")]
        public Output<int> BgwriterDelay { get; private set; } = null!;

        /// <summary>
        /// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
        /// </summary>
        [Output("bgwriterFlushAfter")]
        public Output<int> BgwriterFlushAfter { get; private set; } = null!;

        /// <summary>
        /// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
        /// </summary>
        [Output("bgwriterLruMaxpages")]
        public Output<int> BgwriterLruMaxpages { get; private set; } = null!;

        /// <summary>
        /// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
        /// </summary>
        [Output("bgwriterLruMultiplier")]
        public Output<double> BgwriterLruMultiplier { get; private set; } = null!;

        /// <summary>
        /// The ID of the target PostgreSQL cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
        /// </summary>
        [Output("deadlockTimeout")]
        public Output<int> DeadlockTimeout { get; private set; } = null!;

        /// <summary>
        /// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
        /// </summary>
        [Output("defaultToastCompression")]
        public Output<string> DefaultToastCompression { get; private set; } = null!;

        /// <summary>
        /// Time out sessions with open transactions after this number of milliseconds
        /// </summary>
        [Output("idleInTransactionSessionTimeout")]
        public Output<int> IdleInTransactionSessionTimeout { get; private set; } = null!;

        /// <summary>
        /// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
        /// </summary>
        [Output("jit")]
        public Output<bool> Jit { get; private set; } = null!;

        /// <summary>
        /// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
        /// </summary>
        [Output("logAutovacuumMinDuration")]
        public Output<int> LogAutovacuumMinDuration { get; private set; } = null!;

        /// <summary>
        /// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
        /// </summary>
        [Output("logErrorVerbosity")]
        public Output<string> LogErrorVerbosity { get; private set; } = null!;

        /// <summary>
        /// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
        /// </summary>
        [Output("logLinePrefix")]
        public Output<string> LogLinePrefix { get; private set; } = null!;

        /// <summary>
        /// Log statements that take more than this number of milliseconds to run. If -1, disables.
        /// </summary>
        [Output("logMinDurationStatement")]
        public Output<int> LogMinDurationStatement { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum number of files that can be open per process.
        /// </summary>
        [Output("maxFilesPerProcess")]
        public Output<int> MaxFilesPerProcess { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Output("maxLocksPerTransaction")]
        public Output<int> MaxLocksPerTransaction { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
        /// </summary>
        [Output("maxLogicalReplicationWorkers")]
        public Output<int> MaxLogicalReplicationWorkers { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of workers that the system can support for parallel queries.
        /// </summary>
        [Output("maxParallelWorkers")]
        public Output<int> MaxParallelWorkers { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
        /// </summary>
        [Output("maxParallelWorkersPerGather")]
        public Output<int> MaxParallelWorkersPerGather { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum predicate locks per transaction.
        /// </summary>
        [Output("maxPredLocksPerTransaction")]
        public Output<int> MaxPredLocksPerTransaction { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Output("maxPreparedTransactions")]
        public Output<int> MaxPreparedTransactions { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum replication slots.
        /// </summary>
        [Output("maxReplicationSlots")]
        public Output<int> MaxReplicationSlots { get; private set; } = null!;

        /// <summary>
        /// Maximum depth of the stack in bytes.
        /// </summary>
        [Output("maxStackDepth")]
        public Output<int> MaxStackDepth { get; private set; } = null!;

        /// <summary>
        /// Max standby archive delay in milliseconds.
        /// </summary>
        [Output("maxStandbyArchiveDelay")]
        public Output<int> MaxStandbyArchiveDelay { get; private set; } = null!;

        /// <summary>
        /// Max standby streaming delay in milliseconds.
        /// </summary>
        [Output("maxStandbyStreamingDelay")]
        public Output<int> MaxStandbyStreamingDelay { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Output("maxWalSenders")]
        public Output<int> MaxWalSenders { get; private set; } = null!;

        /// <summary>
        /// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Output("maxWorkerProcesses")]
        public Output<int> MaxWorkerProcesses { get; private set; } = null!;

        /// <summary>
        /// Sets the time interval to run pg_partman's scheduled tasks.
        /// </summary>
        [Output("pgPartmanBgwInterval")]
        public Output<int> PgPartmanBgwInterval { get; private set; } = null!;

        /// <summary>
        /// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
        /// </summary>
        [Output("pgPartmanBgwRole")]
        public Output<string> PgPartmanBgwRole { get; private set; } = null!;

        /// <summary>
        /// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
        /// </summary>
        [Output("pgStatStatementsTrack")]
        public Output<string> PgStatStatementsTrack { get; private set; } = null!;

        /// <summary>
        /// PGBouncer connection pooling settings
        /// </summary>
        [Output("pgbouncers")]
        public Output<ImmutableArray<Outputs.DatabasePostgresqlConfigPgbouncer>> Pgbouncers { get; private set; } = null!;

        /// <summary>
        /// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
        /// </summary>
        [Output("sharedBuffersPercentage")]
        public Output<double> SharedBuffersPercentage { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
        /// </summary>
        [Output("tempFileLimit")]
        public Output<int> TempFileLimit { get; private set; } = null!;

        /// <summary>
        /// TimescaleDB extension configuration values
        /// </summary>
        [Output("timescaledbs")]
        public Output<ImmutableArray<Outputs.DatabasePostgresqlConfigTimescaledb>> Timescaledbs { get; private set; } = null!;

        /// <summary>
        /// PostgreSQL service timezone
        /// </summary>
        [Output("timezone")]
        public Output<string> Timezone { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of bytes reserved to track the currently executing command for each active session.
        /// </summary>
        [Output("trackActivityQuerySize")]
        public Output<int> TrackActivityQuerySize { get; private set; } = null!;

        /// <summary>
        /// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Output("trackCommitTimestamp")]
        public Output<string> TrackCommitTimestamp { get; private set; } = null!;

        /// <summary>
        /// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
        /// </summary>
        [Output("trackFunctions")]
        public Output<string> TrackFunctions { get; private set; } = null!;

        /// <summary>
        /// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Output("trackIoTiming")]
        public Output<string> TrackIoTiming { get; private set; } = null!;

        /// <summary>
        /// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
        /// </summary>
        [Output("walSenderTimeout")]
        public Output<int> WalSenderTimeout { get; private set; } = null!;

        /// <summary>
        /// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
        /// </summary>
        [Output("walWriterDelay")]
        public Output<int> WalWriterDelay { get; private set; } = null!;

        /// <summary>
        /// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
        /// </summary>
        [Output("workMem")]
        public Output<int> WorkMem { get; private set; } = null!;


        /// <summary>
        /// Create a DatabasePostgresqlConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabasePostgresqlConfig(string name, DatabasePostgresqlConfigArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig", name, args ?? new DatabasePostgresqlConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabasePostgresqlConfig(string name, Input<string> id, DatabasePostgresqlConfigState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabasePostgresqlConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabasePostgresqlConfig Get(string name, Input<string> id, DatabasePostgresqlConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabasePostgresqlConfig(name, id, state, options);
        }
    }

    public sealed class DatabasePostgresqlConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
        /// </summary>
        [Input("autovacuumAnalyzeScaleFactor")]
        public Input<double>? AutovacuumAnalyzeScaleFactor { get; set; }

        /// <summary>
        /// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        /// </summary>
        [Input("autovacuumAnalyzeThreshold")]
        public Input<int>? AutovacuumAnalyzeThreshold { get; set; }

        /// <summary>
        /// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        /// </summary>
        [Input("autovacuumFreezeMaxAge")]
        public Input<int>? AutovacuumFreezeMaxAge { get; set; }

        /// <summary>
        /// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
        /// </summary>
        [Input("autovacuumMaxWorkers")]
        public Input<int>? AutovacuumMaxWorkers { get; set; }

        /// <summary>
        /// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
        /// </summary>
        [Input("autovacuumNaptime")]
        public Input<int>? AutovacuumNaptime { get; set; }

        /// <summary>
        /// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
        /// </summary>
        [Input("autovacuumVacuumCostDelay")]
        public Input<int>? AutovacuumVacuumCostDelay { get; set; }

        /// <summary>
        /// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
        /// </summary>
        [Input("autovacuumVacuumCostLimit")]
        public Input<int>? AutovacuumVacuumCostLimit { get; set; }

        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        /// </summary>
        [Input("autovacuumVacuumScaleFactor")]
        public Input<double>? AutovacuumVacuumScaleFactor { get; set; }

        /// <summary>
        /// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
        /// </summary>
        [Input("autovacuumVacuumThreshold")]
        public Input<int>? AutovacuumVacuumThreshold { get; set; }

        /// <summary>
        /// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
        /// </summary>
        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        /// <summary>
        /// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        /// <summary>
        /// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
        /// </summary>
        [Input("bgwriterDelay")]
        public Input<int>? BgwriterDelay { get; set; }

        /// <summary>
        /// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
        /// </summary>
        [Input("bgwriterFlushAfter")]
        public Input<int>? BgwriterFlushAfter { get; set; }

        /// <summary>
        /// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
        /// </summary>
        [Input("bgwriterLruMaxpages")]
        public Input<int>? BgwriterLruMaxpages { get; set; }

        /// <summary>
        /// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
        /// </summary>
        [Input("bgwriterLruMultiplier")]
        public Input<double>? BgwriterLruMultiplier { get; set; }

        /// <summary>
        /// The ID of the target PostgreSQL cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
        /// </summary>
        [Input("deadlockTimeout")]
        public Input<int>? DeadlockTimeout { get; set; }

        /// <summary>
        /// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
        /// </summary>
        [Input("defaultToastCompression")]
        public Input<string>? DefaultToastCompression { get; set; }

        /// <summary>
        /// Time out sessions with open transactions after this number of milliseconds
        /// </summary>
        [Input("idleInTransactionSessionTimeout")]
        public Input<int>? IdleInTransactionSessionTimeout { get; set; }

        /// <summary>
        /// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
        /// </summary>
        [Input("jit")]
        public Input<bool>? Jit { get; set; }

        /// <summary>
        /// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
        /// </summary>
        [Input("logAutovacuumMinDuration")]
        public Input<int>? LogAutovacuumMinDuration { get; set; }

        /// <summary>
        /// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
        /// </summary>
        [Input("logErrorVerbosity")]
        public Input<string>? LogErrorVerbosity { get; set; }

        /// <summary>
        /// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
        /// </summary>
        [Input("logLinePrefix")]
        public Input<string>? LogLinePrefix { get; set; }

        /// <summary>
        /// Log statements that take more than this number of milliseconds to run. If -1, disables.
        /// </summary>
        [Input("logMinDurationStatement")]
        public Input<int>? LogMinDurationStatement { get; set; }

        /// <summary>
        /// PostgreSQL maximum number of files that can be open per process.
        /// </summary>
        [Input("maxFilesPerProcess")]
        public Input<int>? MaxFilesPerProcess { get; set; }

        /// <summary>
        /// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxLocksPerTransaction")]
        public Input<int>? MaxLocksPerTransaction { get; set; }

        /// <summary>
        /// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
        /// </summary>
        [Input("maxLogicalReplicationWorkers")]
        public Input<int>? MaxLogicalReplicationWorkers { get; set; }

        /// <summary>
        /// Sets the maximum number of workers that the system can support for parallel queries.
        /// </summary>
        [Input("maxParallelWorkers")]
        public Input<int>? MaxParallelWorkers { get; set; }

        /// <summary>
        /// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
        /// </summary>
        [Input("maxParallelWorkersPerGather")]
        public Input<int>? MaxParallelWorkersPerGather { get; set; }

        /// <summary>
        /// PostgreSQL maximum predicate locks per transaction.
        /// </summary>
        [Input("maxPredLocksPerTransaction")]
        public Input<int>? MaxPredLocksPerTransaction { get; set; }

        /// <summary>
        /// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxPreparedTransactions")]
        public Input<int>? MaxPreparedTransactions { get; set; }

        /// <summary>
        /// PostgreSQL maximum replication slots.
        /// </summary>
        [Input("maxReplicationSlots")]
        public Input<int>? MaxReplicationSlots { get; set; }

        /// <summary>
        /// Maximum depth of the stack in bytes.
        /// </summary>
        [Input("maxStackDepth")]
        public Input<int>? MaxStackDepth { get; set; }

        /// <summary>
        /// Max standby archive delay in milliseconds.
        /// </summary>
        [Input("maxStandbyArchiveDelay")]
        public Input<int>? MaxStandbyArchiveDelay { get; set; }

        /// <summary>
        /// Max standby streaming delay in milliseconds.
        /// </summary>
        [Input("maxStandbyStreamingDelay")]
        public Input<int>? MaxStandbyStreamingDelay { get; set; }

        /// <summary>
        /// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxWalSenders")]
        public Input<int>? MaxWalSenders { get; set; }

        /// <summary>
        /// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxWorkerProcesses")]
        public Input<int>? MaxWorkerProcesses { get; set; }

        /// <summary>
        /// Sets the time interval to run pg_partman's scheduled tasks.
        /// </summary>
        [Input("pgPartmanBgwInterval")]
        public Input<int>? PgPartmanBgwInterval { get; set; }

        /// <summary>
        /// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
        /// </summary>
        [Input("pgPartmanBgwRole")]
        public Input<string>? PgPartmanBgwRole { get; set; }

        /// <summary>
        /// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
        /// </summary>
        [Input("pgStatStatementsTrack")]
        public Input<string>? PgStatStatementsTrack { get; set; }

        [Input("pgbouncers")]
        private InputList<Inputs.DatabasePostgresqlConfigPgbouncerArgs>? _pgbouncers;

        /// <summary>
        /// PGBouncer connection pooling settings
        /// </summary>
        public InputList<Inputs.DatabasePostgresqlConfigPgbouncerArgs> Pgbouncers
        {
            get => _pgbouncers ?? (_pgbouncers = new InputList<Inputs.DatabasePostgresqlConfigPgbouncerArgs>());
            set => _pgbouncers = value;
        }

        /// <summary>
        /// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
        /// </summary>
        [Input("sharedBuffersPercentage")]
        public Input<double>? SharedBuffersPercentage { get; set; }

        /// <summary>
        /// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
        /// </summary>
        [Input("tempFileLimit")]
        public Input<int>? TempFileLimit { get; set; }

        [Input("timescaledbs")]
        private InputList<Inputs.DatabasePostgresqlConfigTimescaledbArgs>? _timescaledbs;

        /// <summary>
        /// TimescaleDB extension configuration values
        /// </summary>
        public InputList<Inputs.DatabasePostgresqlConfigTimescaledbArgs> Timescaledbs
        {
            get => _timescaledbs ?? (_timescaledbs = new InputList<Inputs.DatabasePostgresqlConfigTimescaledbArgs>());
            set => _timescaledbs = value;
        }

        /// <summary>
        /// PostgreSQL service timezone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Specifies the number of bytes reserved to track the currently executing command for each active session.
        /// </summary>
        [Input("trackActivityQuerySize")]
        public Input<int>? TrackActivityQuerySize { get; set; }

        /// <summary>
        /// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Input("trackCommitTimestamp")]
        public Input<string>? TrackCommitTimestamp { get; set; }

        /// <summary>
        /// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
        /// </summary>
        [Input("trackFunctions")]
        public Input<string>? TrackFunctions { get; set; }

        /// <summary>
        /// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Input("trackIoTiming")]
        public Input<string>? TrackIoTiming { get; set; }

        /// <summary>
        /// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
        /// </summary>
        [Input("walSenderTimeout")]
        public Input<int>? WalSenderTimeout { get; set; }

        /// <summary>
        /// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
        /// </summary>
        [Input("walWriterDelay")]
        public Input<int>? WalWriterDelay { get; set; }

        /// <summary>
        /// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
        /// </summary>
        [Input("workMem")]
        public Input<int>? WorkMem { get; set; }

        public DatabasePostgresqlConfigArgs()
        {
        }
        public static new DatabasePostgresqlConfigArgs Empty => new DatabasePostgresqlConfigArgs();
    }

    public sealed class DatabasePostgresqlConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
        /// </summary>
        [Input("autovacuumAnalyzeScaleFactor")]
        public Input<double>? AutovacuumAnalyzeScaleFactor { get; set; }

        /// <summary>
        /// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
        /// </summary>
        [Input("autovacuumAnalyzeThreshold")]
        public Input<int>? AutovacuumAnalyzeThreshold { get; set; }

        /// <summary>
        /// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
        /// </summary>
        [Input("autovacuumFreezeMaxAge")]
        public Input<int>? AutovacuumFreezeMaxAge { get; set; }

        /// <summary>
        /// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
        /// </summary>
        [Input("autovacuumMaxWorkers")]
        public Input<int>? AutovacuumMaxWorkers { get; set; }

        /// <summary>
        /// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
        /// </summary>
        [Input("autovacuumNaptime")]
        public Input<int>? AutovacuumNaptime { get; set; }

        /// <summary>
        /// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.
        /// </summary>
        [Input("autovacuumVacuumCostDelay")]
        public Input<int>? AutovacuumVacuumCostDelay { get; set; }

        /// <summary>
        /// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.
        /// </summary>
        [Input("autovacuumVacuumCostLimit")]
        public Input<int>? AutovacuumVacuumCostLimit { get; set; }

        /// <summary>
        /// Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
        /// </summary>
        [Input("autovacuumVacuumScaleFactor")]
        public Input<double>? AutovacuumVacuumScaleFactor { get; set; }

        /// <summary>
        /// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
        /// </summary>
        [Input("autovacuumVacuumThreshold")]
        public Input<int>? AutovacuumVacuumThreshold { get; set; }

        /// <summary>
        /// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
        /// </summary>
        [Input("backupHour")]
        public Input<int>? BackupHour { get; set; }

        /// <summary>
        /// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
        /// </summary>
        [Input("backupMinute")]
        public Input<int>? BackupMinute { get; set; }

        /// <summary>
        /// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
        /// </summary>
        [Input("bgwriterDelay")]
        public Input<int>? BgwriterDelay { get; set; }

        /// <summary>
        /// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
        /// </summary>
        [Input("bgwriterFlushAfter")]
        public Input<int>? BgwriterFlushAfter { get; set; }

        /// <summary>
        /// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
        /// </summary>
        [Input("bgwriterLruMaxpages")]
        public Input<int>? BgwriterLruMaxpages { get; set; }

        /// <summary>
        /// The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
        /// </summary>
        [Input("bgwriterLruMultiplier")]
        public Input<double>? BgwriterLruMultiplier { get; set; }

        /// <summary>
        /// The ID of the target PostgreSQL cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
        /// </summary>
        [Input("deadlockTimeout")]
        public Input<int>? DeadlockTimeout { get; set; }

        /// <summary>
        /// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
        /// </summary>
        [Input("defaultToastCompression")]
        public Input<string>? DefaultToastCompression { get; set; }

        /// <summary>
        /// Time out sessions with open transactions after this number of milliseconds
        /// </summary>
        [Input("idleInTransactionSessionTimeout")]
        public Input<int>? IdleInTransactionSessionTimeout { get; set; }

        /// <summary>
        /// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
        /// </summary>
        [Input("jit")]
        public Input<bool>? Jit { get; set; }

        /// <summary>
        /// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
        /// </summary>
        [Input("logAutovacuumMinDuration")]
        public Input<int>? LogAutovacuumMinDuration { get; set; }

        /// <summary>
        /// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
        /// </summary>
        [Input("logErrorVerbosity")]
        public Input<string>? LogErrorVerbosity { get; set; }

        /// <summary>
        /// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
        /// </summary>
        [Input("logLinePrefix")]
        public Input<string>? LogLinePrefix { get; set; }

        /// <summary>
        /// Log statements that take more than this number of milliseconds to run. If -1, disables.
        /// </summary>
        [Input("logMinDurationStatement")]
        public Input<int>? LogMinDurationStatement { get; set; }

        /// <summary>
        /// PostgreSQL maximum number of files that can be open per process.
        /// </summary>
        [Input("maxFilesPerProcess")]
        public Input<int>? MaxFilesPerProcess { get; set; }

        /// <summary>
        /// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxLocksPerTransaction")]
        public Input<int>? MaxLocksPerTransaction { get; set; }

        /// <summary>
        /// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
        /// </summary>
        [Input("maxLogicalReplicationWorkers")]
        public Input<int>? MaxLogicalReplicationWorkers { get; set; }

        /// <summary>
        /// Sets the maximum number of workers that the system can support for parallel queries.
        /// </summary>
        [Input("maxParallelWorkers")]
        public Input<int>? MaxParallelWorkers { get; set; }

        /// <summary>
        /// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
        /// </summary>
        [Input("maxParallelWorkersPerGather")]
        public Input<int>? MaxParallelWorkersPerGather { get; set; }

        /// <summary>
        /// PostgreSQL maximum predicate locks per transaction.
        /// </summary>
        [Input("maxPredLocksPerTransaction")]
        public Input<int>? MaxPredLocksPerTransaction { get; set; }

        /// <summary>
        /// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxPreparedTransactions")]
        public Input<int>? MaxPreparedTransactions { get; set; }

        /// <summary>
        /// PostgreSQL maximum replication slots.
        /// </summary>
        [Input("maxReplicationSlots")]
        public Input<int>? MaxReplicationSlots { get; set; }

        /// <summary>
        /// Maximum depth of the stack in bytes.
        /// </summary>
        [Input("maxStackDepth")]
        public Input<int>? MaxStackDepth { get; set; }

        /// <summary>
        /// Max standby archive delay in milliseconds.
        /// </summary>
        [Input("maxStandbyArchiveDelay")]
        public Input<int>? MaxStandbyArchiveDelay { get; set; }

        /// <summary>
        /// Max standby streaming delay in milliseconds.
        /// </summary>
        [Input("maxStandbyStreamingDelay")]
        public Input<int>? MaxStandbyStreamingDelay { get; set; }

        /// <summary>
        /// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxWalSenders")]
        public Input<int>? MaxWalSenders { get; set; }

        /// <summary>
        /// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
        /// </summary>
        [Input("maxWorkerProcesses")]
        public Input<int>? MaxWorkerProcesses { get; set; }

        /// <summary>
        /// Sets the time interval to run pg_partman's scheduled tasks.
        /// </summary>
        [Input("pgPartmanBgwInterval")]
        public Input<int>? PgPartmanBgwInterval { get; set; }

        /// <summary>
        /// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
        /// </summary>
        [Input("pgPartmanBgwRole")]
        public Input<string>? PgPartmanBgwRole { get; set; }

        /// <summary>
        /// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
        /// </summary>
        [Input("pgStatStatementsTrack")]
        public Input<string>? PgStatStatementsTrack { get; set; }

        [Input("pgbouncers")]
        private InputList<Inputs.DatabasePostgresqlConfigPgbouncerGetArgs>? _pgbouncers;

        /// <summary>
        /// PGBouncer connection pooling settings
        /// </summary>
        public InputList<Inputs.DatabasePostgresqlConfigPgbouncerGetArgs> Pgbouncers
        {
            get => _pgbouncers ?? (_pgbouncers = new InputList<Inputs.DatabasePostgresqlConfigPgbouncerGetArgs>());
            set => _pgbouncers = value;
        }

        /// <summary>
        /// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the shared_buffers configuration value.
        /// </summary>
        [Input("sharedBuffersPercentage")]
        public Input<double>? SharedBuffersPercentage { get; set; }

        /// <summary>
        /// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
        /// </summary>
        [Input("tempFileLimit")]
        public Input<int>? TempFileLimit { get; set; }

        [Input("timescaledbs")]
        private InputList<Inputs.DatabasePostgresqlConfigTimescaledbGetArgs>? _timescaledbs;

        /// <summary>
        /// TimescaleDB extension configuration values
        /// </summary>
        public InputList<Inputs.DatabasePostgresqlConfigTimescaledbGetArgs> Timescaledbs
        {
            get => _timescaledbs ?? (_timescaledbs = new InputList<Inputs.DatabasePostgresqlConfigTimescaledbGetArgs>());
            set => _timescaledbs = value;
        }

        /// <summary>
        /// PostgreSQL service timezone
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Specifies the number of bytes reserved to track the currently executing command for each active session.
        /// </summary>
        [Input("trackActivityQuerySize")]
        public Input<int>? TrackActivityQuerySize { get; set; }

        /// <summary>
        /// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Input("trackCommitTimestamp")]
        public Input<string>? TrackCommitTimestamp { get; set; }

        /// <summary>
        /// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
        /// </summary>
        [Input("trackFunctions")]
        public Input<string>? TrackFunctions { get; set; }

        /// <summary>
        /// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
        /// </summary>
        [Input("trackIoTiming")]
        public Input<string>? TrackIoTiming { get; set; }

        /// <summary>
        /// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
        /// </summary>
        [Input("walSenderTimeout")]
        public Input<int>? WalSenderTimeout { get; set; }

        /// <summary>
        /// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
        /// </summary>
        [Input("walWriterDelay")]
        public Input<int>? WalWriterDelay { get; set; }

        /// <summary>
        /// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
        /// </summary>
        [Input("workMem")]
        public Input<int>? WorkMem { get; set; }

        public DatabasePostgresqlConfigState()
        {
        }
        public static new DatabasePostgresqlConfigState Empty => new DatabasePostgresqlConfigState();
    }
}
