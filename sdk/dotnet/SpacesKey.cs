// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a key resource for Spaces, DigitalOcean's object storage product.
    /// 
    /// The [Spaces API](https://docs.digitalocean.com/reference/api/spaces-api/) was
    /// designed to be interoperable with Amazon's AWS S3 API. This allows users to
    /// interact with the service while using the tools they already know. Spaces
    /// mirrors S3's authentication framework and requests to Spaces require a key pair
    /// similar to Amazon's Access ID and Secret Key.
    /// 
    /// As a Spaces owner, you limit othersâ€™ access to your buckets using Spaces access
    /// keys. Access keys can provide several levels of permissions to create, destroy,
    /// read, and write to specific associated buckets. However, access keys only limit
    /// access to certain commands using the S3 API or CLI, not the control panel or
    /// other DigitalOcean resources.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create a New Key
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new DigitalOcean.SpacesKey("foobar", new()
    ///     {
    ///         Name = "foobar",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a New Key with Grants
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new DigitalOcean.SpacesKey("foobar", new()
    ///     {
    ///         Name = "foobar",
    ///         Grants = new[]
    ///         {
    ///             new DigitalOcean.Inputs.SpacesKeyGrantArgs
    ///             {
    ///                 Bucket = "my-bucket",
    ///                 Permission = "read",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create a New Key with full access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foobar = new DigitalOcean.SpacesKey("foobar", new()
    ///     {
    ///         Name = "foobar",
    ///         Grants = new[]
    ///         {
    ///             new DigitalOcean.Inputs.SpacesKeyGrantArgs
    ///             {
    ///                 Bucket = "",
    ///                 Permission = "fullaccess",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/spacesKey:SpacesKey")]
    public partial class SpacesKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key ID of the key
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The creation time of the key
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A grant for the key (documented below).
        /// </summary>
        [Output("grants")]
        public Output<ImmutableArray<Outputs.SpacesKeyGrant>> Grants { get; private set; } = null!;

        /// <summary>
        /// The name of the key
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The access key secret of the key
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;


        /// <summary>
        /// Create a SpacesKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpacesKey(string name, SpacesKeyArgs? args = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/spacesKey:SpacesKey", name, args ?? new SpacesKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SpacesKey(string name, Input<string> id, SpacesKeyState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/spacesKey:SpacesKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpacesKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpacesKey Get(string name, Input<string> id, SpacesKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new SpacesKey(name, id, state, options);
        }
    }

    public sealed class SpacesKeyArgs : global::Pulumi.ResourceArgs
    {
        [Input("grants")]
        private InputList<Inputs.SpacesKeyGrantArgs>? _grants;

        /// <summary>
        /// A grant for the key (documented below).
        /// </summary>
        public InputList<Inputs.SpacesKeyGrantArgs> Grants
        {
            get => _grants ?? (_grants = new InputList<Inputs.SpacesKeyGrantArgs>());
            set => _grants = value;
        }

        /// <summary>
        /// The name of the key
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public SpacesKeyArgs()
        {
        }
        public static new SpacesKeyArgs Empty => new SpacesKeyArgs();
    }

    public sealed class SpacesKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key ID of the key
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The creation time of the key
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("grants")]
        private InputList<Inputs.SpacesKeyGrantGetArgs>? _grants;

        /// <summary>
        /// A grant for the key (documented below).
        /// </summary>
        public InputList<Inputs.SpacesKeyGrantGetArgs> Grants
        {
            get => _grants ?? (_grants = new InputList<Inputs.SpacesKeyGrantGetArgs>());
            set => _grants = value;
        }

        /// <summary>
        /// The name of the key
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The access key secret of the key
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SpacesKeyState()
        {
        }
        public static new SpacesKeyState Empty => new SpacesKeyState();
    }
}
