// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a virtual resource that can be used to change advanced configuration
    /// options for a DigitalOcean managed Redis database cluster.
    /// 
    /// &gt; **Note** Redis configurations are only removed from state when destroyed. The remote configuration is not unset.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDatabaseCluster = new DigitalOcean.DatabaseCluster("exampleDatabaseCluster", new()
    ///     {
    ///         Engine = "redis",
    ///         Version = "7",
    ///         Size = "db-s-1vcpu-1gb",
    ///         Region = "nyc1",
    ///         NodeCount = 1,
    ///     });
    /// 
    ///     var exampleDatabaseRedisConfig = new DigitalOcean.DatabaseRedisConfig("exampleDatabaseRedisConfig", new()
    ///     {
    ///         ClusterId = exampleDatabaseCluster.Id,
    ///         MaxmemoryPolicy = "allkeys-lru",
    ///         NotifyKeyspaceEvents = "KEA",
    ///         Timeout = 90,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Redis database cluster's configuration can be imported using the `id` the parent cluster, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import digitalocean:index/databaseRedisConfig:DatabaseRedisConfig example 245bcfd0-7f31-4ce6-a2bc-475a116cca97
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/databaseRedisConfig:DatabaseRedisConfig")]
    public partial class DatabaseRedisConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Redis' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
        /// </summary>
        [Output("aclChannelsDefault")]
        public Output<string> AclChannelsDefault { get; private set; } = null!;

        /// <summary>
        /// The ID of the target Redis cluster.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The Redis IO thread count.
        /// </summary>
        [Output("ioThreads")]
        public Output<int> IoThreads { get; private set; } = null!;

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Output("lfuDecayTime")]
        public Output<int> LfuDecayTime { get; private set; } = null!;

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Output("lfuLogFactor")]
        public Output<int> LfuLogFactor { get; private set; } = null!;

        /// <summary>
        /// A string specifying the desired eviction policy for the Redis cluster.Supported values are: `noeviction`, `allkeys-lru`, `allkeys-random`, `volatile-lru`, `volatile-random`, `volatile-ttl`
        /// </summary>
        [Output("maxmemoryPolicy")]
        public Output<string> MaxmemoryPolicy { get; private set; } = null!;

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Output("notifyKeyspaceEvents")]
        public Output<string> NotifyKeyspaceEvents { get; private set; } = null!;

        /// <summary>
        /// The number of Redis databases. Changing this will cause a restart of Redis service.
        /// </summary>
        [Output("numberOfDatabases")]
        public Output<int> NumberOfDatabases { get; private set; } = null!;

        /// <summary>
        /// When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Output("persistence")]
        public Output<string> Persistence { get; private set; } = null!;

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Output("pubsubClientOutputBufferLimit")]
        public Output<int> PubsubClientOutputBufferLimit { get; private set; } = null!;

        /// <summary>
        /// A boolean indicating whether to require SSL to access Redis.
        /// </summary>
        [Output("ssl")]
        public Output<bool> Ssl { get; private set; } = null!;

        /// <summary>
        /// The Redis idle connection timeout in seconds.
        /// </summary>
        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseRedisConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseRedisConfig(string name, DatabaseRedisConfigArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseRedisConfig:DatabaseRedisConfig", name, args ?? new DatabaseRedisConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseRedisConfig(string name, Input<string> id, DatabaseRedisConfigState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/databaseRedisConfig:DatabaseRedisConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseRedisConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseRedisConfig Get(string name, Input<string> id, DatabaseRedisConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseRedisConfig(name, id, state, options);
        }
    }

    public sealed class DatabaseRedisConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Redis' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
        /// </summary>
        [Input("aclChannelsDefault")]
        public Input<string>? AclChannelsDefault { get; set; }

        /// <summary>
        /// The ID of the target Redis cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The Redis IO thread count.
        /// </summary>
        [Input("ioThreads")]
        public Input<int>? IoThreads { get; set; }

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Input("lfuDecayTime")]
        public Input<int>? LfuDecayTime { get; set; }

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Input("lfuLogFactor")]
        public Input<int>? LfuLogFactor { get; set; }

        /// <summary>
        /// A string specifying the desired eviction policy for the Redis cluster.Supported values are: `noeviction`, `allkeys-lru`, `allkeys-random`, `volatile-lru`, `volatile-random`, `volatile-ttl`
        /// </summary>
        [Input("maxmemoryPolicy")]
        public Input<string>? MaxmemoryPolicy { get; set; }

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Input("notifyKeyspaceEvents")]
        public Input<string>? NotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// The number of Redis databases. Changing this will cause a restart of Redis service.
        /// </summary>
        [Input("numberOfDatabases")]
        public Input<int>? NumberOfDatabases { get; set; }

        /// <summary>
        /// When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Input("persistence")]
        public Input<string>? Persistence { get; set; }

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Input("pubsubClientOutputBufferLimit")]
        public Input<int>? PubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// A boolean indicating whether to require SSL to access Redis.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// The Redis idle connection timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public DatabaseRedisConfigArgs()
        {
        }
        public static new DatabaseRedisConfigArgs Empty => new DatabaseRedisConfigArgs();
    }

    public sealed class DatabaseRedisConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Redis' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
        /// </summary>
        [Input("aclChannelsDefault")]
        public Input<string>? AclChannelsDefault { get; set; }

        /// <summary>
        /// The ID of the target Redis cluster.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The Redis IO thread count.
        /// </summary>
        [Input("ioThreads")]
        public Input<int>? IoThreads { get; set; }

        /// <summary>
        /// The LFU maxmemory policy counter decay time in minutes.
        /// </summary>
        [Input("lfuDecayTime")]
        public Input<int>? LfuDecayTime { get; set; }

        /// <summary>
        /// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
        /// </summary>
        [Input("lfuLogFactor")]
        public Input<int>? LfuLogFactor { get; set; }

        /// <summary>
        /// A string specifying the desired eviction policy for the Redis cluster.Supported values are: `noeviction`, `allkeys-lru`, `allkeys-random`, `volatile-lru`, `volatile-random`, `volatile-ttl`
        /// </summary>
        [Input("maxmemoryPolicy")]
        public Input<string>? MaxmemoryPolicy { get; set; }

        /// <summary>
        /// The `notify-keyspace-events` option. Requires at least `K` or `E`.
        /// </summary>
        [Input("notifyKeyspaceEvents")]
        public Input<string>? NotifyKeyspaceEvents { get; set; }

        /// <summary>
        /// The number of Redis databases. Changing this will cause a restart of Redis service.
        /// </summary>
        [Input("numberOfDatabases")]
        public Input<int>? NumberOfDatabases { get; set; }

        /// <summary>
        /// When persistence is `rdb`, Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is `off`, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
        /// </summary>
        [Input("persistence")]
        public Input<string>? Persistence { get; set; }

        /// <summary>
        /// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
        /// </summary>
        [Input("pubsubClientOutputBufferLimit")]
        public Input<int>? PubsubClientOutputBufferLimit { get; set; }

        /// <summary>
        /// A boolean indicating whether to require SSL to access Redis.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// The Redis idle connection timeout in seconds.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        public DatabaseRedisConfigState()
        {
        }
        public static new DatabaseRedisConfigState Empty => new DatabaseRedisConfigState();
    }
}
