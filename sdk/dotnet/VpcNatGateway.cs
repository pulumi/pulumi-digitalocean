// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.DigitalOcean
{
    /// <summary>
    /// Provides a DigitalOcean VPC NAT Gateway resource. This can be used to create, modify,
    /// read and delete VPC NAT Gateways.
    /// 
    /// NOTE: VPC NAT Gateway is currently in Private Preview.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using DigitalOcean = Pulumi.DigitalOcean;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var my_vpc = new DigitalOcean.Vpc("my-vpc", new()
    ///     {
    ///         Name = "terraform-example",
    ///         Region = "nyc3",
    ///     });
    /// 
    ///     var my_vpc_nat_gateway = new DigitalOcean.VpcNatGateway("my-vpc-nat-gateway", new()
    ///     {
    ///         Name = "terraform-example",
    ///         Type = "PUBLIC",
    ///         Region = "nyc3",
    ///         Size = 1,
    ///         Vpcs = new[]
    ///         {
    ///             new DigitalOcean.Inputs.VpcNatGatewayVpcArgs
    ///             {
    ///                 VpcUuid = my_vpc.Id,
    ///             },
    ///         },
    ///         UdpTimeoutSeconds = 30,
    ///         IcmpTimeoutSeconds = 30,
    ///         TcpTimeoutSeconds = 30,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VPC NAT Gateways can be imported using their `id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import digitalocean:index/vpcNatGateway:VpcNatGateway my-vpc-nat-gateway-id 38e66834-d741-47ec-88e7-c70cbdcz0445
    /// ```
    /// </summary>
    [DigitalOceanResourceType("digitalocean:index/vpcNatGateway:VpcNatGateway")]
    public partial class VpcNatGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Created at timestamp for the VPC NAT Gateway.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
        /// `public_gateways` embedding the reserved `ipv4` addresses.
        /// </summary>
        [Output("egresses")]
        public Output<ImmutableArray<Outputs.VpcNatGatewayEgress>> Egresses { get; private set; } = null!;

        /// <summary>
        /// The egress timeout value for ICMP connections of the VPC NAT Gateway.
        /// </summary>
        [Output("icmpTimeoutSeconds")]
        public Output<int> IcmpTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// The name of the VPC NAT Gateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The region for the VPC NAT Gateway.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The size of the VPC NAT Gateway.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// State of the VPC NAT Gateway
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The egress timeout value for TCP connections of the VPC NAT Gateway.
        /// </summary>
        [Output("tcpTimeoutSeconds")]
        public Output<int> TcpTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// The type of the VPC NAT Gateway.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The egress timeout value for UDP connections of the VPC NAT Gateway.
        /// </summary>
        [Output("udpTimeoutSeconds")]
        public Output<int> UdpTimeoutSeconds { get; private set; } = null!;

        /// <summary>
        /// Updated at timestamp for the VPC NAT Gateway.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
        /// documented below.
        /// </summary>
        [Output("vpcs")]
        public Output<ImmutableArray<Outputs.VpcNatGatewayVpc>> Vpcs { get; private set; } = null!;


        /// <summary>
        /// Create a VpcNatGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcNatGateway(string name, VpcNatGatewayArgs args, CustomResourceOptions? options = null)
            : base("digitalocean:index/vpcNatGateway:VpcNatGateway", name, args ?? new VpcNatGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpcNatGateway(string name, Input<string> id, VpcNatGatewayState? state = null, CustomResourceOptions? options = null)
            : base("digitalocean:index/vpcNatGateway:VpcNatGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcNatGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcNatGateway Get(string name, Input<string> id, VpcNatGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new VpcNatGateway(name, id, state, options);
        }
    }

    public sealed class VpcNatGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The egress timeout value for ICMP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("icmpTimeoutSeconds")]
        public Input<int>? IcmpTimeoutSeconds { get; set; }

        /// <summary>
        /// The name of the VPC NAT Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region for the VPC NAT Gateway.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The size of the VPC NAT Gateway.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        /// <summary>
        /// The egress timeout value for TCP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("tcpTimeoutSeconds")]
        public Input<int>? TcpTimeoutSeconds { get; set; }

        /// <summary>
        /// The type of the VPC NAT Gateway.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The egress timeout value for UDP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("udpTimeoutSeconds")]
        public Input<int>? UdpTimeoutSeconds { get; set; }

        [Input("vpcs", required: true)]
        private InputList<Inputs.VpcNatGatewayVpcArgs>? _vpcs;

        /// <summary>
        /// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
        /// documented below.
        /// </summary>
        public InputList<Inputs.VpcNatGatewayVpcArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.VpcNatGatewayVpcArgs>());
            set => _vpcs = value;
        }

        public VpcNatGatewayArgs()
        {
        }
        public static new VpcNatGatewayArgs Empty => new VpcNatGatewayArgs();
    }

    public sealed class VpcNatGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Created at timestamp for the VPC NAT Gateway.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("egresses")]
        private InputList<Inputs.VpcNatGatewayEgressGetArgs>? _egresses;

        /// <summary>
        /// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
        /// `public_gateways` embedding the reserved `ipv4` addresses.
        /// </summary>
        public InputList<Inputs.VpcNatGatewayEgressGetArgs> Egresses
        {
            get => _egresses ?? (_egresses = new InputList<Inputs.VpcNatGatewayEgressGetArgs>());
            set => _egresses = value;
        }

        /// <summary>
        /// The egress timeout value for ICMP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("icmpTimeoutSeconds")]
        public Input<int>? IcmpTimeoutSeconds { get; set; }

        /// <summary>
        /// The name of the VPC NAT Gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The region for the VPC NAT Gateway.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The size of the VPC NAT Gateway.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// State of the VPC NAT Gateway
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The egress timeout value for TCP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("tcpTimeoutSeconds")]
        public Input<int>? TcpTimeoutSeconds { get; set; }

        /// <summary>
        /// The type of the VPC NAT Gateway.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The egress timeout value for UDP connections of the VPC NAT Gateway.
        /// </summary>
        [Input("udpTimeoutSeconds")]
        public Input<int>? UdpTimeoutSeconds { get; set; }

        /// <summary>
        /// Updated at timestamp for the VPC NAT Gateway.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.VpcNatGatewayVpcGetArgs>? _vpcs;

        /// <summary>
        /// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
        /// documented below.
        /// </summary>
        public InputList<Inputs.VpcNatGatewayVpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.VpcNatGatewayVpcGetArgs>());
            set => _vpcs = value;
        }

        public VpcNatGatewayState()
        {
        }
        public static new VpcNatGatewayState Empty => new VpcNatGatewayState();
    }
}
