// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCertificateResult {
    /**
     * @return Domains for which the certificate was issued.
     * 
     */
    private List<String> domains;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The expiration date and time of the certificate.
     * 
     */
    private String notAfter;
    /**
     * @return The SHA1 fingerprint of the certificate.
     * 
     */
    private String sha1Fingerprint;
    /**
     * @return the current state of the certificate.
     * 
     */
    private String state;
    /**
     * @return The type of the certificate.
     * 
     */
    private String type;
    /**
     * @return The ID of the certificate.
     * 
     */
    private String uuid;

    private GetCertificateResult() {}
    /**
     * @return Domains for which the certificate was issued.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The expiration date and time of the certificate.
     * 
     */
    public String notAfter() {
        return this.notAfter;
    }
    /**
     * @return The SHA1 fingerprint of the certificate.
     * 
     */
    public String sha1Fingerprint() {
        return this.sha1Fingerprint;
    }
    /**
     * @return the current state of the certificate.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return The type of the certificate.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The ID of the certificate.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> domains;
        private String id;
        private String name;
        private String notAfter;
        private String sha1Fingerprint;
        private String state;
        private String type;
        private String uuid;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domains = defaults.domains;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.notAfter = defaults.notAfter;
    	      this.sha1Fingerprint = defaults.sha1Fingerprint;
    	      this.state = defaults.state;
    	      this.type = defaults.type;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notAfter(String notAfter) {
            if (notAfter == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "notAfter");
            }
            this.notAfter = notAfter;
            return this;
        }
        @CustomType.Setter
        public Builder sha1Fingerprint(String sha1Fingerprint) {
            if (sha1Fingerprint == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "sha1Fingerprint");
            }
            this.sha1Fingerprint = sha1Fingerprint;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetCertificateResult build() {
            final var _resultValue = new GetCertificateResult();
            _resultValue.domains = domains;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.notAfter = notAfter;
            _resultValue.sha1Fingerprint = sha1Fingerprint;
            _resultValue.state = state;
            _resultValue.type = type;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
