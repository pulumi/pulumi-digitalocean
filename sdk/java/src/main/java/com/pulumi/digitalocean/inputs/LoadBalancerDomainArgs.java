// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerDomainArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerDomainArgs Empty = new LoadBalancerDomainArgs();

    /**
     * name of certificate required for TLS handshaking
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return name of certificate required for TLS handshaking
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * Control flag to specify whether the domain is managed by DigitalOcean.
     * 
     */
    @Import(name="isManaged")
    private @Nullable Output<Boolean> isManaged;

    /**
     * @return Control flag to specify whether the domain is managed by DigitalOcean.
     * 
     */
    public Optional<Output<Boolean>> isManaged() {
        return Optional.ofNullable(this.isManaged);
    }

    /**
     * The domain name to be used for ingressing traffic to a Global Load Balancer.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The domain name to be used for ingressing traffic to a Global Load Balancer.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * list of domain SSL validation errors
     * 
     */
    @Import(name="sslValidationErrorReasons")
    private @Nullable Output<List<String>> sslValidationErrorReasons;

    /**
     * @return list of domain SSL validation errors
     * 
     */
    public Optional<Output<List<String>>> sslValidationErrorReasons() {
        return Optional.ofNullable(this.sslValidationErrorReasons);
    }

    /**
     * list of domain verification errors
     * 
     */
    @Import(name="verificationErrorReasons")
    private @Nullable Output<List<String>> verificationErrorReasons;

    /**
     * @return list of domain verification errors
     * 
     */
    public Optional<Output<List<String>>> verificationErrorReasons() {
        return Optional.ofNullable(this.verificationErrorReasons);
    }

    private LoadBalancerDomainArgs() {}

    private LoadBalancerDomainArgs(LoadBalancerDomainArgs $) {
        this.certificateName = $.certificateName;
        this.isManaged = $.isManaged;
        this.name = $.name;
        this.sslValidationErrorReasons = $.sslValidationErrorReasons;
        this.verificationErrorReasons = $.verificationErrorReasons;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerDomainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerDomainArgs $;

        public Builder() {
            $ = new LoadBalancerDomainArgs();
        }

        public Builder(LoadBalancerDomainArgs defaults) {
            $ = new LoadBalancerDomainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateName name of certificate required for TLS handshaking
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName name of certificate required for TLS handshaking
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param isManaged Control flag to specify whether the domain is managed by DigitalOcean.
         * 
         * @return builder
         * 
         */
        public Builder isManaged(@Nullable Output<Boolean> isManaged) {
            $.isManaged = isManaged;
            return this;
        }

        /**
         * @param isManaged Control flag to specify whether the domain is managed by DigitalOcean.
         * 
         * @return builder
         * 
         */
        public Builder isManaged(Boolean isManaged) {
            return isManaged(Output.of(isManaged));
        }

        /**
         * @param name The domain name to be used for ingressing traffic to a Global Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The domain name to be used for ingressing traffic to a Global Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sslValidationErrorReasons list of domain SSL validation errors
         * 
         * @return builder
         * 
         */
        public Builder sslValidationErrorReasons(@Nullable Output<List<String>> sslValidationErrorReasons) {
            $.sslValidationErrorReasons = sslValidationErrorReasons;
            return this;
        }

        /**
         * @param sslValidationErrorReasons list of domain SSL validation errors
         * 
         * @return builder
         * 
         */
        public Builder sslValidationErrorReasons(List<String> sslValidationErrorReasons) {
            return sslValidationErrorReasons(Output.of(sslValidationErrorReasons));
        }

        /**
         * @param sslValidationErrorReasons list of domain SSL validation errors
         * 
         * @return builder
         * 
         */
        public Builder sslValidationErrorReasons(String... sslValidationErrorReasons) {
            return sslValidationErrorReasons(List.of(sslValidationErrorReasons));
        }

        /**
         * @param verificationErrorReasons list of domain verification errors
         * 
         * @return builder
         * 
         */
        public Builder verificationErrorReasons(@Nullable Output<List<String>> verificationErrorReasons) {
            $.verificationErrorReasons = verificationErrorReasons;
            return this;
        }

        /**
         * @param verificationErrorReasons list of domain verification errors
         * 
         * @return builder
         * 
         */
        public Builder verificationErrorReasons(List<String> verificationErrorReasons) {
            return verificationErrorReasons(Output.of(verificationErrorReasons));
        }

        /**
         * @param verificationErrorReasons list of domain verification errors
         * 
         * @return builder
         * 
         */
        public Builder verificationErrorReasons(String... verificationErrorReasons) {
            return verificationErrorReasons(List.of(verificationErrorReasons));
        }

        public LoadBalancerDomainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("LoadBalancerDomainArgs", "name");
            }
            return $;
        }
    }

}
