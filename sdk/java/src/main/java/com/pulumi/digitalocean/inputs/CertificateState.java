// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.enums.CertificateType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * The full PEM-formatted trust chain
     * between the certificate authority&#39;s certificate and your domain&#39;s TLS
     * certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="certificateChain")
    private @Nullable Output<String> certificateChain;

    /**
     * @return The full PEM-formatted trust chain
     * between the certificate authority&#39;s certificate and your domain&#39;s TLS
     * certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }

    /**
     * List of fully qualified domain names (FQDNs) for
     * which the certificate will be issued. The domains must be managed using
     * DigitalOcean&#39;s DNS. Only valid when type is `lets_encrypt`.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return List of fully qualified domain names (FQDNs) for
     * which the certificate will be issued. The domains must be managed using
     * DigitalOcean&#39;s DNS. Only valid when type is `lets_encrypt`.
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * The contents of a PEM-formatted public
     * TLS certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="leafCertificate")
    private @Nullable Output<String> leafCertificate;

    /**
     * @return The contents of a PEM-formatted public
     * TLS certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> leafCertificate() {
        return Optional.ofNullable(this.leafCertificate);
    }

    /**
     * The name of the certificate for identification.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate for identification.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The expiration date of the certificate
     * 
     */
    @Import(name="notAfter")
    private @Nullable Output<String> notAfter;

    /**
     * @return The expiration date of the certificate
     * 
     */
    public Optional<Output<String>> notAfter() {
        return Optional.ofNullable(this.notAfter);
    }

    /**
     * The contents of a PEM-formatted private-key
     * corresponding to the SSL certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The contents of a PEM-formatted private-key
     * corresponding to the SSL certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The SHA-1 fingerprint of the certificate
     * 
     */
    @Import(name="sha1Fingerprint")
    private @Nullable Output<String> sha1Fingerprint;

    /**
     * @return The SHA-1 fingerprint of the certificate
     * 
     */
    public Optional<Output<String>> sha1Fingerprint() {
        return Optional.ofNullable(this.sha1Fingerprint);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The type of certificate to provision. Can be either
     * `custom` or `lets_encrypt`. Defaults to `custom`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,CertificateType>> type;

    /**
     * @return The type of certificate to provision. Can be either
     * `custom` or `lets_encrypt`. Defaults to `custom`.
     * 
     */
    public Optional<Output<Either<String,CertificateType>>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The UUID of the certificate
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return The UUID of the certificate
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateChain = $.certificateChain;
        this.domains = $.domains;
        this.leafCertificate = $.leafCertificate;
        this.name = $.name;
        this.notAfter = $.notAfter;
        this.privateKey = $.privateKey;
        this.sha1Fingerprint = $.sha1Fingerprint;
        this.state = $.state;
        this.type = $.type;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateChain The full PEM-formatted trust chain
         * between the certificate authority&#39;s certificate and your domain&#39;s TLS
         * certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain The full PEM-formatted trust chain
         * between the certificate authority&#39;s certificate and your domain&#39;s TLS
         * certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `lets_encrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `lets_encrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `lets_encrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param leafCertificate The contents of a PEM-formatted public
         * TLS certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder leafCertificate(@Nullable Output<String> leafCertificate) {
            $.leafCertificate = leafCertificate;
            return this;
        }

        /**
         * @param leafCertificate The contents of a PEM-formatted public
         * TLS certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder leafCertificate(String leafCertificate) {
            return leafCertificate(Output.of(leafCertificate));
        }

        /**
         * @param name The name of the certificate for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notAfter The expiration date of the certificate
         * 
         * @return builder
         * 
         */
        public Builder notAfter(@Nullable Output<String> notAfter) {
            $.notAfter = notAfter;
            return this;
        }

        /**
         * @param notAfter The expiration date of the certificate
         * 
         * @return builder
         * 
         */
        public Builder notAfter(String notAfter) {
            return notAfter(Output.of(notAfter));
        }

        /**
         * @param privateKey The contents of a PEM-formatted private-key
         * corresponding to the SSL certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The contents of a PEM-formatted private-key
         * corresponding to the SSL certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param sha1Fingerprint The SHA-1 fingerprint of the certificate
         * 
         * @return builder
         * 
         */
        public Builder sha1Fingerprint(@Nullable Output<String> sha1Fingerprint) {
            $.sha1Fingerprint = sha1Fingerprint;
            return this;
        }

        /**
         * @param sha1Fingerprint The SHA-1 fingerprint of the certificate
         * 
         * @return builder
         * 
         */
        public Builder sha1Fingerprint(String sha1Fingerprint) {
            return sha1Fingerprint(Output.of(sha1Fingerprint));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `lets_encrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,CertificateType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `lets_encrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,CertificateType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `lets_encrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `lets_encrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(CertificateType type) {
            return type(Either.ofRight(type));
        }

        /**
         * @param uuid The UUID of the certificate
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid The UUID of the certificate
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public CertificateState build() {
            return $;
        }
    }

}
