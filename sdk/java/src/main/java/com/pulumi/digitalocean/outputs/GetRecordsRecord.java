// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRecordsRecord {
    /**
     * @return The domain name to search for DNS records
     * 
     */
    private String domain;
    /**
     * @return An unsigned integer between 0-255 used for CAA records.
     * 
     */
    private Integer flags;
    /**
     * @return The ID of the record.
     * 
     */
    private Integer id;
    /**
     * @return The name of the DNS record.
     * 
     */
    private String name;
    /**
     * @return The port for SRV records.
     * 
     */
    private Integer port;
    /**
     * @return The priority for SRV and MX records.
     * 
     */
    private Integer priority;
    /**
     * @return The parameter tag for CAA records.
     * 
     */
    private String tag;
    /**
     * @return This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
     * 
     */
    private Integer ttl;
    /**
     * @return The type of the DNS record.
     * 
     */
    private String type;
    /**
     * @return Variable data depending on record type. For example, the &#34;data&#34; value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
     * 
     */
    private String value;
    /**
     * @return The weight for SRV records.
     * 
     */
    private Integer weight;

    private GetRecordsRecord() {}
    /**
     * @return The domain name to search for DNS records
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return An unsigned integer between 0-255 used for CAA records.
     * 
     */
    public Integer flags() {
        return this.flags;
    }
    /**
     * @return The ID of the record.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The name of the DNS record.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The port for SRV records.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The priority for SRV and MX records.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The parameter tag for CAA records.
     * 
     */
    public String tag() {
        return this.tag;
    }
    /**
     * @return This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    /**
     * @return The type of the DNS record.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Variable data depending on record type. For example, the &#34;data&#34; value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
     * 
     */
    public String value() {
        return this.value;
    }
    /**
     * @return The weight for SRV records.
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecordsRecord defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private Integer flags;
        private Integer id;
        private String name;
        private Integer port;
        private Integer priority;
        private String tag;
        private Integer ttl;
        private String type;
        private String value;
        private Integer weight;
        public Builder() {}
        public Builder(GetRecordsRecord defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.flags = defaults.flags;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.priority = defaults.priority;
    	      this.tag = defaults.tag;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.value = defaults.value;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder flags(Integer flags) {
            if (flags == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "flags");
            }
            this.flags = flags;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder tag(String tag) {
            if (tag == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "tag");
            }
            this.tag = tag;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder value(String value) {
            if (value == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "value");
            }
            this.value = value;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("GetRecordsRecord", "weight");
            }
            this.weight = weight;
            return this;
        }
        public GetRecordsRecord build() {
            final var _resultValue = new GetRecordsRecord();
            _resultValue.domain = domain;
            _resultValue.flags = flags;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.priority = priority;
            _resultValue.tag = tag;
            _resultValue.ttl = ttl;
            _resultValue.type = type;
            _resultValue.value = value;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
