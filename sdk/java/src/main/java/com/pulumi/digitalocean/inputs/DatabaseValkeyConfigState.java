// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseValkeyConfigState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseValkeyConfigState Empty = new DatabaseValkeyConfigState();

    /**
     * Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
     * 
     */
    @Import(name="aclChannelsDefault")
    private @Nullable Output<String> aclChannelsDefault;

    /**
     * @return Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
     * 
     */
    public Optional<Output<String>> aclChannelsDefault() {
        return Optional.ofNullable(this.aclChannelsDefault);
    }

    /**
     * The ID of the target Valkey cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the target Valkey cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkeyPersistence is set to off.
     * 
     */
    @Import(name="frequentSnapshots")
    private @Nullable Output<Boolean> frequentSnapshots;

    /**
     * @return Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkeyPersistence is set to off.
     * 
     */
    public Optional<Output<Boolean>> frequentSnapshots() {
        return Optional.ofNullable(this.frequentSnapshots);
    }

    /**
     * The Valkey IO thread count.
     * 
     */
    @Import(name="ioThreads")
    private @Nullable Output<Integer> ioThreads;

    /**
     * @return The Valkey IO thread count.
     * 
     */
    public Optional<Output<Integer>> ioThreads() {
        return Optional.ofNullable(this.ioThreads);
    }

    /**
     * The LFU maxmemory policy counter decay time in minutes.
     * 
     */
    @Import(name="lfuDecayTime")
    private @Nullable Output<Integer> lfuDecayTime;

    /**
     * @return The LFU maxmemory policy counter decay time in minutes.
     * 
     */
    public Optional<Output<Integer>> lfuDecayTime() {
        return Optional.ofNullable(this.lfuDecayTime);
    }

    /**
     * The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
     * 
     */
    @Import(name="lfuLogFactor")
    private @Nullable Output<Integer> lfuLogFactor;

    /**
     * @return The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
     * 
     */
    public Optional<Output<Integer>> lfuLogFactor() {
        return Optional.ofNullable(this.lfuLogFactor);
    }

    /**
     * The `notify-keyspace-events` option. Requires at least `K` or `E`.
     * 
     */
    @Import(name="notifyKeyspaceEvents")
    private @Nullable Output<String> notifyKeyspaceEvents;

    /**
     * @return The `notify-keyspace-events` option. Requires at least `K` or `E`.
     * 
     */
    public Optional<Output<String>> notifyKeyspaceEvents() {
        return Optional.ofNullable(this.notifyKeyspaceEvents);
    }

    /**
     * The number of Valkey databases. Changing this will cause a restart of Valkey service.
     * 
     */
    @Import(name="numberOfDatabases")
    private @Nullable Output<Integer> numberOfDatabases;

    /**
     * @return The number of Valkey databases. Changing this will cause a restart of Valkey service.
     * 
     */
    public Optional<Output<Integer>> numberOfDatabases() {
        return Optional.ofNullable(this.numberOfDatabases);
    }

    /**
     * When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    @Import(name="persistence")
    private @Nullable Output<String> persistence;

    /**
     * @return When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Optional<Output<String>> persistence() {
        return Optional.ofNullable(this.persistence);
    }

    /**
     * The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    @Import(name="pubsubClientOutputBufferLimit")
    private @Nullable Output<Integer> pubsubClientOutputBufferLimit;

    /**
     * @return The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Optional<Output<Integer>> pubsubClientOutputBufferLimit() {
        return Optional.ofNullable(this.pubsubClientOutputBufferLimit);
    }

    /**
     * A boolean indicating whether to require SSL to access Valkey.
     * 
     */
    @Import(name="ssl")
    private @Nullable Output<Boolean> ssl;

    /**
     * @return A boolean indicating whether to require SSL to access Valkey.
     * 
     */
    public Optional<Output<Boolean>> ssl() {
        return Optional.ofNullable(this.ssl);
    }

    /**
     * The Valkey idle connection timeout in seconds.
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return The Valkey idle connection timeout in seconds.
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    @Import(name="valkeyActiveExpireEffort")
    private @Nullable Output<Integer> valkeyActiveExpireEffort;

    /**
     * @return Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    public Optional<Output<Integer>> valkeyActiveExpireEffort() {
        return Optional.ofNullable(this.valkeyActiveExpireEffort);
    }

    private DatabaseValkeyConfigState() {}

    private DatabaseValkeyConfigState(DatabaseValkeyConfigState $) {
        this.aclChannelsDefault = $.aclChannelsDefault;
        this.clusterId = $.clusterId;
        this.frequentSnapshots = $.frequentSnapshots;
        this.ioThreads = $.ioThreads;
        this.lfuDecayTime = $.lfuDecayTime;
        this.lfuLogFactor = $.lfuLogFactor;
        this.notifyKeyspaceEvents = $.notifyKeyspaceEvents;
        this.numberOfDatabases = $.numberOfDatabases;
        this.persistence = $.persistence;
        this.pubsubClientOutputBufferLimit = $.pubsubClientOutputBufferLimit;
        this.ssl = $.ssl;
        this.timeout = $.timeout;
        this.valkeyActiveExpireEffort = $.valkeyActiveExpireEffort;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseValkeyConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseValkeyConfigState $;

        public Builder() {
            $ = new DatabaseValkeyConfigState();
        }

        public Builder(DatabaseValkeyConfigState defaults) {
            $ = new DatabaseValkeyConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclChannelsDefault Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
         * 
         * @return builder
         * 
         */
        public Builder aclChannelsDefault(@Nullable Output<String> aclChannelsDefault) {
            $.aclChannelsDefault = aclChannelsDefault;
            return this;
        }

        /**
         * @param aclChannelsDefault Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
         * 
         * @return builder
         * 
         */
        public Builder aclChannelsDefault(String aclChannelsDefault) {
            return aclChannelsDefault(Output.of(aclChannelsDefault));
        }

        /**
         * @param clusterId The ID of the target Valkey cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target Valkey cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param frequentSnapshots Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkeyPersistence is set to off.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(@Nullable Output<Boolean> frequentSnapshots) {
            $.frequentSnapshots = frequentSnapshots;
            return this;
        }

        /**
         * @param frequentSnapshots Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkeyPersistence is set to off.
         * 
         * @return builder
         * 
         */
        public Builder frequentSnapshots(Boolean frequentSnapshots) {
            return frequentSnapshots(Output.of(frequentSnapshots));
        }

        /**
         * @param ioThreads The Valkey IO thread count.
         * 
         * @return builder
         * 
         */
        public Builder ioThreads(@Nullable Output<Integer> ioThreads) {
            $.ioThreads = ioThreads;
            return this;
        }

        /**
         * @param ioThreads The Valkey IO thread count.
         * 
         * @return builder
         * 
         */
        public Builder ioThreads(Integer ioThreads) {
            return ioThreads(Output.of(ioThreads));
        }

        /**
         * @param lfuDecayTime The LFU maxmemory policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder lfuDecayTime(@Nullable Output<Integer> lfuDecayTime) {
            $.lfuDecayTime = lfuDecayTime;
            return this;
        }

        /**
         * @param lfuDecayTime The LFU maxmemory policy counter decay time in minutes.
         * 
         * @return builder
         * 
         */
        public Builder lfuDecayTime(Integer lfuDecayTime) {
            return lfuDecayTime(Output.of(lfuDecayTime));
        }

        /**
         * @param lfuLogFactor The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
         * 
         * @return builder
         * 
         */
        public Builder lfuLogFactor(@Nullable Output<Integer> lfuLogFactor) {
            $.lfuLogFactor = lfuLogFactor;
            return this;
        }

        /**
         * @param lfuLogFactor The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
         * 
         * @return builder
         * 
         */
        public Builder lfuLogFactor(Integer lfuLogFactor) {
            return lfuLogFactor(Output.of(lfuLogFactor));
        }

        /**
         * @param notifyKeyspaceEvents The `notify-keyspace-events` option. Requires at least `K` or `E`.
         * 
         * @return builder
         * 
         */
        public Builder notifyKeyspaceEvents(@Nullable Output<String> notifyKeyspaceEvents) {
            $.notifyKeyspaceEvents = notifyKeyspaceEvents;
            return this;
        }

        /**
         * @param notifyKeyspaceEvents The `notify-keyspace-events` option. Requires at least `K` or `E`.
         * 
         * @return builder
         * 
         */
        public Builder notifyKeyspaceEvents(String notifyKeyspaceEvents) {
            return notifyKeyspaceEvents(Output.of(notifyKeyspaceEvents));
        }

        /**
         * @param numberOfDatabases The number of Valkey databases. Changing this will cause a restart of Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDatabases(@Nullable Output<Integer> numberOfDatabases) {
            $.numberOfDatabases = numberOfDatabases;
            return this;
        }

        /**
         * @param numberOfDatabases The number of Valkey databases. Changing this will cause a restart of Valkey service.
         * 
         * @return builder
         * 
         */
        public Builder numberOfDatabases(Integer numberOfDatabases) {
            return numberOfDatabases(Output.of(numberOfDatabases));
        }

        /**
         * @param persistence When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder persistence(@Nullable Output<String> persistence) {
            $.persistence = persistence;
            return this;
        }

        /**
         * @param persistence When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
         * 
         * @return builder
         * 
         */
        public Builder persistence(String persistence) {
            return persistence(Output.of(persistence));
        }

        /**
         * @param pubsubClientOutputBufferLimit The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder pubsubClientOutputBufferLimit(@Nullable Output<Integer> pubsubClientOutputBufferLimit) {
            $.pubsubClientOutputBufferLimit = pubsubClientOutputBufferLimit;
            return this;
        }

        /**
         * @param pubsubClientOutputBufferLimit The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
         * 
         * @return builder
         * 
         */
        public Builder pubsubClientOutputBufferLimit(Integer pubsubClientOutputBufferLimit) {
            return pubsubClientOutputBufferLimit(Output.of(pubsubClientOutputBufferLimit));
        }

        /**
         * @param ssl A boolean indicating whether to require SSL to access Valkey.
         * 
         * @return builder
         * 
         */
        public Builder ssl(@Nullable Output<Boolean> ssl) {
            $.ssl = ssl;
            return this;
        }

        /**
         * @param ssl A boolean indicating whether to require SSL to access Valkey.
         * 
         * @return builder
         * 
         */
        public Builder ssl(Boolean ssl) {
            return ssl(Output.of(ssl));
        }

        /**
         * @param timeout The Valkey idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The Valkey idle connection timeout in seconds.
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param valkeyActiveExpireEffort Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(@Nullable Output<Integer> valkeyActiveExpireEffort) {
            $.valkeyActiveExpireEffort = valkeyActiveExpireEffort;
            return this;
        }

        /**
         * @param valkeyActiveExpireEffort Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
         * 
         * @return builder
         * 
         */
        public Builder valkeyActiveExpireEffort(Integer valkeyActiveExpireEffort) {
            return valkeyActiveExpireEffort(Output.of(valkeyActiveExpireEffort));
        }

        public DatabaseValkeyConfigState build() {
            return $;
        }
    }

}
