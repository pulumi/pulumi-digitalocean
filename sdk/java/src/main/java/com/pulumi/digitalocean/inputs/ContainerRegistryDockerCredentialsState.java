// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryDockerCredentialsState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryDockerCredentialsState Empty = new ContainerRegistryDockerCredentialsState();

    /**
     * The date and time the registry access token will expire.
     * 
     */
    @Import(name="credentialExpirationTime")
    private @Nullable Output<String> credentialExpirationTime;

    /**
     * @return The date and time the registry access token will expire.
     * 
     */
    public Optional<Output<String>> credentialExpirationTime() {
        return Optional.ofNullable(this.credentialExpirationTime);
    }

    /**
     * Credentials for the container registry.
     * 
     */
    @Import(name="dockerCredentials")
    private @Nullable Output<String> dockerCredentials;

    /**
     * @return Credentials for the container registry.
     * 
     */
    public Optional<Output<String>> dockerCredentials() {
        return Optional.ofNullable(this.dockerCredentials);
    }

    /**
     * The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
     * 
     */
    @Import(name="expirySeconds")
    private @Nullable Output<Integer> expirySeconds;

    /**
     * @return The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
     * 
     */
    public Optional<Output<Integer>> expirySeconds() {
        return Optional.ofNullable(this.expirySeconds);
    }

    /**
     * The name of the container registry.
     * 
     */
    @Import(name="registryName")
    private @Nullable Output<String> registryName;

    /**
     * @return The name of the container registry.
     * 
     */
    public Optional<Output<String>> registryName() {
        return Optional.ofNullable(this.registryName);
    }

    /**
     * Allow for write access to the container registry. Defaults to false.
     * 
     */
    @Import(name="write")
    private @Nullable Output<Boolean> write;

    /**
     * @return Allow for write access to the container registry. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> write() {
        return Optional.ofNullable(this.write);
    }

    private ContainerRegistryDockerCredentialsState() {}

    private ContainerRegistryDockerCredentialsState(ContainerRegistryDockerCredentialsState $) {
        this.credentialExpirationTime = $.credentialExpirationTime;
        this.dockerCredentials = $.dockerCredentials;
        this.expirySeconds = $.expirySeconds;
        this.registryName = $.registryName;
        this.write = $.write;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryDockerCredentialsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryDockerCredentialsState $;

        public Builder() {
            $ = new ContainerRegistryDockerCredentialsState();
        }

        public Builder(ContainerRegistryDockerCredentialsState defaults) {
            $ = new ContainerRegistryDockerCredentialsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param credentialExpirationTime The date and time the registry access token will expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialExpirationTime(@Nullable Output<String> credentialExpirationTime) {
            $.credentialExpirationTime = credentialExpirationTime;
            return this;
        }

        /**
         * @param credentialExpirationTime The date and time the registry access token will expire.
         * 
         * @return builder
         * 
         */
        public Builder credentialExpirationTime(String credentialExpirationTime) {
            return credentialExpirationTime(Output.of(credentialExpirationTime));
        }

        /**
         * @param dockerCredentials Credentials for the container registry.
         * 
         * @return builder
         * 
         */
        public Builder dockerCredentials(@Nullable Output<String> dockerCredentials) {
            $.dockerCredentials = dockerCredentials;
            return this;
        }

        /**
         * @param dockerCredentials Credentials for the container registry.
         * 
         * @return builder
         * 
         */
        public Builder dockerCredentials(String dockerCredentials) {
            return dockerCredentials(Output.of(dockerCredentials));
        }

        /**
         * @param expirySeconds The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
         * 
         * @return builder
         * 
         */
        public Builder expirySeconds(@Nullable Output<Integer> expirySeconds) {
            $.expirySeconds = expirySeconds;
            return this;
        }

        /**
         * @param expirySeconds The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
         * 
         * @return builder
         * 
         */
        public Builder expirySeconds(Integer expirySeconds) {
            return expirySeconds(Output.of(expirySeconds));
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(@Nullable Output<String> registryName) {
            $.registryName = registryName;
            return this;
        }

        /**
         * @param registryName The name of the container registry.
         * 
         * @return builder
         * 
         */
        public Builder registryName(String registryName) {
            return registryName(Output.of(registryName));
        }

        /**
         * @param write Allow for write access to the container registry. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder write(@Nullable Output<Boolean> write) {
            $.write = write;
            return this;
        }

        /**
         * @param write Allow for write access to the container registry. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder write(Boolean write) {
            return write(Output.of(write));
        }

        public ContainerRegistryDockerCredentialsState build() {
            return $;
        }
    }

}
