// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DatabasePostgresqlConfigPgbouncer {
    private @Nullable Integer autodbIdleTimeout;
    private @Nullable Integer autodbMaxDbConnections;
    private @Nullable String autodbPoolMode;
    private @Nullable Integer autodbPoolSize;
    private @Nullable List<String> ignoreStartupParameters;
    private @Nullable Integer minPoolSize;
    private @Nullable Integer serverIdleTimeout;
    private @Nullable Integer serverLifetime;
    private @Nullable Boolean serverResetQueryAlways;

    private DatabasePostgresqlConfigPgbouncer() {}
    public Optional<Integer> autodbIdleTimeout() {
        return Optional.ofNullable(this.autodbIdleTimeout);
    }
    public Optional<Integer> autodbMaxDbConnections() {
        return Optional.ofNullable(this.autodbMaxDbConnections);
    }
    public Optional<String> autodbPoolMode() {
        return Optional.ofNullable(this.autodbPoolMode);
    }
    public Optional<Integer> autodbPoolSize() {
        return Optional.ofNullable(this.autodbPoolSize);
    }
    public List<String> ignoreStartupParameters() {
        return this.ignoreStartupParameters == null ? List.of() : this.ignoreStartupParameters;
    }
    public Optional<Integer> minPoolSize() {
        return Optional.ofNullable(this.minPoolSize);
    }
    public Optional<Integer> serverIdleTimeout() {
        return Optional.ofNullable(this.serverIdleTimeout);
    }
    public Optional<Integer> serverLifetime() {
        return Optional.ofNullable(this.serverLifetime);
    }
    public Optional<Boolean> serverResetQueryAlways() {
        return Optional.ofNullable(this.serverResetQueryAlways);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabasePostgresqlConfigPgbouncer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer autodbIdleTimeout;
        private @Nullable Integer autodbMaxDbConnections;
        private @Nullable String autodbPoolMode;
        private @Nullable Integer autodbPoolSize;
        private @Nullable List<String> ignoreStartupParameters;
        private @Nullable Integer minPoolSize;
        private @Nullable Integer serverIdleTimeout;
        private @Nullable Integer serverLifetime;
        private @Nullable Boolean serverResetQueryAlways;
        public Builder() {}
        public Builder(DatabasePostgresqlConfigPgbouncer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autodbIdleTimeout = defaults.autodbIdleTimeout;
    	      this.autodbMaxDbConnections = defaults.autodbMaxDbConnections;
    	      this.autodbPoolMode = defaults.autodbPoolMode;
    	      this.autodbPoolSize = defaults.autodbPoolSize;
    	      this.ignoreStartupParameters = defaults.ignoreStartupParameters;
    	      this.minPoolSize = defaults.minPoolSize;
    	      this.serverIdleTimeout = defaults.serverIdleTimeout;
    	      this.serverLifetime = defaults.serverLifetime;
    	      this.serverResetQueryAlways = defaults.serverResetQueryAlways;
        }

        @CustomType.Setter
        public Builder autodbIdleTimeout(@Nullable Integer autodbIdleTimeout) {

            this.autodbIdleTimeout = autodbIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder autodbMaxDbConnections(@Nullable Integer autodbMaxDbConnections) {

            this.autodbMaxDbConnections = autodbMaxDbConnections;
            return this;
        }
        @CustomType.Setter
        public Builder autodbPoolMode(@Nullable String autodbPoolMode) {

            this.autodbPoolMode = autodbPoolMode;
            return this;
        }
        @CustomType.Setter
        public Builder autodbPoolSize(@Nullable Integer autodbPoolSize) {

            this.autodbPoolSize = autodbPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder ignoreStartupParameters(@Nullable List<String> ignoreStartupParameters) {

            this.ignoreStartupParameters = ignoreStartupParameters;
            return this;
        }
        public Builder ignoreStartupParameters(String... ignoreStartupParameters) {
            return ignoreStartupParameters(List.of(ignoreStartupParameters));
        }
        @CustomType.Setter
        public Builder minPoolSize(@Nullable Integer minPoolSize) {

            this.minPoolSize = minPoolSize;
            return this;
        }
        @CustomType.Setter
        public Builder serverIdleTimeout(@Nullable Integer serverIdleTimeout) {

            this.serverIdleTimeout = serverIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder serverLifetime(@Nullable Integer serverLifetime) {

            this.serverLifetime = serverLifetime;
            return this;
        }
        @CustomType.Setter
        public Builder serverResetQueryAlways(@Nullable Boolean serverResetQueryAlways) {

            this.serverResetQueryAlways = serverResetQueryAlways;
            return this;
        }
        public DatabasePostgresqlConfigPgbouncer build() {
            final var _resultValue = new DatabasePostgresqlConfigPgbouncer();
            _resultValue.autodbIdleTimeout = autodbIdleTimeout;
            _resultValue.autodbMaxDbConnections = autodbMaxDbConnections;
            _resultValue.autodbPoolMode = autodbPoolMode;
            _resultValue.autodbPoolSize = autodbPoolSize;
            _resultValue.ignoreStartupParameters = ignoreStartupParameters;
            _resultValue.minPoolSize = minPoolSize;
            _resultValue.serverIdleTimeout = serverIdleTimeout;
            _resultValue.serverLifetime = serverLifetime;
            _resultValue.serverResetQueryAlways = serverResetQueryAlways;
            return _resultValue;
        }
    }
}
