// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTagsTag {
    /**
     * @return A count of the database clusters that the tag is applied to.
     * 
     */
    private Integer databasesCount;
    /**
     * @return A count of the Droplets the tag is applied to.
     * 
     */
    private Integer dropletsCount;
    /**
     * @return A count of the images that the tag is applied to.
     * 
     */
    private Integer imagesCount;
    /**
     * @return The name of the tag.
     * 
     */
    private String name;
    /**
     * @return A count of the total number of resources that the tag is applied to.
     * 
     */
    private Integer totalResourceCount;
    /**
     * @return A count of the volume snapshots that the tag is applied to.
     * 
     */
    private Integer volumeSnapshotsCount;
    /**
     * @return A count of the volumes that the tag is applied to.
     * 
     */
    private Integer volumesCount;

    private GetTagsTag() {}
    /**
     * @return A count of the database clusters that the tag is applied to.
     * 
     */
    public Integer databasesCount() {
        return this.databasesCount;
    }
    /**
     * @return A count of the Droplets the tag is applied to.
     * 
     */
    public Integer dropletsCount() {
        return this.dropletsCount;
    }
    /**
     * @return A count of the images that the tag is applied to.
     * 
     */
    public Integer imagesCount() {
        return this.imagesCount;
    }
    /**
     * @return The name of the tag.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A count of the total number of resources that the tag is applied to.
     * 
     */
    public Integer totalResourceCount() {
        return this.totalResourceCount;
    }
    /**
     * @return A count of the volume snapshots that the tag is applied to.
     * 
     */
    public Integer volumeSnapshotsCount() {
        return this.volumeSnapshotsCount;
    }
    /**
     * @return A count of the volumes that the tag is applied to.
     * 
     */
    public Integer volumesCount() {
        return this.volumesCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTagsTag defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer databasesCount;
        private Integer dropletsCount;
        private Integer imagesCount;
        private String name;
        private Integer totalResourceCount;
        private Integer volumeSnapshotsCount;
        private Integer volumesCount;
        public Builder() {}
        public Builder(GetTagsTag defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.databasesCount = defaults.databasesCount;
    	      this.dropletsCount = defaults.dropletsCount;
    	      this.imagesCount = defaults.imagesCount;
    	      this.name = defaults.name;
    	      this.totalResourceCount = defaults.totalResourceCount;
    	      this.volumeSnapshotsCount = defaults.volumeSnapshotsCount;
    	      this.volumesCount = defaults.volumesCount;
        }

        @CustomType.Setter
        public Builder databasesCount(Integer databasesCount) {
            if (databasesCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "databasesCount");
            }
            this.databasesCount = databasesCount;
            return this;
        }
        @CustomType.Setter
        public Builder dropletsCount(Integer dropletsCount) {
            if (dropletsCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "dropletsCount");
            }
            this.dropletsCount = dropletsCount;
            return this;
        }
        @CustomType.Setter
        public Builder imagesCount(Integer imagesCount) {
            if (imagesCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "imagesCount");
            }
            this.imagesCount = imagesCount;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder totalResourceCount(Integer totalResourceCount) {
            if (totalResourceCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "totalResourceCount");
            }
            this.totalResourceCount = totalResourceCount;
            return this;
        }
        @CustomType.Setter
        public Builder volumeSnapshotsCount(Integer volumeSnapshotsCount) {
            if (volumeSnapshotsCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "volumeSnapshotsCount");
            }
            this.volumeSnapshotsCount = volumeSnapshotsCount;
            return this;
        }
        @CustomType.Setter
        public Builder volumesCount(Integer volumesCount) {
            if (volumesCount == null) {
              throw new MissingRequiredPropertyException("GetTagsTag", "volumesCount");
            }
            this.volumesCount = volumesCount;
            return this;
        }
        public GetTagsTag build() {
            final var _resultValue = new GetTagsTag();
            _resultValue.databasesCount = databasesCount;
            _resultValue.dropletsCount = dropletsCount;
            _resultValue.imagesCount = imagesCount;
            _resultValue.name = name;
            _resultValue.totalResourceCount = totalResourceCount;
            _resultValue.volumeSnapshotsCount = volumeSnapshotsCount;
            _resultValue.volumesCount = volumesCount;
            return _resultValue;
        }
    }
}
