// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.digitalocean.DatabaseValkeyConfigArgs;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.inputs.DatabaseValkeyConfigState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a virtual resource that can be used to change advanced configuration
 * options for a DigitalOcean managed Valkey database cluster.
 * 
 * &gt; **Note** Valkey configurations are only removed from state when destroyed. The remote configuration is not unset.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.DatabaseCluster;
 * import com.pulumi.digitalocean.DatabaseClusterArgs;
 * import com.pulumi.digitalocean.DatabaseValkeyConfig;
 * import com.pulumi.digitalocean.DatabaseValkeyConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleDatabaseCluster = new DatabaseCluster("exampleDatabaseCluster", DatabaseClusterArgs.builder()
 *             .name("example-valkey-cluster")
 *             .engine("valkey")
 *             .version("8")
 *             .size("db-s-1vcpu-1gb")
 *             .region("nyc1")
 *             .nodeCount(1)
 *             .build());
 * 
 *         var example = new DatabaseValkeyConfig("example", DatabaseValkeyConfigArgs.builder()
 *             .clusterId(exampleDatabaseCluster.id())
 *             .notifyKeyspaceEvents("KEA")
 *             .timeout(90)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Valkey database cluster&#39;s configuration can be imported using the `id` the parent cluster, e.g.
 * 
 * ```sh
 * $ pulumi import digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig example 245bcfd0-7f31-4ce6-a2bc-475a116cca97
 * ```
 * 
 */
@ResourceType(type="digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig")
public class DatabaseValkeyConfig extends com.pulumi.resources.CustomResource {
    /**
     * Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
     * 
     */
    @Export(name="aclChannelsDefault", refs={String.class}, tree="[0]")
    private Output<String> aclChannelsDefault;

    /**
     * @return Determines default pub/sub channels&#39; ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn&#39;t affect Valkey&#39; `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
     * 
     */
    public Output<String> aclChannelsDefault() {
        return this.aclChannelsDefault;
    }
    /**
     * The ID of the target Valkey cluster.
     * 
     */
    @Export(name="clusterId", refs={String.class}, tree="[0]")
    private Output<String> clusterId;

    /**
     * @return The ID of the target Valkey cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkey_persistence is set to off.
     * 
     */
    @Export(name="frequentSnapshots", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> frequentSnapshots;

    /**
     * @return Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when valkey_persistence is set to off.
     * 
     */
    public Output<Boolean> frequentSnapshots() {
        return this.frequentSnapshots;
    }
    /**
     * The Valkey IO thread count.
     * 
     */
    @Export(name="ioThreads", refs={Integer.class}, tree="[0]")
    private Output<Integer> ioThreads;

    /**
     * @return The Valkey IO thread count.
     * 
     */
    public Output<Integer> ioThreads() {
        return this.ioThreads;
    }
    /**
     * The LFU maxmemory policy counter decay time in minutes.
     * 
     */
    @Export(name="lfuDecayTime", refs={Integer.class}, tree="[0]")
    private Output<Integer> lfuDecayTime;

    /**
     * @return The LFU maxmemory policy counter decay time in minutes.
     * 
     */
    public Output<Integer> lfuDecayTime() {
        return this.lfuDecayTime;
    }
    /**
     * The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
     * 
     */
    @Export(name="lfuLogFactor", refs={Integer.class}, tree="[0]")
    private Output<Integer> lfuLogFactor;

    /**
     * @return The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
     * 
     */
    public Output<Integer> lfuLogFactor() {
        return this.lfuLogFactor;
    }
    /**
     * The `notify-keyspace-events` option. Requires at least `K` or `E`.
     * 
     */
    @Export(name="notifyKeyspaceEvents", refs={String.class}, tree="[0]")
    private Output<String> notifyKeyspaceEvents;

    /**
     * @return The `notify-keyspace-events` option. Requires at least `K` or `E`.
     * 
     */
    public Output<String> notifyKeyspaceEvents() {
        return this.notifyKeyspaceEvents;
    }
    /**
     * The number of Valkey databases. Changing this will cause a restart of Valkey service.
     * 
     */
    @Export(name="numberOfDatabases", refs={Integer.class}, tree="[0]")
    private Output<Integer> numberOfDatabases;

    /**
     * @return The number of Valkey databases. Changing this will cause a restart of Valkey service.
     * 
     */
    public Output<Integer> numberOfDatabases() {
        return this.numberOfDatabases;
    }
    /**
     * When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    @Export(name="persistence", refs={String.class}, tree="[0]")
    private Output<String> persistence;

    /**
     * @return When persistence is &#39;rdb&#39;, Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is &#39;off&#39;, no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can&#39;t be forked.
     * 
     */
    public Output<String> persistence() {
        return this.persistence;
    }
    /**
     * The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    @Export(name="pubsubClientOutputBufferLimit", refs={Integer.class}, tree="[0]")
    private Output<Integer> pubsubClientOutputBufferLimit;

    /**
     * @return The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
     * 
     */
    public Output<Integer> pubsubClientOutputBufferLimit() {
        return this.pubsubClientOutputBufferLimit;
    }
    /**
     * A boolean indicating whether to require SSL to access Valkey.
     * 
     */
    @Export(name="ssl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> ssl;

    /**
     * @return A boolean indicating whether to require SSL to access Valkey.
     * 
     */
    public Output<Boolean> ssl() {
        return this.ssl;
    }
    /**
     * The Valkey idle connection timeout in seconds.
     * 
     */
    @Export(name="timeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> timeout;

    /**
     * @return The Valkey idle connection timeout in seconds.
     * 
     */
    public Output<Integer> timeout() {
        return this.timeout;
    }
    /**
     * Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    @Export(name="valkeyActiveExpireEffort", refs={Integer.class}, tree="[0]")
    private Output<Integer> valkeyActiveExpireEffort;

    /**
     * @return Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to reclaim expired keys faster, reducing memory usage but potentially increasing latency.
     * 
     */
    public Output<Integer> valkeyActiveExpireEffort() {
        return this.valkeyActiveExpireEffort;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseValkeyConfig(java.lang.String name) {
        this(name, DatabaseValkeyConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseValkeyConfig(java.lang.String name, DatabaseValkeyConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseValkeyConfig(java.lang.String name, DatabaseValkeyConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseValkeyConfig(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseValkeyConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseValkeyConfigArgs makeArgs(DatabaseValkeyConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseValkeyConfigArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseValkeyConfig get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseValkeyConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseValkeyConfig(name, id, state, options);
    }
}
