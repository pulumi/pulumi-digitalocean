// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class SpacesBucketLoggingArgs extends com.pulumi.resources.ResourceArgs {

    public static final SpacesBucketLoggingArgs Empty = new SpacesBucketLoggingArgs();

    /**
     * The name of the bucket which will be logged.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return The name of the bucket which will be logged.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    /**
     * The region where the bucket resides.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region where the bucket resides.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The name of the bucket which will store the logs.
     * 
     */
    @Import(name="targetBucket", required=true)
    private Output<String> targetBucket;

    /**
     * @return The name of the bucket which will store the logs.
     * 
     */
    public Output<String> targetBucket() {
        return this.targetBucket;
    }

    /**
     * The prefix for the log files.
     * 
     */
    @Import(name="targetPrefix", required=true)
    private Output<String> targetPrefix;

    /**
     * @return The prefix for the log files.
     * 
     */
    public Output<String> targetPrefix() {
        return this.targetPrefix;
    }

    private SpacesBucketLoggingArgs() {}

    private SpacesBucketLoggingArgs(SpacesBucketLoggingArgs $) {
        this.bucket = $.bucket;
        this.region = $.region;
        this.targetBucket = $.targetBucket;
        this.targetPrefix = $.targetPrefix;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SpacesBucketLoggingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SpacesBucketLoggingArgs $;

        public Builder() {
            $ = new SpacesBucketLoggingArgs();
        }

        public Builder(SpacesBucketLoggingArgs defaults) {
            $ = new SpacesBucketLoggingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket The name of the bucket which will be logged.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket The name of the bucket which will be logged.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @param region The region where the bucket resides.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where the bucket resides.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param targetBucket The name of the bucket which will store the logs.
         * 
         * @return builder
         * 
         */
        public Builder targetBucket(Output<String> targetBucket) {
            $.targetBucket = targetBucket;
            return this;
        }

        /**
         * @param targetBucket The name of the bucket which will store the logs.
         * 
         * @return builder
         * 
         */
        public Builder targetBucket(String targetBucket) {
            return targetBucket(Output.of(targetBucket));
        }

        /**
         * @param targetPrefix The prefix for the log files.
         * 
         * @return builder
         * 
         */
        public Builder targetPrefix(Output<String> targetPrefix) {
            $.targetPrefix = targetPrefix;
            return this;
        }

        /**
         * @param targetPrefix The prefix for the log files.
         * 
         * @return builder
         * 
         */
        public Builder targetPrefix(String targetPrefix) {
            return targetPrefix(Output.of(targetPrefix));
        }

        public SpacesBucketLoggingArgs build() {
            if ($.bucket == null) {
                throw new MissingRequiredPropertyException("SpacesBucketLoggingArgs", "bucket");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("SpacesBucketLoggingArgs", "region");
            }
            if ($.targetBucket == null) {
                throw new MissingRequiredPropertyException("SpacesBucketLoggingArgs", "targetBucket");
            }
            if ($.targetPrefix == null) {
                throw new MissingRequiredPropertyException("SpacesBucketLoggingArgs", "targetPrefix");
            }
            return $;
        }
    }

}
