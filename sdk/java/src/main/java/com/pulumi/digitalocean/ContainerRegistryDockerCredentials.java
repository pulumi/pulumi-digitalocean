// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.digitalocean.ContainerRegistryDockerCredentialsArgs;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.inputs.ContainerRegistryDockerCredentialsState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Get Docker credentials for your DigitalOcean container registry.
 * 
 * An error is triggered if the provided container registry name does not exist.
 * 
 * ## Example Usage
 * 
 * ### Basic Example
 * 
 * Get the container registry:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentials;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ContainerRegistryDockerCredentials("example", ContainerRegistryDockerCredentialsArgs.builder()
 *             .registryName("example")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Docker Provider Example
 * 
 * Use the `endpoint` and `docker_credentials` with the Docker provider:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.DigitaloceanFunctions;
 * import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentials;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentialsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var example = DigitaloceanFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()
 *             .name("example")
 *             .build());
 * 
 *         var exampleContainerRegistryDockerCredentials = new ContainerRegistryDockerCredentials("exampleContainerRegistryDockerCredentials", ContainerRegistryDockerCredentialsArgs.builder()
 *             .registryName("example")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Kubernetes Example
 * 
 * Combined with the Kubernetes Provider&#39;s `kubernetes_secret` resource, you can
 * access the registry from inside your cluster:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentials;
 * import com.pulumi.digitalocean.ContainerRegistryDockerCredentialsArgs;
 * import com.pulumi.digitalocean.DigitaloceanFunctions;
 * import com.pulumi.digitalocean.inputs.GetKubernetesClusterArgs;
 * import com.pulumi.kubernetes.core_v1.Secret;
 * import com.pulumi.kubernetes.core_v1.SecretArgs;
 * import com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleContainerRegistryDockerCredentials = new ContainerRegistryDockerCredentials("exampleContainerRegistryDockerCredentials", ContainerRegistryDockerCredentialsArgs.builder()
 *             .registryName("example")
 *             .build());
 * 
 *         final var example = DigitaloceanFunctions.getKubernetesCluster(GetKubernetesClusterArgs.builder()
 *             .name("prod-cluster-01")
 *             .build());
 * 
 *         var exampleSecret = new Secret("exampleSecret", SecretArgs.builder()
 *             .metadata(ObjectMetaArgs.builder()
 *                 .name("docker-cfg")
 *                 .build())
 *             .data(Map.of(".dockerconfigjson", exampleContainerRegistryDockerCredentials.dockerCredentials()))
 *             .type("kubernetes.io/dockerconfigjson")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials")
public class ContainerRegistryDockerCredentials extends com.pulumi.resources.CustomResource {
    /**
     * The date and time the registry access token will expire.
     * 
     */
    @Export(name="credentialExpirationTime", refs={String.class}, tree="[0]")
    private Output<String> credentialExpirationTime;

    /**
     * @return The date and time the registry access token will expire.
     * 
     */
    public Output<String> credentialExpirationTime() {
        return this.credentialExpirationTime;
    }
    /**
     * Credentials for the container registry.
     * 
     */
    @Export(name="dockerCredentials", refs={String.class}, tree="[0]")
    private Output<String> dockerCredentials;

    /**
     * @return Credentials for the container registry.
     * 
     */
    public Output<String> dockerCredentials() {
        return this.dockerCredentials;
    }
    /**
     * The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
     * 
     */
    @Export(name="expirySeconds", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> expirySeconds;

    /**
     * @return The amount of time to pass before the Docker credentials expire in seconds. Defaults to 1576800000, or roughly 50 years. Must be greater than 0 and less than 1576800000.
     * 
     */
    public Output<Optional<Integer>> expirySeconds() {
        return Codegen.optional(this.expirySeconds);
    }
    /**
     * The name of the container registry.
     * 
     */
    @Export(name="registryName", refs={String.class}, tree="[0]")
    private Output<String> registryName;

    /**
     * @return The name of the container registry.
     * 
     */
    public Output<String> registryName() {
        return this.registryName;
    }
    /**
     * Allow for write access to the container registry. Defaults to false.
     * 
     */
    @Export(name="write", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> write;

    /**
     * @return Allow for write access to the container registry. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> write() {
        return Codegen.optional(this.write);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ContainerRegistryDockerCredentials(String name) {
        this(name, ContainerRegistryDockerCredentialsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ContainerRegistryDockerCredentials(String name, ContainerRegistryDockerCredentialsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ContainerRegistryDockerCredentials(String name, ContainerRegistryDockerCredentialsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private ContainerRegistryDockerCredentials(String name, Output<String> id, @Nullable ContainerRegistryDockerCredentialsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials", name, state, makeResourceOptions(options, id));
    }

    private static ContainerRegistryDockerCredentialsArgs makeArgs(ContainerRegistryDockerCredentialsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ContainerRegistryDockerCredentialsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "dockerCredentials"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ContainerRegistryDockerCredentials get(String name, Output<String> id, @Nullable ContainerRegistryDockerCredentialsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ContainerRegistryDockerCredentials(name, id, state, options);
    }
}
