// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseMysqlConfigState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseMysqlConfigState Empty = new DatabaseMysqlConfigState();

    /**
     * The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    @Import(name="backupHour")
    private @Nullable Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupHour() {
        return Optional.ofNullable(this.backupHour);
    }

    /**
     * The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    @Import(name="backupMinute")
    private @Nullable Output<Integer> backupMinute;

    /**
     * @return The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    public Optional<Output<Integer>> backupMinute() {
        return Optional.ofNullable(this.backupMinute);
    }

    /**
     * The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    @Import(name="binlogRetentionPeriod")
    private @Nullable Output<Integer> binlogRetentionPeriod;

    /**
     * @return The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    public Optional<Output<Integer>> binlogRetentionPeriod() {
        return Optional.ofNullable(this.binlogRetentionPeriod);
    }

    /**
     * The ID of the target MySQL cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the target MySQL cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
     * 
     */
    @Import(name="connectTimeout")
    private @Nullable Output<Integer> connectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
     * 
     */
    public Optional<Output<Integer>> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }

    /**
     * Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
     * 
     */
    @Import(name="defaultTimeZone")
    private @Nullable Output<String> defaultTimeZone;

    /**
     * @return Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
     * 
     */
    public Optional<Output<String>> defaultTimeZone() {
        return Optional.ofNullable(this.defaultTimeZone);
    }

    /**
     * The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
     * 
     */
    @Import(name="groupConcatMaxLen")
    private @Nullable Output<Integer> groupConcatMaxLen;

    /**
     * @return The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
     * 
     */
    public Optional<Output<Integer>> groupConcatMaxLen() {
        return Optional.ofNullable(this.groupConcatMaxLen);
    }

    /**
     * The time, in seconds, before cached statistics expire.
     * 
     */
    @Import(name="informationSchemaStatsExpiry")
    private @Nullable Output<Integer> informationSchemaStatsExpiry;

    /**
     * @return The time, in seconds, before cached statistics expire.
     * 
     */
    public Optional<Output<Integer>> informationSchemaStatsExpiry() {
        return Optional.ofNullable(this.informationSchemaStatsExpiry);
    }

    /**
     * The minimum length of words that an InnoDB FULLTEXT index stores.
     * 
     */
    @Import(name="innodbFtMinTokenSize")
    private @Nullable Output<Integer> innodbFtMinTokenSize;

    /**
     * @return The minimum length of words that an InnoDB FULLTEXT index stores.
     * 
     */
    public Optional<Output<Integer>> innodbFtMinTokenSize() {
        return Optional.ofNullable(this.innodbFtMinTokenSize);
    }

    /**
     * The InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    @Import(name="innodbFtServerStopwordTable")
    private @Nullable Output<String> innodbFtServerStopwordTable;

    /**
     * @return The InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    public Optional<Output<String>> innodbFtServerStopwordTable() {
        return Optional.ofNullable(this.innodbFtServerStopwordTable);
    }

    /**
     * The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
     * 
     */
    @Import(name="innodbLockWaitTimeout")
    private @Nullable Output<Integer> innodbLockWaitTimeout;

    /**
     * @return The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
     * 
     */
    public Optional<Output<Integer>> innodbLockWaitTimeout() {
        return Optional.ofNullable(this.innodbLockWaitTimeout);
    }

    /**
     * The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
     * 
     */
    @Import(name="innodbLogBufferSize")
    private @Nullable Output<Integer> innodbLogBufferSize;

    /**
     * @return The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
     * 
     */
    public Optional<Output<Integer>> innodbLogBufferSize() {
        return Optional.ofNullable(this.innodbLogBufferSize);
    }

    /**
     * The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    @Import(name="innodbOnlineAlterLogMaxSize")
    private @Nullable Output<Integer> innodbOnlineAlterLogMaxSize;

    /**
     * @return The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    public Optional<Output<Integer>> innodbOnlineAlterLogMaxSize() {
        return Optional.ofNullable(this.innodbOnlineAlterLogMaxSize);
    }

    /**
     * When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
     * 
     */
    @Import(name="innodbPrintAllDeadlocks")
    private @Nullable Output<Boolean> innodbPrintAllDeadlocks;

    /**
     * @return When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
     * 
     */
    public Optional<Output<Boolean>> innodbPrintAllDeadlocks() {
        return Optional.ofNullable(this.innodbPrintAllDeadlocks);
    }

    /**
     * When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
     * 
     */
    @Import(name="innodbRollbackOnTimeout")
    private @Nullable Output<Boolean> innodbRollbackOnTimeout;

    /**
     * @return When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
     * 
     */
    public Optional<Output<Boolean>> innodbRollbackOnTimeout() {
        return Optional.ofNullable(this.innodbRollbackOnTimeout);
    }

    /**
     * The time, in seconds, the server waits for activity on an interactive. connection before closing it.
     * 
     */
    @Import(name="interactiveTimeout")
    private @Nullable Output<Integer> interactiveTimeout;

    /**
     * @return The time, in seconds, the server waits for activity on an interactive. connection before closing it.
     * 
     */
    public Optional<Output<Integer>> interactiveTimeout() {
        return Optional.ofNullable(this.interactiveTimeout);
    }

    /**
     * The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
     * 
     */
    @Import(name="internalTmpMemStorageEngine")
    private @Nullable Output<String> internalTmpMemStorageEngine;

    /**
     * @return The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
     * 
     */
    public Optional<Output<String>> internalTmpMemStorageEngine() {
        return Optional.ofNullable(this.internalTmpMemStorageEngine);
    }

    /**
     * The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
     * 
     */
    @Import(name="longQueryTime")
    private @Nullable Output<Double> longQueryTime;

    /**
     * @return The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
     * 
     */
    public Optional<Output<Double>> longQueryTime() {
        return Optional.ofNullable(this.longQueryTime);
    }

    /**
     * The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
     * 
     */
    @Import(name="maxAllowedPacket")
    private @Nullable Output<Integer> maxAllowedPacket;

    /**
     * @return The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
     * 
     */
    public Optional<Output<Integer>> maxAllowedPacket() {
        return Optional.ofNullable(this.maxAllowedPacket);
    }

    /**
     * The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
     * 
     */
    @Import(name="maxHeapTableSize")
    private @Nullable Output<Integer> maxHeapTableSize;

    /**
     * @return The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
     * 
     */
    public Optional<Output<Integer>> maxHeapTableSize() {
        return Optional.ofNullable(this.maxHeapTableSize);
    }

    /**
     * The time, in seconds, to wait for more data from an existing connection. aborting the read.
     * 
     */
    @Import(name="netReadTimeout")
    private @Nullable Output<Integer> netReadTimeout;

    /**
     * @return The time, in seconds, to wait for more data from an existing connection. aborting the read.
     * 
     */
    public Optional<Output<Integer>> netReadTimeout() {
        return Optional.ofNullable(this.netReadTimeout);
    }

    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    @Import(name="netWriteTimeout")
    private @Nullable Output<Integer> netWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Optional<Output<Integer>> netWriteTimeout() {
        return Optional.ofNullable(this.netWriteTimeout);
    }

    /**
     * When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
     * 
     */
    @Import(name="slowQueryLog")
    private @Nullable Output<Boolean> slowQueryLog;

    /**
     * @return When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
     * 
     */
    public Optional<Output<Boolean>> slowQueryLog() {
        return Optional.ofNullable(this.slowQueryLog);
    }

    /**
     * The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
     * 
     */
    @Import(name="sortBufferSize")
    private @Nullable Output<Integer> sortBufferSize;

    /**
     * @return The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
     * 
     */
    public Optional<Output<Integer>> sortBufferSize() {
        return Optional.ofNullable(this.sortBufferSize);
    }

    /**
     * Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
     * 
     */
    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    /**
     * @return Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
     * 
     */
    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    @Import(name="sqlRequirePrimaryKey")
    private @Nullable Output<Boolean> sqlRequirePrimaryKey;

    /**
     * @return Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    public Optional<Output<Boolean>> sqlRequirePrimaryKey() {
        return Optional.ofNullable(this.sqlRequirePrimaryKey);
    }

    /**
     * The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
     * 
     */
    @Import(name="tmpTableSize")
    private @Nullable Output<Integer> tmpTableSize;

    /**
     * @return The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
     * 
     */
    public Optional<Output<Integer>> tmpTableSize() {
        return Optional.ofNullable(this.tmpTableSize);
    }

    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    @Import(name="waitTimeout")
    private @Nullable Output<Integer> waitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Optional<Output<Integer>> waitTimeout() {
        return Optional.ofNullable(this.waitTimeout);
    }

    private DatabaseMysqlConfigState() {}

    private DatabaseMysqlConfigState(DatabaseMysqlConfigState $) {
        this.backupHour = $.backupHour;
        this.backupMinute = $.backupMinute;
        this.binlogRetentionPeriod = $.binlogRetentionPeriod;
        this.clusterId = $.clusterId;
        this.connectTimeout = $.connectTimeout;
        this.defaultTimeZone = $.defaultTimeZone;
        this.groupConcatMaxLen = $.groupConcatMaxLen;
        this.informationSchemaStatsExpiry = $.informationSchemaStatsExpiry;
        this.innodbFtMinTokenSize = $.innodbFtMinTokenSize;
        this.innodbFtServerStopwordTable = $.innodbFtServerStopwordTable;
        this.innodbLockWaitTimeout = $.innodbLockWaitTimeout;
        this.innodbLogBufferSize = $.innodbLogBufferSize;
        this.innodbOnlineAlterLogMaxSize = $.innodbOnlineAlterLogMaxSize;
        this.innodbPrintAllDeadlocks = $.innodbPrintAllDeadlocks;
        this.innodbRollbackOnTimeout = $.innodbRollbackOnTimeout;
        this.interactiveTimeout = $.interactiveTimeout;
        this.internalTmpMemStorageEngine = $.internalTmpMemStorageEngine;
        this.longQueryTime = $.longQueryTime;
        this.maxAllowedPacket = $.maxAllowedPacket;
        this.maxHeapTableSize = $.maxHeapTableSize;
        this.netReadTimeout = $.netReadTimeout;
        this.netWriteTimeout = $.netWriteTimeout;
        this.slowQueryLog = $.slowQueryLog;
        this.sortBufferSize = $.sortBufferSize;
        this.sqlMode = $.sqlMode;
        this.sqlRequirePrimaryKey = $.sqlRequirePrimaryKey;
        this.tmpTableSize = $.tmpTableSize;
        this.waitTimeout = $.waitTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseMysqlConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseMysqlConfigState $;

        public Builder() {
            $ = new DatabaseMysqlConfigState();
        }

        public Builder(DatabaseMysqlConfigState defaults) {
            $ = new DatabaseMysqlConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(@Nullable Output<Integer> backupHour) {
            $.backupHour = backupHour;
            return this;
        }

        /**
         * @param backupHour The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupHour(Integer backupHour) {
            return backupHour(Output.of(backupHour));
        }

        /**
         * @param backupMinute The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(@Nullable Output<Integer> backupMinute) {
            $.backupMinute = backupMinute;
            return this;
        }

        /**
         * @param backupMinute The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
         * 
         * @return builder
         * 
         */
        public Builder backupMinute(Integer backupMinute) {
            return backupMinute(Output.of(backupMinute));
        }

        /**
         * @param binlogRetentionPeriod The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
         * 
         * @return builder
         * 
         */
        public Builder binlogRetentionPeriod(@Nullable Output<Integer> binlogRetentionPeriod) {
            $.binlogRetentionPeriod = binlogRetentionPeriod;
            return this;
        }

        /**
         * @param binlogRetentionPeriod The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
         * 
         * @return builder
         * 
         */
        public Builder binlogRetentionPeriod(Integer binlogRetentionPeriod) {
            return binlogRetentionPeriod(Output.of(binlogRetentionPeriod));
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(@Nullable Output<Integer> connectTimeout) {
            $.connectTimeout = connectTimeout;
            return this;
        }

        /**
         * @param connectTimeout The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
         * 
         * @return builder
         * 
         */
        public Builder connectTimeout(Integer connectTimeout) {
            return connectTimeout(Output.of(connectTimeout));
        }

        /**
         * @param defaultTimeZone Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
         * 
         * @return builder
         * 
         */
        public Builder defaultTimeZone(@Nullable Output<String> defaultTimeZone) {
            $.defaultTimeZone = defaultTimeZone;
            return this;
        }

        /**
         * @param defaultTimeZone Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
         * 
         * @return builder
         * 
         */
        public Builder defaultTimeZone(String defaultTimeZone) {
            return defaultTimeZone(Output.of(defaultTimeZone));
        }

        /**
         * @param groupConcatMaxLen The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(@Nullable Output<Integer> groupConcatMaxLen) {
            $.groupConcatMaxLen = groupConcatMaxLen;
            return this;
        }

        /**
         * @param groupConcatMaxLen The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
         * 
         * @return builder
         * 
         */
        public Builder groupConcatMaxLen(Integer groupConcatMaxLen) {
            return groupConcatMaxLen(Output.of(groupConcatMaxLen));
        }

        /**
         * @param informationSchemaStatsExpiry The time, in seconds, before cached statistics expire.
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(@Nullable Output<Integer> informationSchemaStatsExpiry) {
            $.informationSchemaStatsExpiry = informationSchemaStatsExpiry;
            return this;
        }

        /**
         * @param informationSchemaStatsExpiry The time, in seconds, before cached statistics expire.
         * 
         * @return builder
         * 
         */
        public Builder informationSchemaStatsExpiry(Integer informationSchemaStatsExpiry) {
            return informationSchemaStatsExpiry(Output.of(informationSchemaStatsExpiry));
        }

        /**
         * @param innodbFtMinTokenSize The minimum length of words that an InnoDB FULLTEXT index stores.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(@Nullable Output<Integer> innodbFtMinTokenSize) {
            $.innodbFtMinTokenSize = innodbFtMinTokenSize;
            return this;
        }

        /**
         * @param innodbFtMinTokenSize The minimum length of words that an InnoDB FULLTEXT index stores.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtMinTokenSize(Integer innodbFtMinTokenSize) {
            return innodbFtMinTokenSize(Output.of(innodbFtMinTokenSize));
        }

        /**
         * @param innodbFtServerStopwordTable The InnoDB FULLTEXT index stopword list for all InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(@Nullable Output<String> innodbFtServerStopwordTable) {
            $.innodbFtServerStopwordTable = innodbFtServerStopwordTable;
            return this;
        }

        /**
         * @param innodbFtServerStopwordTable The InnoDB FULLTEXT index stopword list for all InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbFtServerStopwordTable(String innodbFtServerStopwordTable) {
            return innodbFtServerStopwordTable(Output.of(innodbFtServerStopwordTable));
        }

        /**
         * @param innodbLockWaitTimeout The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(@Nullable Output<Integer> innodbLockWaitTimeout) {
            $.innodbLockWaitTimeout = innodbLockWaitTimeout;
            return this;
        }

        /**
         * @param innodbLockWaitTimeout The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
         * 
         * @return builder
         * 
         */
        public Builder innodbLockWaitTimeout(Integer innodbLockWaitTimeout) {
            return innodbLockWaitTimeout(Output.of(innodbLockWaitTimeout));
        }

        /**
         * @param innodbLogBufferSize The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
         * 
         * @return builder
         * 
         */
        public Builder innodbLogBufferSize(@Nullable Output<Integer> innodbLogBufferSize) {
            $.innodbLogBufferSize = innodbLogBufferSize;
            return this;
        }

        /**
         * @param innodbLogBufferSize The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
         * 
         * @return builder
         * 
         */
        public Builder innodbLogBufferSize(Integer innodbLogBufferSize) {
            return innodbLogBufferSize(Output.of(innodbLogBufferSize));
        }

        /**
         * @param innodbOnlineAlterLogMaxSize The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(@Nullable Output<Integer> innodbOnlineAlterLogMaxSize) {
            $.innodbOnlineAlterLogMaxSize = innodbOnlineAlterLogMaxSize;
            return this;
        }

        /**
         * @param innodbOnlineAlterLogMaxSize The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
         * 
         * @return builder
         * 
         */
        public Builder innodbOnlineAlterLogMaxSize(Integer innodbOnlineAlterLogMaxSize) {
            return innodbOnlineAlterLogMaxSize(Output.of(innodbOnlineAlterLogMaxSize));
        }

        /**
         * @param innodbPrintAllDeadlocks When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder innodbPrintAllDeadlocks(@Nullable Output<Boolean> innodbPrintAllDeadlocks) {
            $.innodbPrintAllDeadlocks = innodbPrintAllDeadlocks;
            return this;
        }

        /**
         * @param innodbPrintAllDeadlocks When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
         * 
         * @return builder
         * 
         */
        public Builder innodbPrintAllDeadlocks(Boolean innodbPrintAllDeadlocks) {
            return innodbPrintAllDeadlocks(Output.of(innodbPrintAllDeadlocks));
        }

        /**
         * @param innodbRollbackOnTimeout When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(@Nullable Output<Boolean> innodbRollbackOnTimeout) {
            $.innodbRollbackOnTimeout = innodbRollbackOnTimeout;
            return this;
        }

        /**
         * @param innodbRollbackOnTimeout When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
         * 
         * @return builder
         * 
         */
        public Builder innodbRollbackOnTimeout(Boolean innodbRollbackOnTimeout) {
            return innodbRollbackOnTimeout(Output.of(innodbRollbackOnTimeout));
        }

        /**
         * @param interactiveTimeout The time, in seconds, the server waits for activity on an interactive. connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(@Nullable Output<Integer> interactiveTimeout) {
            $.interactiveTimeout = interactiveTimeout;
            return this;
        }

        /**
         * @param interactiveTimeout The time, in seconds, the server waits for activity on an interactive. connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder interactiveTimeout(Integer interactiveTimeout) {
            return interactiveTimeout(Output.of(interactiveTimeout));
        }

        /**
         * @param internalTmpMemStorageEngine The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
         * 
         * @return builder
         * 
         */
        public Builder internalTmpMemStorageEngine(@Nullable Output<String> internalTmpMemStorageEngine) {
            $.internalTmpMemStorageEngine = internalTmpMemStorageEngine;
            return this;
        }

        /**
         * @param internalTmpMemStorageEngine The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
         * 
         * @return builder
         * 
         */
        public Builder internalTmpMemStorageEngine(String internalTmpMemStorageEngine) {
            return internalTmpMemStorageEngine(Output.of(internalTmpMemStorageEngine));
        }

        /**
         * @param longQueryTime The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(@Nullable Output<Double> longQueryTime) {
            $.longQueryTime = longQueryTime;
            return this;
        }

        /**
         * @param longQueryTime The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
         * 
         * @return builder
         * 
         */
        public Builder longQueryTime(Double longQueryTime) {
            return longQueryTime(Output.of(longQueryTime));
        }

        /**
         * @param maxAllowedPacket The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(@Nullable Output<Integer> maxAllowedPacket) {
            $.maxAllowedPacket = maxAllowedPacket;
            return this;
        }

        /**
         * @param maxAllowedPacket The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
         * 
         * @return builder
         * 
         */
        public Builder maxAllowedPacket(Integer maxAllowedPacket) {
            return maxAllowedPacket(Output.of(maxAllowedPacket));
        }

        /**
         * @param maxHeapTableSize The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(@Nullable Output<Integer> maxHeapTableSize) {
            $.maxHeapTableSize = maxHeapTableSize;
            return this;
        }

        /**
         * @param maxHeapTableSize The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
         * 
         * @return builder
         * 
         */
        public Builder maxHeapTableSize(Integer maxHeapTableSize) {
            return maxHeapTableSize(Output.of(maxHeapTableSize));
        }

        /**
         * @param netReadTimeout The time, in seconds, to wait for more data from an existing connection. aborting the read.
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(@Nullable Output<Integer> netReadTimeout) {
            $.netReadTimeout = netReadTimeout;
            return this;
        }

        /**
         * @param netReadTimeout The time, in seconds, to wait for more data from an existing connection. aborting the read.
         * 
         * @return builder
         * 
         */
        public Builder netReadTimeout(Integer netReadTimeout) {
            return netReadTimeout(Output.of(netReadTimeout));
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(@Nullable Output<Integer> netWriteTimeout) {
            $.netWriteTimeout = netWriteTimeout;
            return this;
        }

        /**
         * @param netWriteTimeout The number of seconds to wait for a block to be written to a connection before aborting the write.
         * 
         * @return builder
         * 
         */
        public Builder netWriteTimeout(Integer netWriteTimeout) {
            return netWriteTimeout(Output.of(netWriteTimeout));
        }

        /**
         * @param slowQueryLog When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder slowQueryLog(@Nullable Output<Boolean> slowQueryLog) {
            $.slowQueryLog = slowQueryLog;
            return this;
        }

        /**
         * @param slowQueryLog When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder slowQueryLog(Boolean slowQueryLog) {
            return slowQueryLog(Output.of(slowQueryLog));
        }

        /**
         * @param sortBufferSize The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(@Nullable Output<Integer> sortBufferSize) {
            $.sortBufferSize = sortBufferSize;
            return this;
        }

        /**
         * @param sortBufferSize The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
         * 
         * @return builder
         * 
         */
        public Builder sortBufferSize(Integer sortBufferSize) {
            return sortBufferSize(Output.of(sortBufferSize));
        }

        /**
         * @param sqlMode Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        /**
         * @param sqlMode Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        /**
         * @param sqlRequirePrimaryKey Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(@Nullable Output<Boolean> sqlRequirePrimaryKey) {
            $.sqlRequirePrimaryKey = sqlRequirePrimaryKey;
            return this;
        }

        /**
         * @param sqlRequirePrimaryKey Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
         * 
         * @return builder
         * 
         */
        public Builder sqlRequirePrimaryKey(Boolean sqlRequirePrimaryKey) {
            return sqlRequirePrimaryKey(Output.of(sqlRequirePrimaryKey));
        }

        /**
         * @param tmpTableSize The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(@Nullable Output<Integer> tmpTableSize) {
            $.tmpTableSize = tmpTableSize;
            return this;
        }

        /**
         * @param tmpTableSize The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
         * 
         * @return builder
         * 
         */
        public Builder tmpTableSize(Integer tmpTableSize) {
            return tmpTableSize(Output.of(tmpTableSize));
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(@Nullable Output<Integer> waitTimeout) {
            $.waitTimeout = waitTimeout;
            return this;
        }

        /**
         * @param waitTimeout The number of seconds the server waits for activity on a noninteractive connection before closing it.
         * 
         * @return builder
         * 
         */
        public Builder waitTimeout(Integer waitTimeout) {
            return waitTimeout(Output.of(waitTimeout));
        }

        public DatabaseMysqlConfigState build() {
            return $;
        }
    }

}
