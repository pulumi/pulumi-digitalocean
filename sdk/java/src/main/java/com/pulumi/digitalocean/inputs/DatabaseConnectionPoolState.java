// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseConnectionPoolState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseConnectionPoolState Empty = new DatabaseConnectionPoolState();

    /**
     * The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The database for use with the connection pool.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return The database for use with the connection pool.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * The hostname used to connect to the database connection pool.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The hostname used to connect to the database connection pool.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name for the database connection pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the database connection pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Password for the connection pool&#39;s user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password for the connection pool&#39;s user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Network port that the database connection pool is listening on.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return Network port that the database connection pool is listening on.
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Same as `host`, but only accessible from resources within the account and in the same region.
     * 
     */
    @Import(name="privateHost")
    private @Nullable Output<String> privateHost;

    /**
     * @return Same as `host`, but only accessible from resources within the account and in the same region.
     * 
     */
    public Optional<Output<String>> privateHost() {
        return Optional.ofNullable(this.privateHost);
    }

    /**
     * Same as `uri`, but only accessible from resources within the account and in the same region.
     * 
     */
    @Import(name="privateUri")
    private @Nullable Output<String> privateUri;

    /**
     * @return Same as `uri`, but only accessible from resources within the account and in the same region.
     * 
     */
    public Optional<Output<String>> privateUri() {
        return Optional.ofNullable(this.privateUri);
    }

    /**
     * The desired size of the PGBouncer connection pool.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The desired size of the PGBouncer connection pool.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The full URI for connecting to the database connection pool.
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return The full URI for connecting to the database connection pool.
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private DatabaseConnectionPoolState() {}

    private DatabaseConnectionPoolState(DatabaseConnectionPoolState $) {
        this.clusterId = $.clusterId;
        this.dbName = $.dbName;
        this.host = $.host;
        this.mode = $.mode;
        this.name = $.name;
        this.password = $.password;
        this.port = $.port;
        this.privateHost = $.privateHost;
        this.privateUri = $.privateUri;
        this.size = $.size;
        this.uri = $.uri;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseConnectionPoolState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseConnectionPoolState $;

        public Builder() {
            $ = new DatabaseConnectionPoolState();
        }

        public Builder(DatabaseConnectionPoolState defaults) {
            $ = new DatabaseConnectionPoolState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the source database cluster. Note: This must be a PostgreSQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param dbName The database for use with the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The database for use with the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param host The hostname used to connect to the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The hostname used to connect to the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param mode The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name for the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password Password for the connection pool&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password for the connection pool&#39;s user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port Network port that the database connection pool is listening on.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Network port that the database connection pool is listening on.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateHost Same as `host`, but only accessible from resources within the account and in the same region.
         * 
         * @return builder
         * 
         */
        public Builder privateHost(@Nullable Output<String> privateHost) {
            $.privateHost = privateHost;
            return this;
        }

        /**
         * @param privateHost Same as `host`, but only accessible from resources within the account and in the same region.
         * 
         * @return builder
         * 
         */
        public Builder privateHost(String privateHost) {
            return privateHost(Output.of(privateHost));
        }

        /**
         * @param privateUri Same as `uri`, but only accessible from resources within the account and in the same region.
         * 
         * @return builder
         * 
         */
        public Builder privateUri(@Nullable Output<String> privateUri) {
            $.privateUri = privateUri;
            return this;
        }

        /**
         * @param privateUri Same as `uri`, but only accessible from resources within the account and in the same region.
         * 
         * @return builder
         * 
         */
        public Builder privateUri(String privateUri) {
            return privateUri(Output.of(privateUri));
        }

        /**
         * @param size The desired size of the PGBouncer connection pool.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The desired size of the PGBouncer connection pool.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param uri The full URI for connecting to the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri The full URI for connecting to the database connection pool.
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        /**
         * @param user The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The name of the database user for use with the connection pool. When excluded, all sessions connect to the database as the inbound user.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public DatabaseConnectionPoolState build() {
            return $;
        }
    }

}
