// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGenaiKnowledgeBasesKnowledgeBase {
    /**
     * @return Timestamp when the Knowledge Base was added to the Agent
     * 
     */
    private String addedToAgentAt;
    /**
     * @return Created At timestamp for the Knowledge Base
     * 
     */
    private String createdAt;
    /**
     * @return Database ID of the Knowledge Base
     * 
     */
    private String databaseId;
    /**
     * @return Embedding model UUID for the Knowledge Base
     * 
     */
    private String embeddingModelUuid;
    /**
     * @return Indicates if the Knowledge Base is public
     * 
     */
    private Boolean isPublic;
    /**
     * @return Last indexing job for the Knowledge Base
     * 
     */
    private List<GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob> lastIndexingJobs;
    /**
     * @return Name of the Knowledge Base
     * 
     */
    private String name;
    /**
     * @return Project ID of the Knowledge Base
     * 
     */
    private String projectId;
    /**
     * @return Region of the Knowledge Base
     * 
     */
    private String region;
    /**
     * @return List of tags
     * 
     */
    private List<String> tags;
    /**
     * @return Timestamp when the Knowledge Base was updated
     * 
     */
    private String updatedAt;
    /**
     * @return User ID of the Knowledge Base
     * 
     */
    private String userId;
    /**
     * @return UUID of the Knowledge Base
     * 
     */
    private String uuid;

    private GetGenaiKnowledgeBasesKnowledgeBase() {}
    /**
     * @return Timestamp when the Knowledge Base was added to the Agent
     * 
     */
    public String addedToAgentAt() {
        return this.addedToAgentAt;
    }
    /**
     * @return Created At timestamp for the Knowledge Base
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Database ID of the Knowledge Base
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return Embedding model UUID for the Knowledge Base
     * 
     */
    public String embeddingModelUuid() {
        return this.embeddingModelUuid;
    }
    /**
     * @return Indicates if the Knowledge Base is public
     * 
     */
    public Boolean isPublic() {
        return this.isPublic;
    }
    /**
     * @return Last indexing job for the Knowledge Base
     * 
     */
    public List<GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob> lastIndexingJobs() {
        return this.lastIndexingJobs;
    }
    /**
     * @return Name of the Knowledge Base
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Project ID of the Knowledge Base
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Region of the Knowledge Base
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return List of tags
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Timestamp when the Knowledge Base was updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return User ID of the Knowledge Base
     * 
     */
    public String userId() {
        return this.userId;
    }
    /**
     * @return UUID of the Knowledge Base
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGenaiKnowledgeBasesKnowledgeBase defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addedToAgentAt;
        private String createdAt;
        private String databaseId;
        private String embeddingModelUuid;
        private Boolean isPublic;
        private List<GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob> lastIndexingJobs;
        private String name;
        private String projectId;
        private String region;
        private List<String> tags;
        private String updatedAt;
        private String userId;
        private String uuid;
        public Builder() {}
        public Builder(GetGenaiKnowledgeBasesKnowledgeBase defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addedToAgentAt = defaults.addedToAgentAt;
    	      this.createdAt = defaults.createdAt;
    	      this.databaseId = defaults.databaseId;
    	      this.embeddingModelUuid = defaults.embeddingModelUuid;
    	      this.isPublic = defaults.isPublic;
    	      this.lastIndexingJobs = defaults.lastIndexingJobs;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.userId = defaults.userId;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder addedToAgentAt(String addedToAgentAt) {
            if (addedToAgentAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "addedToAgentAt");
            }
            this.addedToAgentAt = addedToAgentAt;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder embeddingModelUuid(String embeddingModelUuid) {
            if (embeddingModelUuid == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "embeddingModelUuid");
            }
            this.embeddingModelUuid = embeddingModelUuid;
            return this;
        }
        @CustomType.Setter
        public Builder isPublic(Boolean isPublic) {
            if (isPublic == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "isPublic");
            }
            this.isPublic = isPublic;
            return this;
        }
        @CustomType.Setter
        public Builder lastIndexingJobs(List<GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob> lastIndexingJobs) {
            if (lastIndexingJobs == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "lastIndexingJobs");
            }
            this.lastIndexingJobs = lastIndexingJobs;
            return this;
        }
        public Builder lastIndexingJobs(GetGenaiKnowledgeBasesKnowledgeBaseLastIndexingJob... lastIndexingJobs) {
            return lastIndexingJobs(List.of(lastIndexingJobs));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "userId");
            }
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetGenaiKnowledgeBasesKnowledgeBase", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetGenaiKnowledgeBasesKnowledgeBase build() {
            final var _resultValue = new GetGenaiKnowledgeBasesKnowledgeBase();
            _resultValue.addedToAgentAt = addedToAgentAt;
            _resultValue.createdAt = createdAt;
            _resultValue.databaseId = databaseId;
            _resultValue.embeddingModelUuid = embeddingModelUuid;
            _resultValue.isPublic = isPublic;
            _resultValue.lastIndexingJobs = lastIndexingJobs;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.tags = tags;
            _resultValue.updatedAt = updatedAt;
            _resultValue.userId = userId;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
