// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetDropletAutoscaleConfig {
    /**
     * @return Cooldown duration
     * 
     */
    private Integer cooldownMinutes;
    /**
     * @return Max number of members
     * 
     */
    private Integer maxInstances;
    /**
     * @return Min number of members
     * 
     */
    private Integer minInstances;
    /**
     * @return CPU target threshold
     * 
     */
    private Double targetCpuUtilization;
    /**
     * @return Memory target threshold
     * 
     */
    private Double targetMemoryUtilization;
    /**
     * @return Target number of members
     * 
     */
    private Integer targetNumberInstances;

    private GetDropletAutoscaleConfig() {}
    /**
     * @return Cooldown duration
     * 
     */
    public Integer cooldownMinutes() {
        return this.cooldownMinutes;
    }
    /**
     * @return Max number of members
     * 
     */
    public Integer maxInstances() {
        return this.maxInstances;
    }
    /**
     * @return Min number of members
     * 
     */
    public Integer minInstances() {
        return this.minInstances;
    }
    /**
     * @return CPU target threshold
     * 
     */
    public Double targetCpuUtilization() {
        return this.targetCpuUtilization;
    }
    /**
     * @return Memory target threshold
     * 
     */
    public Double targetMemoryUtilization() {
        return this.targetMemoryUtilization;
    }
    /**
     * @return Target number of members
     * 
     */
    public Integer targetNumberInstances() {
        return this.targetNumberInstances;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDropletAutoscaleConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cooldownMinutes;
        private Integer maxInstances;
        private Integer minInstances;
        private Double targetCpuUtilization;
        private Double targetMemoryUtilization;
        private Integer targetNumberInstances;
        public Builder() {}
        public Builder(GetDropletAutoscaleConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cooldownMinutes = defaults.cooldownMinutes;
    	      this.maxInstances = defaults.maxInstances;
    	      this.minInstances = defaults.minInstances;
    	      this.targetCpuUtilization = defaults.targetCpuUtilization;
    	      this.targetMemoryUtilization = defaults.targetMemoryUtilization;
    	      this.targetNumberInstances = defaults.targetNumberInstances;
        }

        @CustomType.Setter
        public Builder cooldownMinutes(Integer cooldownMinutes) {
            if (cooldownMinutes == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "cooldownMinutes");
            }
            this.cooldownMinutes = cooldownMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder maxInstances(Integer maxInstances) {
            if (maxInstances == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "maxInstances");
            }
            this.maxInstances = maxInstances;
            return this;
        }
        @CustomType.Setter
        public Builder minInstances(Integer minInstances) {
            if (minInstances == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "minInstances");
            }
            this.minInstances = minInstances;
            return this;
        }
        @CustomType.Setter
        public Builder targetCpuUtilization(Double targetCpuUtilization) {
            if (targetCpuUtilization == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "targetCpuUtilization");
            }
            this.targetCpuUtilization = targetCpuUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder targetMemoryUtilization(Double targetMemoryUtilization) {
            if (targetMemoryUtilization == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "targetMemoryUtilization");
            }
            this.targetMemoryUtilization = targetMemoryUtilization;
            return this;
        }
        @CustomType.Setter
        public Builder targetNumberInstances(Integer targetNumberInstances) {
            if (targetNumberInstances == null) {
              throw new MissingRequiredPropertyException("GetDropletAutoscaleConfig", "targetNumberInstances");
            }
            this.targetNumberInstances = targetNumberInstances;
            return this;
        }
        public GetDropletAutoscaleConfig build() {
            final var _resultValue = new GetDropletAutoscaleConfig();
            _resultValue.cooldownMinutes = cooldownMinutes;
            _resultValue.maxInstances = maxInstances;
            _resultValue.minInstances = minInstances;
            _resultValue.targetCpuUtilization = targetCpuUtilization;
            _resultValue.targetMemoryUtilization = targetMemoryUtilization;
            _resultValue.targetNumberInstances = targetNumberInstances;
            return _resultValue;
        }
    }
}
