// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSpecMaintenanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSpecMaintenanceArgs Empty = new AppSpecMaintenanceArgs();

    /**
     * Indicates whether the app should be archived. Setting this to true implies that enabled is set to true.
     * 
     */
    @Import(name="archive")
    private @Nullable Output<Boolean> archive;

    /**
     * @return Indicates whether the app should be archived. Setting this to true implies that enabled is set to true.
     * 
     */
    public Optional<Output<Boolean>> archive() {
        return Optional.ofNullable(this.archive);
    }

    /**
     * Indicates whether maintenance mode should be enabled for the app.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Indicates whether maintenance mode should be enabled for the app.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * A custom offline page to display when maintenance mode is enabled or the app is archived.
     * 
     */
    @Import(name="offlinePageUrl")
    private @Nullable Output<String> offlinePageUrl;

    /**
     * @return A custom offline page to display when maintenance mode is enabled or the app is archived.
     * 
     */
    public Optional<Output<String>> offlinePageUrl() {
        return Optional.ofNullable(this.offlinePageUrl);
    }

    private AppSpecMaintenanceArgs() {}

    private AppSpecMaintenanceArgs(AppSpecMaintenanceArgs $) {
        this.archive = $.archive;
        this.enabled = $.enabled;
        this.offlinePageUrl = $.offlinePageUrl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSpecMaintenanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSpecMaintenanceArgs $;

        public Builder() {
            $ = new AppSpecMaintenanceArgs();
        }

        public Builder(AppSpecMaintenanceArgs defaults) {
            $ = new AppSpecMaintenanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param archive Indicates whether the app should be archived. Setting this to true implies that enabled is set to true.
         * 
         * @return builder
         * 
         */
        public Builder archive(@Nullable Output<Boolean> archive) {
            $.archive = archive;
            return this;
        }

        /**
         * @param archive Indicates whether the app should be archived. Setting this to true implies that enabled is set to true.
         * 
         * @return builder
         * 
         */
        public Builder archive(Boolean archive) {
            return archive(Output.of(archive));
        }

        /**
         * @param enabled Indicates whether maintenance mode should be enabled for the app.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Indicates whether maintenance mode should be enabled for the app.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param offlinePageUrl A custom offline page to display when maintenance mode is enabled or the app is archived.
         * 
         * @return builder
         * 
         */
        public Builder offlinePageUrl(@Nullable Output<String> offlinePageUrl) {
            $.offlinePageUrl = offlinePageUrl;
            return this;
        }

        /**
         * @param offlinePageUrl A custom offline page to display when maintenance mode is enabled or the app is archived.
         * 
         * @return builder
         * 
         */
        public Builder offlinePageUrl(String offlinePageUrl) {
            return offlinePageUrl(Output.of(offlinePageUrl));
        }

        public AppSpecMaintenanceArgs build() {
            return $;
        }
    }

}
