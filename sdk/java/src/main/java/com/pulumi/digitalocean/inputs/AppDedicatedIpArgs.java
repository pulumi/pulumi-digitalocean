// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppDedicatedIpArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppDedicatedIpArgs Empty = new AppDedicatedIpArgs();

    /**
     * The ID of the app.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The ID of the app.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The IP address of the dedicated egress IP.
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The IP address of the dedicated egress IP.
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The status of the dedicated egress IP: &#39;UNKNOWN&#39;, &#39;ASSIGNING&#39;, &#39;ASSIGNED&#39;, or &#39;REMOVED&#39;
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the dedicated egress IP: &#39;UNKNOWN&#39;, &#39;ASSIGNING&#39;, &#39;ASSIGNED&#39;, or &#39;REMOVED&#39;
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private AppDedicatedIpArgs() {}

    private AppDedicatedIpArgs(AppDedicatedIpArgs $) {
        this.id = $.id;
        this.ip = $.ip;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppDedicatedIpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppDedicatedIpArgs $;

        public Builder() {
            $ = new AppDedicatedIpArgs();
        }

        public Builder(AppDedicatedIpArgs defaults) {
            $ = new AppDedicatedIpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param id The ID of the app.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the app.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ip The IP address of the dedicated egress IP.
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The IP address of the dedicated egress IP.
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param status The status of the dedicated egress IP: &#39;UNKNOWN&#39;, &#39;ASSIGNING&#39;, &#39;ASSIGNED&#39;, or &#39;REMOVED&#39;
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the dedicated egress IP: &#39;UNKNOWN&#39;, &#39;ASSIGNING&#39;, &#39;ASSIGNED&#39;, or &#39;REMOVED&#39;
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public AppDedicatedIpArgs build() {
            return $;
        }
    }

}
