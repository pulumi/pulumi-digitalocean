// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LoadBalancerForwardingRule {
    /**
     * @return **Deprecated** The ID of the TLS certificate to be used for SSL termination.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    private @Nullable String certificateId;
    /**
     * @return The unique name of the TLS certificate to be used for SSL termination.
     * 
     */
    private @Nullable String certificateName;
    /**
     * @return An integer representing the port on which the Load Balancer instance will listen.
     * 
     */
    private Integer entryPort;
    /**
     * @return The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
     * 
     */
    private String entryProtocol;
    /**
     * @return An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
     * 
     */
    private Integer targetPort;
    /**
     * @return The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
     * 
     */
    private String targetProtocol;
    /**
     * @return A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
     * 
     */
    private @Nullable Boolean tlsPassthrough;

    private LoadBalancerForwardingRule() {}
    /**
     * @return **Deprecated** The ID of the TLS certificate to be used for SSL termination.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return The unique name of the TLS certificate to be used for SSL termination.
     * 
     */
    public Optional<String> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }
    /**
     * @return An integer representing the port on which the Load Balancer instance will listen.
     * 
     */
    public Integer entryPort() {
        return this.entryPort;
    }
    /**
     * @return The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
     * 
     */
    public String entryProtocol() {
        return this.entryProtocol;
    }
    /**
     * @return An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
     * 
     */
    public Integer targetPort() {
        return this.targetPort;
    }
    /**
     * @return The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
     * 
     */
    public String targetProtocol() {
        return this.targetProtocol;
    }
    /**
     * @return A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
     * 
     */
    public Optional<Boolean> tlsPassthrough() {
        return Optional.ofNullable(this.tlsPassthrough);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LoadBalancerForwardingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certificateId;
        private @Nullable String certificateName;
        private Integer entryPort;
        private String entryProtocol;
        private Integer targetPort;
        private String targetProtocol;
        private @Nullable Boolean tlsPassthrough;
        public Builder() {}
        public Builder(LoadBalancerForwardingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.certificateName = defaults.certificateName;
    	      this.entryPort = defaults.entryPort;
    	      this.entryProtocol = defaults.entryProtocol;
    	      this.targetPort = defaults.targetPort;
    	      this.targetProtocol = defaults.targetProtocol;
    	      this.tlsPassthrough = defaults.tlsPassthrough;
        }

        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(@Nullable String certificateName) {
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder entryPort(Integer entryPort) {
            this.entryPort = Objects.requireNonNull(entryPort);
            return this;
        }
        @CustomType.Setter
        public Builder entryProtocol(String entryProtocol) {
            this.entryProtocol = Objects.requireNonNull(entryProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder targetPort(Integer targetPort) {
            this.targetPort = Objects.requireNonNull(targetPort);
            return this;
        }
        @CustomType.Setter
        public Builder targetProtocol(String targetProtocol) {
            this.targetProtocol = Objects.requireNonNull(targetProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder tlsPassthrough(@Nullable Boolean tlsPassthrough) {
            this.tlsPassthrough = tlsPassthrough;
            return this;
        }
        public LoadBalancerForwardingRule build() {
            final var _resultValue = new LoadBalancerForwardingRule();
            _resultValue.certificateId = certificateId;
            _resultValue.certificateName = certificateName;
            _resultValue.entryPort = entryPort;
            _resultValue.entryProtocol = entryProtocol;
            _resultValue.targetPort = targetPort;
            _resultValue.targetProtocol = targetProtocol;
            _resultValue.tlsPassthrough = tlsPassthrough;
            return _resultValue;
        }
    }
}
