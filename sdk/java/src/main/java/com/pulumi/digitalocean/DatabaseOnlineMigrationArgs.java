// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.DatabaseOnlineMigrationSourceArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseOnlineMigrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseOnlineMigrationArgs Empty = new DatabaseOnlineMigrationArgs();

    /**
     * The ID of the target MySQL cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The ID of the target MySQL cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * When set to true, enables SSL encryption when connecting to the source database.
     * 
     */
    @Import(name="disableSsl")
    private @Nullable Output<Boolean> disableSsl;

    /**
     * @return When set to true, enables SSL encryption when connecting to the source database.
     * 
     */
    public Optional<Output<Boolean>> disableSsl() {
        return Optional.ofNullable(this.disableSsl);
    }

    /**
     * A list of databases that should be ignored during migration.
     * 
     */
    @Import(name="ignoreDbs")
    private @Nullable Output<List<String>> ignoreDbs;

    /**
     * @return A list of databases that should be ignored during migration.
     * 
     */
    public Optional<Output<List<String>>> ignoreDbs() {
        return Optional.ofNullable(this.ignoreDbs);
    }

    /**
     * Configuration for migration
     * 
     */
    @Import(name="source", required=true)
    private Output<DatabaseOnlineMigrationSourceArgs> source;

    /**
     * @return Configuration for migration
     * 
     */
    public Output<DatabaseOnlineMigrationSourceArgs> source() {
        return this.source;
    }

    private DatabaseOnlineMigrationArgs() {}

    private DatabaseOnlineMigrationArgs(DatabaseOnlineMigrationArgs $) {
        this.clusterId = $.clusterId;
        this.disableSsl = $.disableSsl;
        this.ignoreDbs = $.ignoreDbs;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseOnlineMigrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseOnlineMigrationArgs $;

        public Builder() {
            $ = new DatabaseOnlineMigrationArgs();
        }

        public Builder(DatabaseOnlineMigrationArgs defaults) {
            $ = new DatabaseOnlineMigrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param disableSsl When set to true, enables SSL encryption when connecting to the source database.
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(@Nullable Output<Boolean> disableSsl) {
            $.disableSsl = disableSsl;
            return this;
        }

        /**
         * @param disableSsl When set to true, enables SSL encryption when connecting to the source database.
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(Boolean disableSsl) {
            return disableSsl(Output.of(disableSsl));
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(@Nullable Output<List<String>> ignoreDbs) {
            $.ignoreDbs = ignoreDbs;
            return this;
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(List<String> ignoreDbs) {
            return ignoreDbs(Output.of(ignoreDbs));
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(String... ignoreDbs) {
            return ignoreDbs(List.of(ignoreDbs));
        }

        /**
         * @param source Configuration for migration
         * 
         * @return builder
         * 
         */
        public Builder source(Output<DatabaseOnlineMigrationSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Configuration for migration
         * 
         * @return builder
         * 
         */
        public Builder source(DatabaseOnlineMigrationSourceArgs source) {
            return source(Output.of(source));
        }

        public DatabaseOnlineMigrationArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationArgs", "clusterId");
            }
            if ($.source == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationArgs", "source");
            }
            return $;
        }
    }

}
