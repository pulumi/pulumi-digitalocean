// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerDomain {
    /**
     * @return certificate ID for TLS handshaking
     * 
     */
    private String certificateId;
    /**
     * @return name of certificate required for TLS handshaking
     * 
     */
    private String certificateName;
    /**
     * @return flag indicating if domain is managed by DigitalOcean
     * 
     */
    private Boolean isManaged;
    /**
     * @return The name of load balancer.
     * 
     */
    private String name;
    /**
     * @return list of domain SSL validation errors
     * 
     */
    private List<String> sslValidationErrorReasons;
    /**
     * @return list of domain verification errors
     * 
     */
    private List<String> verificationErrorReasons;

    private GetLoadBalancerDomain() {}
    /**
     * @return certificate ID for TLS handshaking
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return name of certificate required for TLS handshaking
     * 
     */
    public String certificateName() {
        return this.certificateName;
    }
    /**
     * @return flag indicating if domain is managed by DigitalOcean
     * 
     */
    public Boolean isManaged() {
        return this.isManaged;
    }
    /**
     * @return The name of load balancer.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return list of domain SSL validation errors
     * 
     */
    public List<String> sslValidationErrorReasons() {
        return this.sslValidationErrorReasons;
    }
    /**
     * @return list of domain verification errors
     * 
     */
    public List<String> verificationErrorReasons() {
        return this.verificationErrorReasons;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerDomain defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateId;
        private String certificateName;
        private Boolean isManaged;
        private String name;
        private List<String> sslValidationErrorReasons;
        private List<String> verificationErrorReasons;
        public Builder() {}
        public Builder(GetLoadBalancerDomain defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.certificateName = defaults.certificateName;
    	      this.isManaged = defaults.isManaged;
    	      this.name = defaults.name;
    	      this.sslValidationErrorReasons = defaults.sslValidationErrorReasons;
    	      this.verificationErrorReasons = defaults.verificationErrorReasons;
        }

        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(String certificateName) {
            if (certificateName == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "certificateName");
            }
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder isManaged(Boolean isManaged) {
            if (isManaged == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "isManaged");
            }
            this.isManaged = isManaged;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sslValidationErrorReasons(List<String> sslValidationErrorReasons) {
            if (sslValidationErrorReasons == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "sslValidationErrorReasons");
            }
            this.sslValidationErrorReasons = sslValidationErrorReasons;
            return this;
        }
        public Builder sslValidationErrorReasons(String... sslValidationErrorReasons) {
            return sslValidationErrorReasons(List.of(sslValidationErrorReasons));
        }
        @CustomType.Setter
        public Builder verificationErrorReasons(List<String> verificationErrorReasons) {
            if (verificationErrorReasons == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerDomain", "verificationErrorReasons");
            }
            this.verificationErrorReasons = verificationErrorReasons;
            return this;
        }
        public Builder verificationErrorReasons(String... verificationErrorReasons) {
            return verificationErrorReasons(List.of(verificationErrorReasons));
        }
        public GetLoadBalancerDomain build() {
            final var _resultValue = new GetLoadBalancerDomain();
            _resultValue.certificateId = certificateId;
            _resultValue.certificateName = certificateName;
            _resultValue.isManaged = isManaged;
            _resultValue.name = name;
            _resultValue.sslValidationErrorReasons = sslValidationErrorReasons;
            _resultValue.verificationErrorReasons = verificationErrorReasons;
            return _resultValue;
        }
    }
}
