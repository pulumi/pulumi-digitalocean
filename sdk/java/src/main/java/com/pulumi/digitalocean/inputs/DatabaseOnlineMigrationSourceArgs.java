// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class DatabaseOnlineMigrationSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseOnlineMigrationSourceArgs Empty = new DatabaseOnlineMigrationSourceArgs();

    /**
     * The name of the default database
     * 
     */
    @Import(name="dbName", required=true)
    private Output<String> dbName;

    /**
     * @return The name of the default database
     * 
     */
    public Output<String> dbName() {
        return this.dbName;
    }

    /**
     * The FQDN pointing to the database cluster&#39;s current primary node.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The FQDN pointing to the database cluster&#39;s current primary node.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * A randomly generated password for the default user.
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return A randomly generated password for the default user.
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * The port on which the database cluster is listening.
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port on which the database cluster is listening.
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The default user for the database.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The default user for the database.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private DatabaseOnlineMigrationSourceArgs() {}

    private DatabaseOnlineMigrationSourceArgs(DatabaseOnlineMigrationSourceArgs $) {
        this.dbName = $.dbName;
        this.host = $.host;
        this.password = $.password;
        this.port = $.port;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseOnlineMigrationSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseOnlineMigrationSourceArgs $;

        public Builder() {
            $ = new DatabaseOnlineMigrationSourceArgs();
        }

        public Builder(DatabaseOnlineMigrationSourceArgs defaults) {
            $ = new DatabaseOnlineMigrationSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dbName The name of the default database
         * 
         * @return builder
         * 
         */
        public Builder dbName(Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The name of the default database
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param host The FQDN pointing to the database cluster&#39;s current primary node.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The FQDN pointing to the database cluster&#39;s current primary node.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password A randomly generated password for the default user.
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password A randomly generated password for the default user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port The port on which the database cluster is listening.
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port on which the database cluster is listening.
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param username The default user for the database.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The default user for the database.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public DatabaseOnlineMigrationSourceArgs build() {
            if ($.dbName == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSourceArgs", "dbName");
            }
            if ($.host == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSourceArgs", "host");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSourceArgs", "password");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSourceArgs", "port");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSourceArgs", "username");
            }
            return $;
        }
    }

}
