// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerForwardingRule {
    /**
     * @return the id of the tls certificate used for ssl termination if enabled
     * 
     */
    private String certificateId;
    /**
     * @return the name of the tls certificate used for ssl termination if enabled
     * 
     */
    private String certificateName;
    /**
     * @return the port on which the load balancer instance will listen
     * 
     */
    private Integer entryPort;
    /**
     * @return the protocol used for traffic to the load balancer
     * 
     */
    private String entryProtocol;
    /**
     * @return the port on the backend Droplets to which the load balancer will send traffic
     * 
     */
    private Integer targetPort;
    /**
     * @return the protocol used for traffic to the backend droplets
     * 
     */
    private String targetProtocol;
    /**
     * @return whether ssl encrypted traffic will be passed through to the backend droplets
     * 
     */
    private Boolean tlsPassthrough;

    private GetLoadBalancerForwardingRule() {}
    /**
     * @return the id of the tls certificate used for ssl termination if enabled
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return the name of the tls certificate used for ssl termination if enabled
     * 
     */
    public String certificateName() {
        return this.certificateName;
    }
    /**
     * @return the port on which the load balancer instance will listen
     * 
     */
    public Integer entryPort() {
        return this.entryPort;
    }
    /**
     * @return the protocol used for traffic to the load balancer
     * 
     */
    public String entryProtocol() {
        return this.entryProtocol;
    }
    /**
     * @return the port on the backend Droplets to which the load balancer will send traffic
     * 
     */
    public Integer targetPort() {
        return this.targetPort;
    }
    /**
     * @return the protocol used for traffic to the backend droplets
     * 
     */
    public String targetProtocol() {
        return this.targetProtocol;
    }
    /**
     * @return whether ssl encrypted traffic will be passed through to the backend droplets
     * 
     */
    public Boolean tlsPassthrough() {
        return this.tlsPassthrough;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerForwardingRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateId;
        private String certificateName;
        private Integer entryPort;
        private String entryProtocol;
        private Integer targetPort;
        private String targetProtocol;
        private Boolean tlsPassthrough;
        public Builder() {}
        public Builder(GetLoadBalancerForwardingRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.certificateName = defaults.certificateName;
    	      this.entryPort = defaults.entryPort;
    	      this.entryProtocol = defaults.entryProtocol;
    	      this.targetPort = defaults.targetPort;
    	      this.targetProtocol = defaults.targetProtocol;
    	      this.tlsPassthrough = defaults.tlsPassthrough;
        }

        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(String certificateName) {
            if (certificateName == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "certificateName");
            }
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder entryPort(Integer entryPort) {
            if (entryPort == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "entryPort");
            }
            this.entryPort = entryPort;
            return this;
        }
        @CustomType.Setter
        public Builder entryProtocol(String entryProtocol) {
            if (entryProtocol == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "entryProtocol");
            }
            this.entryProtocol = entryProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder targetPort(Integer targetPort) {
            if (targetPort == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "targetPort");
            }
            this.targetPort = targetPort;
            return this;
        }
        @CustomType.Setter
        public Builder targetProtocol(String targetProtocol) {
            if (targetProtocol == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "targetProtocol");
            }
            this.targetProtocol = targetProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder tlsPassthrough(Boolean tlsPassthrough) {
            if (tlsPassthrough == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerForwardingRule", "tlsPassthrough");
            }
            this.tlsPassthrough = tlsPassthrough;
            return this;
        }
        public GetLoadBalancerForwardingRule build() {
            final var _resultValue = new GetLoadBalancerForwardingRule();
            _resultValue.certificateId = certificateId;
            _resultValue.certificateName = certificateName;
            _resultValue.entryPort = entryPort;
            _resultValue.entryProtocol = entryProtocol;
            _resultValue.targetPort = targetPort;
            _resultValue.targetProtocol = targetProtocol;
            _resultValue.tlsPassthrough = tlsPassthrough;
            return _resultValue;
        }
    }
}
