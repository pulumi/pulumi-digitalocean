// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRecordResult {
    /**
     * @return Variable data depending on record type. For example, the &#34;data&#34; value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
     * 
     */
    private String data;
    private String domain;
    /**
     * @return An unsigned integer between 0-255 used for CAA records.
     * 
     */
    private Integer flags;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    /**
     * @return The port for SRV records.
     * 
     */
    private Integer port;
    /**
     * @return The priority for SRV and MX records.
     * 
     */
    private Integer priority;
    /**
     * @return The parameter tag for CAA records.
     * 
     */
    private String tag;
    /**
     * @return This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
     * 
     */
    private Integer ttl;
    /**
     * @return The type of the DNS record.
     * 
     */
    private String type;
    /**
     * @return The weight for SRV records.
     * 
     */
    private Integer weight;

    private GetRecordResult() {}
    /**
     * @return Variable data depending on record type. For example, the &#34;data&#34; value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
     * 
     */
    public String data() {
        return this.data;
    }
    public String domain() {
        return this.domain;
    }
    /**
     * @return An unsigned integer between 0-255 used for CAA records.
     * 
     */
    public Integer flags() {
        return this.flags;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The port for SRV records.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The priority for SRV and MX records.
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return The parameter tag for CAA records.
     * 
     */
    public String tag() {
        return this.tag;
    }
    /**
     * @return This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    /**
     * @return The type of the DNS record.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The weight for SRV records.
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRecordResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String data;
        private String domain;
        private Integer flags;
        private String id;
        private String name;
        private Integer port;
        private Integer priority;
        private String tag;
        private Integer ttl;
        private String type;
        private Integer weight;
        public Builder() {}
        public Builder(GetRecordResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.data = defaults.data;
    	      this.domain = defaults.domain;
    	      this.flags = defaults.flags;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.priority = defaults.priority;
    	      this.tag = defaults.tag;
    	      this.ttl = defaults.ttl;
    	      this.type = defaults.type;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder data(String data) {
            this.data = Objects.requireNonNull(data);
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        @CustomType.Setter
        public Builder flags(Integer flags) {
            this.flags = Objects.requireNonNull(flags);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            this.port = Objects.requireNonNull(port);
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            this.priority = Objects.requireNonNull(priority);
            return this;
        }
        @CustomType.Setter
        public Builder tag(String tag) {
            this.tag = Objects.requireNonNull(tag);
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            this.ttl = Objects.requireNonNull(ttl);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            this.weight = Objects.requireNonNull(weight);
            return this;
        }
        public GetRecordResult build() {
            final var _resultValue = new GetRecordResult();
            _resultValue.data = data;
            _resultValue.domain = domain;
            _resultValue.flags = flags;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.priority = priority;
            _resultValue.tag = tag;
            _resultValue.ttl = ttl;
            _resultValue.type = type;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
