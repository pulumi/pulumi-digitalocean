// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseClusterBackupRestoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseClusterBackupRestoreArgs Empty = new DatabaseClusterBackupRestoreArgs();

    /**
     * The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
     * 
     * This resource supports customized create timeouts. The default timeout is 30 minutes.
     * 
     */
    @Import(name="backupCreatedAt")
    private @Nullable Output<String> backupCreatedAt;

    /**
     * @return The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
     * 
     * This resource supports customized create timeouts. The default timeout is 30 minutes.
     * 
     */
    public Optional<Output<String>> backupCreatedAt() {
        return Optional.ofNullable(this.backupCreatedAt);
    }

    /**
     * The name of an existing database cluster from which the backup will be restored.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return The name of an existing database cluster from which the backup will be restored.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    private DatabaseClusterBackupRestoreArgs() {}

    private DatabaseClusterBackupRestoreArgs(DatabaseClusterBackupRestoreArgs $) {
        this.backupCreatedAt = $.backupCreatedAt;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseClusterBackupRestoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseClusterBackupRestoreArgs $;

        public Builder() {
            $ = new DatabaseClusterBackupRestoreArgs();
        }

        public Builder(DatabaseClusterBackupRestoreArgs defaults) {
            $ = new DatabaseClusterBackupRestoreArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupCreatedAt The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
         * 
         * This resource supports customized create timeouts. The default timeout is 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder backupCreatedAt(@Nullable Output<String> backupCreatedAt) {
            $.backupCreatedAt = backupCreatedAt;
            return this;
        }

        /**
         * @param backupCreatedAt The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.
         * 
         * This resource supports customized create timeouts. The default timeout is 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder backupCreatedAt(String backupCreatedAt) {
            return backupCreatedAt(Output.of(backupCreatedAt));
        }

        /**
         * @param databaseName The name of an existing database cluster from which the backup will be restored.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName The name of an existing database cluster from which the backup will be restored.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public DatabaseClusterBackupRestoreArgs build() {
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            return $;
        }
    }

}
