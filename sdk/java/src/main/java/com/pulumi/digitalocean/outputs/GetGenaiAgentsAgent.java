// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentAgentGuardrail;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentAnthropicApiKey;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentApiKey;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentApiKeyInfo;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentChatbot;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentChatbotIdentifier;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentChildAgent;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentDeployment;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentFunction;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentKnowledgeBase;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentModel;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentOpenAiApiKey;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentParentAgent;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgentTemplate;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetGenaiAgentsAgent {
    /**
     * @return AgentGuardrail represents a Guardrail attached to Gen AI Agent
     * 
     */
    private List<GetGenaiAgentsAgentAgentGuardrail> agentGuardrails;
    /**
     * @return ID of the Agent to retrieve
     * 
     */
    private String agentId;
    /**
     * @return Anthropic API Key information
     * 
     */
    private List<GetGenaiAgentsAgentAnthropicApiKey> anthropicApiKeys;
    /**
     * @return List of API Key Infos
     * 
     */
    private List<GetGenaiAgentsAgentApiKeyInfo> apiKeyInfos;
    /**
     * @return List of API Keys
     * 
     */
    private List<GetGenaiAgentsAgentApiKey> apiKeys;
    /**
     * @return List of Chatbot Identifiers
     * 
     */
    private List<GetGenaiAgentsAgentChatbotIdentifier> chatbotIdentifiers;
    /**
     * @return ChatBot configuration
     * 
     */
    private List<GetGenaiAgentsAgentChatbot> chatbots;
    /**
     * @return List of child agents
     * 
     */
    private List<GetGenaiAgentsAgentChildAgent> childAgents;
    /**
     * @return Timestamp when the Agent was created
     * 
     */
    private String createdAt;
    /**
     * @return List of API Key Infos
     * 
     */
    private List<GetGenaiAgentsAgentDeployment> deployments;
    /**
     * @return Description for the Agent
     * 
     */
    private String description;
    /**
     * @return List of API Key Infos
     * 
     */
    private List<GetGenaiAgentsAgentFunction> functions;
    /**
     * @return If case condition
     * 
     */
    private String ifCase;
    /**
     * @return Instruction for the Agent
     * 
     */
    private String instruction;
    /**
     * @return K value
     * 
     */
    private Integer k;
    /**
     * @return List of Knowledge Bases
     * 
     */
    private List<GetGenaiAgentsAgentKnowledgeBase> knowledgeBases;
    /**
     * @return Maximum tokens allowed
     * 
     */
    private Integer maxTokens;
    /**
     * @return Model UUID of the Agent
     * 
     */
    private String modelUuid;
    /**
     * @return Model of the Agent
     * 
     */
    private List<GetGenaiAgentsAgentModel> models;
    /**
     * @return Name of the Agent
     * 
     */
    private String name;
    /**
     * @return OpenAI API Key information
     * 
     */
    private List<GetGenaiAgentsAgentOpenAiApiKey> openAiApiKeys;
    /**
     * @return List of parent agents
     * 
     */
    private List<GetGenaiAgentsAgentParentAgent> parentAgents;
    /**
     * @return Project ID of the Agent
     * 
     */
    private String projectId;
    /**
     * @return Region where the Agent is deployed
     * 
     */
    private String region;
    /**
     * @return Retrieval method used
     * 
     */
    private String retrievalMethod;
    /**
     * @return Timestamp when the route was created
     * 
     */
    private String routeCreatedAt;
    /**
     * @return User who created the route
     * 
     */
    private String routeCreatedBy;
    /**
     * @return Route name
     * 
     */
    private String routeName;
    /**
     * @return Route UUID
     * 
     */
    private String routeUuid;
    /**
     * @return List of Tags
     * 
     */
    private List<String> tags;
    /**
     * @return Agent temperature setting
     * 
     */
    private Double temperature;
    /**
     * @return Agent Template
     * 
     */
    private List<GetGenaiAgentsAgentTemplate> templates;
    /**
     * @return Top P sampling parameter
     * 
     */
    private Double topP;
    /**
     * @return Timestamp when the Agent was updated
     * 
     */
    private String updatedAt;
    /**
     * @return URL for the Agent
     * 
     */
    private String url;
    /**
     * @return User ID linked with the Agent
     * 
     */
    private String userId;

    private GetGenaiAgentsAgent() {}
    /**
     * @return AgentGuardrail represents a Guardrail attached to Gen AI Agent
     * 
     */
    public List<GetGenaiAgentsAgentAgentGuardrail> agentGuardrails() {
        return this.agentGuardrails;
    }
    /**
     * @return ID of the Agent to retrieve
     * 
     */
    public String agentId() {
        return this.agentId;
    }
    /**
     * @return Anthropic API Key information
     * 
     */
    public List<GetGenaiAgentsAgentAnthropicApiKey> anthropicApiKeys() {
        return this.anthropicApiKeys;
    }
    /**
     * @return List of API Key Infos
     * 
     */
    public List<GetGenaiAgentsAgentApiKeyInfo> apiKeyInfos() {
        return this.apiKeyInfos;
    }
    /**
     * @return List of API Keys
     * 
     */
    public List<GetGenaiAgentsAgentApiKey> apiKeys() {
        return this.apiKeys;
    }
    /**
     * @return List of Chatbot Identifiers
     * 
     */
    public List<GetGenaiAgentsAgentChatbotIdentifier> chatbotIdentifiers() {
        return this.chatbotIdentifiers;
    }
    /**
     * @return ChatBot configuration
     * 
     */
    public List<GetGenaiAgentsAgentChatbot> chatbots() {
        return this.chatbots;
    }
    /**
     * @return List of child agents
     * 
     */
    public List<GetGenaiAgentsAgentChildAgent> childAgents() {
        return this.childAgents;
    }
    /**
     * @return Timestamp when the Agent was created
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return List of API Key Infos
     * 
     */
    public List<GetGenaiAgentsAgentDeployment> deployments() {
        return this.deployments;
    }
    /**
     * @return Description for the Agent
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of API Key Infos
     * 
     */
    public List<GetGenaiAgentsAgentFunction> functions() {
        return this.functions;
    }
    /**
     * @return If case condition
     * 
     */
    public String ifCase() {
        return this.ifCase;
    }
    /**
     * @return Instruction for the Agent
     * 
     */
    public String instruction() {
        return this.instruction;
    }
    /**
     * @return K value
     * 
     */
    public Integer k() {
        return this.k;
    }
    /**
     * @return List of Knowledge Bases
     * 
     */
    public List<GetGenaiAgentsAgentKnowledgeBase> knowledgeBases() {
        return this.knowledgeBases;
    }
    /**
     * @return Maximum tokens allowed
     * 
     */
    public Integer maxTokens() {
        return this.maxTokens;
    }
    /**
     * @return Model UUID of the Agent
     * 
     */
    public String modelUuid() {
        return this.modelUuid;
    }
    /**
     * @return Model of the Agent
     * 
     */
    public List<GetGenaiAgentsAgentModel> models() {
        return this.models;
    }
    /**
     * @return Name of the Agent
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return OpenAI API Key information
     * 
     */
    public List<GetGenaiAgentsAgentOpenAiApiKey> openAiApiKeys() {
        return this.openAiApiKeys;
    }
    /**
     * @return List of parent agents
     * 
     */
    public List<GetGenaiAgentsAgentParentAgent> parentAgents() {
        return this.parentAgents;
    }
    /**
     * @return Project ID of the Agent
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Region where the Agent is deployed
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Retrieval method used
     * 
     */
    public String retrievalMethod() {
        return this.retrievalMethod;
    }
    /**
     * @return Timestamp when the route was created
     * 
     */
    public String routeCreatedAt() {
        return this.routeCreatedAt;
    }
    /**
     * @return User who created the route
     * 
     */
    public String routeCreatedBy() {
        return this.routeCreatedBy;
    }
    /**
     * @return Route name
     * 
     */
    public String routeName() {
        return this.routeName;
    }
    /**
     * @return Route UUID
     * 
     */
    public String routeUuid() {
        return this.routeUuid;
    }
    /**
     * @return List of Tags
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return Agent temperature setting
     * 
     */
    public Double temperature() {
        return this.temperature;
    }
    /**
     * @return Agent Template
     * 
     */
    public List<GetGenaiAgentsAgentTemplate> templates() {
        return this.templates;
    }
    /**
     * @return Top P sampling parameter
     * 
     */
    public Double topP() {
        return this.topP;
    }
    /**
     * @return Timestamp when the Agent was updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return URL for the Agent
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return User ID linked with the Agent
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGenaiAgentsAgent defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGenaiAgentsAgentAgentGuardrail> agentGuardrails;
        private String agentId;
        private List<GetGenaiAgentsAgentAnthropicApiKey> anthropicApiKeys;
        private List<GetGenaiAgentsAgentApiKeyInfo> apiKeyInfos;
        private List<GetGenaiAgentsAgentApiKey> apiKeys;
        private List<GetGenaiAgentsAgentChatbotIdentifier> chatbotIdentifiers;
        private List<GetGenaiAgentsAgentChatbot> chatbots;
        private List<GetGenaiAgentsAgentChildAgent> childAgents;
        private String createdAt;
        private List<GetGenaiAgentsAgentDeployment> deployments;
        private String description;
        private List<GetGenaiAgentsAgentFunction> functions;
        private String ifCase;
        private String instruction;
        private Integer k;
        private List<GetGenaiAgentsAgentKnowledgeBase> knowledgeBases;
        private Integer maxTokens;
        private String modelUuid;
        private List<GetGenaiAgentsAgentModel> models;
        private String name;
        private List<GetGenaiAgentsAgentOpenAiApiKey> openAiApiKeys;
        private List<GetGenaiAgentsAgentParentAgent> parentAgents;
        private String projectId;
        private String region;
        private String retrievalMethod;
        private String routeCreatedAt;
        private String routeCreatedBy;
        private String routeName;
        private String routeUuid;
        private List<String> tags;
        private Double temperature;
        private List<GetGenaiAgentsAgentTemplate> templates;
        private Double topP;
        private String updatedAt;
        private String url;
        private String userId;
        public Builder() {}
        public Builder(GetGenaiAgentsAgent defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentGuardrails = defaults.agentGuardrails;
    	      this.agentId = defaults.agentId;
    	      this.anthropicApiKeys = defaults.anthropicApiKeys;
    	      this.apiKeyInfos = defaults.apiKeyInfos;
    	      this.apiKeys = defaults.apiKeys;
    	      this.chatbotIdentifiers = defaults.chatbotIdentifiers;
    	      this.chatbots = defaults.chatbots;
    	      this.childAgents = defaults.childAgents;
    	      this.createdAt = defaults.createdAt;
    	      this.deployments = defaults.deployments;
    	      this.description = defaults.description;
    	      this.functions = defaults.functions;
    	      this.ifCase = defaults.ifCase;
    	      this.instruction = defaults.instruction;
    	      this.k = defaults.k;
    	      this.knowledgeBases = defaults.knowledgeBases;
    	      this.maxTokens = defaults.maxTokens;
    	      this.modelUuid = defaults.modelUuid;
    	      this.models = defaults.models;
    	      this.name = defaults.name;
    	      this.openAiApiKeys = defaults.openAiApiKeys;
    	      this.parentAgents = defaults.parentAgents;
    	      this.projectId = defaults.projectId;
    	      this.region = defaults.region;
    	      this.retrievalMethod = defaults.retrievalMethod;
    	      this.routeCreatedAt = defaults.routeCreatedAt;
    	      this.routeCreatedBy = defaults.routeCreatedBy;
    	      this.routeName = defaults.routeName;
    	      this.routeUuid = defaults.routeUuid;
    	      this.tags = defaults.tags;
    	      this.temperature = defaults.temperature;
    	      this.templates = defaults.templates;
    	      this.topP = defaults.topP;
    	      this.updatedAt = defaults.updatedAt;
    	      this.url = defaults.url;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder agentGuardrails(List<GetGenaiAgentsAgentAgentGuardrail> agentGuardrails) {
            if (agentGuardrails == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "agentGuardrails");
            }
            this.agentGuardrails = agentGuardrails;
            return this;
        }
        public Builder agentGuardrails(GetGenaiAgentsAgentAgentGuardrail... agentGuardrails) {
            return agentGuardrails(List.of(agentGuardrails));
        }
        @CustomType.Setter
        public Builder agentId(String agentId) {
            if (agentId == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "agentId");
            }
            this.agentId = agentId;
            return this;
        }
        @CustomType.Setter
        public Builder anthropicApiKeys(List<GetGenaiAgentsAgentAnthropicApiKey> anthropicApiKeys) {
            if (anthropicApiKeys == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "anthropicApiKeys");
            }
            this.anthropicApiKeys = anthropicApiKeys;
            return this;
        }
        public Builder anthropicApiKeys(GetGenaiAgentsAgentAnthropicApiKey... anthropicApiKeys) {
            return anthropicApiKeys(List.of(anthropicApiKeys));
        }
        @CustomType.Setter
        public Builder apiKeyInfos(List<GetGenaiAgentsAgentApiKeyInfo> apiKeyInfos) {
            if (apiKeyInfos == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "apiKeyInfos");
            }
            this.apiKeyInfos = apiKeyInfos;
            return this;
        }
        public Builder apiKeyInfos(GetGenaiAgentsAgentApiKeyInfo... apiKeyInfos) {
            return apiKeyInfos(List.of(apiKeyInfos));
        }
        @CustomType.Setter
        public Builder apiKeys(List<GetGenaiAgentsAgentApiKey> apiKeys) {
            if (apiKeys == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "apiKeys");
            }
            this.apiKeys = apiKeys;
            return this;
        }
        public Builder apiKeys(GetGenaiAgentsAgentApiKey... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }
        @CustomType.Setter
        public Builder chatbotIdentifiers(List<GetGenaiAgentsAgentChatbotIdentifier> chatbotIdentifiers) {
            if (chatbotIdentifiers == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "chatbotIdentifiers");
            }
            this.chatbotIdentifiers = chatbotIdentifiers;
            return this;
        }
        public Builder chatbotIdentifiers(GetGenaiAgentsAgentChatbotIdentifier... chatbotIdentifiers) {
            return chatbotIdentifiers(List.of(chatbotIdentifiers));
        }
        @CustomType.Setter
        public Builder chatbots(List<GetGenaiAgentsAgentChatbot> chatbots) {
            if (chatbots == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "chatbots");
            }
            this.chatbots = chatbots;
            return this;
        }
        public Builder chatbots(GetGenaiAgentsAgentChatbot... chatbots) {
            return chatbots(List.of(chatbots));
        }
        @CustomType.Setter
        public Builder childAgents(List<GetGenaiAgentsAgentChildAgent> childAgents) {
            if (childAgents == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "childAgents");
            }
            this.childAgents = childAgents;
            return this;
        }
        public Builder childAgents(GetGenaiAgentsAgentChildAgent... childAgents) {
            return childAgents(List.of(childAgents));
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder deployments(List<GetGenaiAgentsAgentDeployment> deployments) {
            if (deployments == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "deployments");
            }
            this.deployments = deployments;
            return this;
        }
        public Builder deployments(GetGenaiAgentsAgentDeployment... deployments) {
            return deployments(List.of(deployments));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder functions(List<GetGenaiAgentsAgentFunction> functions) {
            if (functions == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "functions");
            }
            this.functions = functions;
            return this;
        }
        public Builder functions(GetGenaiAgentsAgentFunction... functions) {
            return functions(List.of(functions));
        }
        @CustomType.Setter
        public Builder ifCase(String ifCase) {
            if (ifCase == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "ifCase");
            }
            this.ifCase = ifCase;
            return this;
        }
        @CustomType.Setter
        public Builder instruction(String instruction) {
            if (instruction == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "instruction");
            }
            this.instruction = instruction;
            return this;
        }
        @CustomType.Setter
        public Builder k(Integer k) {
            if (k == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "k");
            }
            this.k = k;
            return this;
        }
        @CustomType.Setter
        public Builder knowledgeBases(List<GetGenaiAgentsAgentKnowledgeBase> knowledgeBases) {
            if (knowledgeBases == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "knowledgeBases");
            }
            this.knowledgeBases = knowledgeBases;
            return this;
        }
        public Builder knowledgeBases(GetGenaiAgentsAgentKnowledgeBase... knowledgeBases) {
            return knowledgeBases(List.of(knowledgeBases));
        }
        @CustomType.Setter
        public Builder maxTokens(Integer maxTokens) {
            if (maxTokens == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "maxTokens");
            }
            this.maxTokens = maxTokens;
            return this;
        }
        @CustomType.Setter
        public Builder modelUuid(String modelUuid) {
            if (modelUuid == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "modelUuid");
            }
            this.modelUuid = modelUuid;
            return this;
        }
        @CustomType.Setter
        public Builder models(List<GetGenaiAgentsAgentModel> models) {
            if (models == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "models");
            }
            this.models = models;
            return this;
        }
        public Builder models(GetGenaiAgentsAgentModel... models) {
            return models(List.of(models));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder openAiApiKeys(List<GetGenaiAgentsAgentOpenAiApiKey> openAiApiKeys) {
            if (openAiApiKeys == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "openAiApiKeys");
            }
            this.openAiApiKeys = openAiApiKeys;
            return this;
        }
        public Builder openAiApiKeys(GetGenaiAgentsAgentOpenAiApiKey... openAiApiKeys) {
            return openAiApiKeys(List.of(openAiApiKeys));
        }
        @CustomType.Setter
        public Builder parentAgents(List<GetGenaiAgentsAgentParentAgent> parentAgents) {
            if (parentAgents == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "parentAgents");
            }
            this.parentAgents = parentAgents;
            return this;
        }
        public Builder parentAgents(GetGenaiAgentsAgentParentAgent... parentAgents) {
            return parentAgents(List.of(parentAgents));
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder retrievalMethod(String retrievalMethod) {
            if (retrievalMethod == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "retrievalMethod");
            }
            this.retrievalMethod = retrievalMethod;
            return this;
        }
        @CustomType.Setter
        public Builder routeCreatedAt(String routeCreatedAt) {
            if (routeCreatedAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "routeCreatedAt");
            }
            this.routeCreatedAt = routeCreatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder routeCreatedBy(String routeCreatedBy) {
            if (routeCreatedBy == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "routeCreatedBy");
            }
            this.routeCreatedBy = routeCreatedBy;
            return this;
        }
        @CustomType.Setter
        public Builder routeName(String routeName) {
            if (routeName == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "routeName");
            }
            this.routeName = routeName;
            return this;
        }
        @CustomType.Setter
        public Builder routeUuid(String routeUuid) {
            if (routeUuid == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "routeUuid");
            }
            this.routeUuid = routeUuid;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder temperature(Double temperature) {
            if (temperature == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "temperature");
            }
            this.temperature = temperature;
            return this;
        }
        @CustomType.Setter
        public Builder templates(List<GetGenaiAgentsAgentTemplate> templates) {
            if (templates == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "templates");
            }
            this.templates = templates;
            return this;
        }
        public Builder templates(GetGenaiAgentsAgentTemplate... templates) {
            return templates(List.of(templates));
        }
        @CustomType.Setter
        public Builder topP(Double topP) {
            if (topP == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "topP");
            }
            this.topP = topP;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsAgent", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetGenaiAgentsAgent build() {
            final var _resultValue = new GetGenaiAgentsAgent();
            _resultValue.agentGuardrails = agentGuardrails;
            _resultValue.agentId = agentId;
            _resultValue.anthropicApiKeys = anthropicApiKeys;
            _resultValue.apiKeyInfos = apiKeyInfos;
            _resultValue.apiKeys = apiKeys;
            _resultValue.chatbotIdentifiers = chatbotIdentifiers;
            _resultValue.chatbots = chatbots;
            _resultValue.childAgents = childAgents;
            _resultValue.createdAt = createdAt;
            _resultValue.deployments = deployments;
            _resultValue.description = description;
            _resultValue.functions = functions;
            _resultValue.ifCase = ifCase;
            _resultValue.instruction = instruction;
            _resultValue.k = k;
            _resultValue.knowledgeBases = knowledgeBases;
            _resultValue.maxTokens = maxTokens;
            _resultValue.modelUuid = modelUuid;
            _resultValue.models = models;
            _resultValue.name = name;
            _resultValue.openAiApiKeys = openAiApiKeys;
            _resultValue.parentAgents = parentAgents;
            _resultValue.projectId = projectId;
            _resultValue.region = region;
            _resultValue.retrievalMethod = retrievalMethod;
            _resultValue.routeCreatedAt = routeCreatedAt;
            _resultValue.routeCreatedBy = routeCreatedBy;
            _resultValue.routeName = routeName;
            _resultValue.routeUuid = routeUuid;
            _resultValue.tags = tags;
            _resultValue.temperature = temperature;
            _resultValue.templates = templates;
            _resultValue.topP = topP;
            _resultValue.updatedAt = updatedAt;
            _resultValue.url = url;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
