// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLoadBalancerHealthcheck {
    /**
     * @return the number of seconds between between two consecutive health checks
     * 
     */
    private Integer checkIntervalSeconds;
    /**
     * @return the number of times a health check must pass for a backend droplet to be marked &#39;healthy&#39; and be re-added to the pool
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return the path on the backend Droplets to which the Load Balancer will send a request
     * 
     */
    private String path;
    /**
     * @return the port on the backend droplets on which the health check will attempt a connection
     * 
     */
    private Integer port;
    /**
     * @return the protocol used for health checks sent to the backend droplets
     * 
     */
    private String protocol;
    /**
     * @return the number of seconds to wait for a response until marking a health check as failed
     * 
     */
    private Integer responseTimeoutSeconds;
    /**
     * @return The number of times a health check must fail for a backend droplet to be marked &#39;unhealthy&#39; and be removed from the pool
     * 
     */
    private Integer unhealthyThreshold;

    private GetLoadBalancerHealthcheck() {}
    /**
     * @return the number of seconds between between two consecutive health checks
     * 
     */
    public Integer checkIntervalSeconds() {
        return this.checkIntervalSeconds;
    }
    /**
     * @return the number of times a health check must pass for a backend droplet to be marked &#39;healthy&#39; and be re-added to the pool
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return the path on the backend Droplets to which the Load Balancer will send a request
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return the port on the backend droplets on which the health check will attempt a connection
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return the protocol used for health checks sent to the backend droplets
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return the number of seconds to wait for a response until marking a health check as failed
     * 
     */
    public Integer responseTimeoutSeconds() {
        return this.responseTimeoutSeconds;
    }
    /**
     * @return The number of times a health check must fail for a backend droplet to be marked &#39;unhealthy&#39; and be removed from the pool
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLoadBalancerHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer checkIntervalSeconds;
        private Integer healthyThreshold;
        private String path;
        private Integer port;
        private String protocol;
        private Integer responseTimeoutSeconds;
        private Integer unhealthyThreshold;
        public Builder() {}
        public Builder(GetLoadBalancerHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkIntervalSeconds = defaults.checkIntervalSeconds;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.responseTimeoutSeconds = defaults.responseTimeoutSeconds;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
        }

        @CustomType.Setter
        public Builder checkIntervalSeconds(Integer checkIntervalSeconds) {
            if (checkIntervalSeconds == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "checkIntervalSeconds");
            }
            this.checkIntervalSeconds = checkIntervalSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder responseTimeoutSeconds(Integer responseTimeoutSeconds) {
            if (responseTimeoutSeconds == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "responseTimeoutSeconds");
            }
            this.responseTimeoutSeconds = responseTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetLoadBalancerHealthcheck", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        public GetLoadBalancerHealthcheck build() {
            final var _resultValue = new GetLoadBalancerHealthcheck();
            _resultValue.checkIntervalSeconds = checkIntervalSeconds;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.responseTimeoutSeconds = responseTimeoutSeconds;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            return _resultValue;
        }
    }
}
