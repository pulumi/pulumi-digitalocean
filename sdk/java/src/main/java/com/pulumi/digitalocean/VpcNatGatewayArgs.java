// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.VpcNatGatewayVpcArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcNatGatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpcNatGatewayArgs Empty = new VpcNatGatewayArgs();

    /**
     * The egress timeout value for ICMP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="icmpTimeoutSeconds")
    private @Nullable Output<Integer> icmpTimeoutSeconds;

    /**
     * @return The egress timeout value for ICMP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> icmpTimeoutSeconds() {
        return Optional.ofNullable(this.icmpTimeoutSeconds);
    }

    /**
     * The name of the VPC NAT Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region for the VPC NAT Gateway.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region for the VPC NAT Gateway.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The size of the VPC NAT Gateway.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return The size of the VPC NAT Gateway.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * The egress timeout value for TCP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="tcpTimeoutSeconds")
    private @Nullable Output<Integer> tcpTimeoutSeconds;

    /**
     * @return The egress timeout value for TCP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> tcpTimeoutSeconds() {
        return Optional.ofNullable(this.tcpTimeoutSeconds);
    }

    /**
     * The type of the VPC NAT Gateway.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of the VPC NAT Gateway.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * The egress timeout value for UDP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="udpTimeoutSeconds")
    private @Nullable Output<Integer> udpTimeoutSeconds;

    /**
     * @return The egress timeout value for UDP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> udpTimeoutSeconds() {
        return Optional.ofNullable(this.udpTimeoutSeconds);
    }

    /**
     * The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
     * documented below.
     * 
     */
    @Import(name="vpcs", required=true)
    private Output<List<VpcNatGatewayVpcArgs>> vpcs;

    /**
     * @return The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
     * documented below.
     * 
     */
    public Output<List<VpcNatGatewayVpcArgs>> vpcs() {
        return this.vpcs;
    }

    private VpcNatGatewayArgs() {}

    private VpcNatGatewayArgs(VpcNatGatewayArgs $) {
        this.icmpTimeoutSeconds = $.icmpTimeoutSeconds;
        this.name = $.name;
        this.region = $.region;
        this.size = $.size;
        this.tcpTimeoutSeconds = $.tcpTimeoutSeconds;
        this.type = $.type;
        this.udpTimeoutSeconds = $.udpTimeoutSeconds;
        this.vpcs = $.vpcs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcNatGatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcNatGatewayArgs $;

        public Builder() {
            $ = new VpcNatGatewayArgs();
        }

        public Builder(VpcNatGatewayArgs defaults) {
            $ = new VpcNatGatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param icmpTimeoutSeconds The egress timeout value for ICMP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder icmpTimeoutSeconds(@Nullable Output<Integer> icmpTimeoutSeconds) {
            $.icmpTimeoutSeconds = icmpTimeoutSeconds;
            return this;
        }

        /**
         * @param icmpTimeoutSeconds The egress timeout value for ICMP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder icmpTimeoutSeconds(Integer icmpTimeoutSeconds) {
            return icmpTimeoutSeconds(Output.of(icmpTimeoutSeconds));
        }

        /**
         * @param name The name of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size The size of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param tcpTimeoutSeconds The egress timeout value for TCP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutSeconds(@Nullable Output<Integer> tcpTimeoutSeconds) {
            $.tcpTimeoutSeconds = tcpTimeoutSeconds;
            return this;
        }

        /**
         * @param tcpTimeoutSeconds The egress timeout value for TCP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutSeconds(Integer tcpTimeoutSeconds) {
            return tcpTimeoutSeconds(Output.of(tcpTimeoutSeconds));
        }

        /**
         * @param type The type of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param udpTimeoutSeconds The egress timeout value for UDP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutSeconds(@Nullable Output<Integer> udpTimeoutSeconds) {
            $.udpTimeoutSeconds = udpTimeoutSeconds;
            return this;
        }

        /**
         * @param udpTimeoutSeconds The egress timeout value for UDP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutSeconds(Integer udpTimeoutSeconds) {
            return udpTimeoutSeconds(Output.of(udpTimeoutSeconds));
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(Output<List<VpcNatGatewayVpcArgs>> vpcs) {
            $.vpcs = vpcs;
            return this;
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(List<VpcNatGatewayVpcArgs> vpcs) {
            return vpcs(Output.of(vpcs));
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(VpcNatGatewayVpcArgs... vpcs) {
            return vpcs(List.of(vpcs));
        }

        public VpcNatGatewayArgs build() {
            if ($.region == null) {
                throw new MissingRequiredPropertyException("VpcNatGatewayArgs", "region");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("VpcNatGatewayArgs", "size");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("VpcNatGatewayArgs", "type");
            }
            if ($.vpcs == null) {
                throw new MissingRequiredPropertyException("VpcNatGatewayArgs", "vpcs");
            }
            return $;
        }
    }

}
