// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class FloatingIpAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final FloatingIpAssignmentArgs Empty = new FloatingIpAssignmentArgs();

    /**
     * The ID of Droplet that the Floating IP will be assigned to.
     * 
     */
    @Import(name="dropletId", required=true)
    private Output<Integer> dropletId;

    /**
     * @return The ID of Droplet that the Floating IP will be assigned to.
     * 
     */
    public Output<Integer> dropletId() {
        return this.dropletId;
    }

    /**
     * The Floating IP to assign to the Droplet.
     * 
     */
    @Import(name="ipAddress", required=true)
    private Output<String> ipAddress;

    /**
     * @return The Floating IP to assign to the Droplet.
     * 
     */
    public Output<String> ipAddress() {
        return this.ipAddress;
    }

    private FloatingIpAssignmentArgs() {}

    private FloatingIpAssignmentArgs(FloatingIpAssignmentArgs $) {
        this.dropletId = $.dropletId;
        this.ipAddress = $.ipAddress;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FloatingIpAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FloatingIpAssignmentArgs $;

        public Builder() {
            $ = new FloatingIpAssignmentArgs();
        }

        public Builder(FloatingIpAssignmentArgs defaults) {
            $ = new FloatingIpAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dropletId The ID of Droplet that the Floating IP will be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder dropletId(Output<Integer> dropletId) {
            $.dropletId = dropletId;
            return this;
        }

        /**
         * @param dropletId The ID of Droplet that the Floating IP will be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder dropletId(Integer dropletId) {
            return dropletId(Output.of(dropletId));
        }

        /**
         * @param ipAddress The Floating IP to assign to the Droplet.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The Floating IP to assign to the Droplet.
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        public FloatingIpAssignmentArgs build() {
            if ($.dropletId == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssignmentArgs", "dropletId");
            }
            if ($.ipAddress == null) {
                throw new MissingRequiredPropertyException("FloatingIpAssignmentArgs", "ipAddress");
            }
            return $;
        }
    }

}
