// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.inputs.GetAppArgs;
import com.pulumi.digitalocean.inputs.GetAppPlainArgs;
import com.pulumi.digitalocean.inputs.GetCertificateArgs;
import com.pulumi.digitalocean.inputs.GetCertificatePlainArgs;
import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
import com.pulumi.digitalocean.inputs.GetContainerRegistryPlainArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseCaArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseCaPlainArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseClusterPlainArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseReplicaArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseReplicaPlainArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseUserArgs;
import com.pulumi.digitalocean.inputs.GetDatabaseUserPlainArgs;
import com.pulumi.digitalocean.inputs.GetDomainArgs;
import com.pulumi.digitalocean.inputs.GetDomainPlainArgs;
import com.pulumi.digitalocean.inputs.GetDomainsArgs;
import com.pulumi.digitalocean.inputs.GetDomainsPlainArgs;
import com.pulumi.digitalocean.inputs.GetDropletArgs;
import com.pulumi.digitalocean.inputs.GetDropletPlainArgs;
import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
import com.pulumi.digitalocean.inputs.GetDropletSnapshotPlainArgs;
import com.pulumi.digitalocean.inputs.GetDropletsArgs;
import com.pulumi.digitalocean.inputs.GetDropletsPlainArgs;
import com.pulumi.digitalocean.inputs.GetFirewallArgs;
import com.pulumi.digitalocean.inputs.GetFirewallPlainArgs;
import com.pulumi.digitalocean.inputs.GetFloatingIpArgs;
import com.pulumi.digitalocean.inputs.GetFloatingIpPlainArgs;
import com.pulumi.digitalocean.inputs.GetImageArgs;
import com.pulumi.digitalocean.inputs.GetImagePlainArgs;
import com.pulumi.digitalocean.inputs.GetImagesArgs;
import com.pulumi.digitalocean.inputs.GetImagesPlainArgs;
import com.pulumi.digitalocean.inputs.GetKubernetesClusterArgs;
import com.pulumi.digitalocean.inputs.GetKubernetesClusterPlainArgs;
import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
import com.pulumi.digitalocean.inputs.GetKubernetesVersionsPlainArgs;
import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
import com.pulumi.digitalocean.inputs.GetLoadBalancerPlainArgs;
import com.pulumi.digitalocean.inputs.GetProjectArgs;
import com.pulumi.digitalocean.inputs.GetProjectPlainArgs;
import com.pulumi.digitalocean.inputs.GetProjectsArgs;
import com.pulumi.digitalocean.inputs.GetProjectsPlainArgs;
import com.pulumi.digitalocean.inputs.GetRecordArgs;
import com.pulumi.digitalocean.inputs.GetRecordPlainArgs;
import com.pulumi.digitalocean.inputs.GetRecordsArgs;
import com.pulumi.digitalocean.inputs.GetRecordsPlainArgs;
import com.pulumi.digitalocean.inputs.GetRegionArgs;
import com.pulumi.digitalocean.inputs.GetRegionPlainArgs;
import com.pulumi.digitalocean.inputs.GetRegionsArgs;
import com.pulumi.digitalocean.inputs.GetRegionsPlainArgs;
import com.pulumi.digitalocean.inputs.GetReservedIpArgs;
import com.pulumi.digitalocean.inputs.GetReservedIpPlainArgs;
import com.pulumi.digitalocean.inputs.GetSizesArgs;
import com.pulumi.digitalocean.inputs.GetSizesPlainArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectPlainArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectsArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectsPlainArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketPlainArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
import com.pulumi.digitalocean.inputs.GetSpacesBucketsPlainArgs;
import com.pulumi.digitalocean.inputs.GetSshKeyArgs;
import com.pulumi.digitalocean.inputs.GetSshKeyPlainArgs;
import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
import com.pulumi.digitalocean.inputs.GetSshKeysPlainArgs;
import com.pulumi.digitalocean.inputs.GetTagArgs;
import com.pulumi.digitalocean.inputs.GetTagPlainArgs;
import com.pulumi.digitalocean.inputs.GetTagsArgs;
import com.pulumi.digitalocean.inputs.GetTagsPlainArgs;
import com.pulumi.digitalocean.inputs.GetVolumeArgs;
import com.pulumi.digitalocean.inputs.GetVolumePlainArgs;
import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
import com.pulumi.digitalocean.inputs.GetVolumeSnapshotPlainArgs;
import com.pulumi.digitalocean.inputs.GetVpcArgs;
import com.pulumi.digitalocean.inputs.GetVpcPlainArgs;
import com.pulumi.digitalocean.outputs.GetAccountResult;
import com.pulumi.digitalocean.outputs.GetAppResult;
import com.pulumi.digitalocean.outputs.GetCertificateResult;
import com.pulumi.digitalocean.outputs.GetContainerRegistryResult;
import com.pulumi.digitalocean.outputs.GetDatabaseCaResult;
import com.pulumi.digitalocean.outputs.GetDatabaseClusterResult;
import com.pulumi.digitalocean.outputs.GetDatabaseReplicaResult;
import com.pulumi.digitalocean.outputs.GetDatabaseUserResult;
import com.pulumi.digitalocean.outputs.GetDomainResult;
import com.pulumi.digitalocean.outputs.GetDomainsResult;
import com.pulumi.digitalocean.outputs.GetDropletResult;
import com.pulumi.digitalocean.outputs.GetDropletSnapshotResult;
import com.pulumi.digitalocean.outputs.GetDropletsResult;
import com.pulumi.digitalocean.outputs.GetFirewallResult;
import com.pulumi.digitalocean.outputs.GetFloatingIpResult;
import com.pulumi.digitalocean.outputs.GetImageResult;
import com.pulumi.digitalocean.outputs.GetImagesResult;
import com.pulumi.digitalocean.outputs.GetKubernetesClusterResult;
import com.pulumi.digitalocean.outputs.GetKubernetesVersionsResult;
import com.pulumi.digitalocean.outputs.GetLoadBalancerResult;
import com.pulumi.digitalocean.outputs.GetProjectResult;
import com.pulumi.digitalocean.outputs.GetProjectsResult;
import com.pulumi.digitalocean.outputs.GetRecordResult;
import com.pulumi.digitalocean.outputs.GetRecordsResult;
import com.pulumi.digitalocean.outputs.GetRegionResult;
import com.pulumi.digitalocean.outputs.GetRegionsResult;
import com.pulumi.digitalocean.outputs.GetReservedIpResult;
import com.pulumi.digitalocean.outputs.GetSizesResult;
import com.pulumi.digitalocean.outputs.GetSpacesBucketObjectResult;
import com.pulumi.digitalocean.outputs.GetSpacesBucketObjectsResult;
import com.pulumi.digitalocean.outputs.GetSpacesBucketResult;
import com.pulumi.digitalocean.outputs.GetSpacesBucketsResult;
import com.pulumi.digitalocean.outputs.GetSshKeyResult;
import com.pulumi.digitalocean.outputs.GetSshKeysResult;
import com.pulumi.digitalocean.outputs.GetTagResult;
import com.pulumi.digitalocean.outputs.GetTagsResult;
import com.pulumi.digitalocean.outputs.GetVolumeResult;
import com.pulumi.digitalocean.outputs.GetVolumeSnapshotResult;
import com.pulumi.digitalocean.outputs.GetVpcResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class DigitaloceanFunctions {
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount() {
        return getAccount(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain() {
        return getAccountPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(InvokeArgs args) {
        return getAccount(args, InvokeOptions.Empty);
    }
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(InvokeArgs args) {
        return getAccountPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAccountResult> getAccount(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on your DigitalOcean account.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getAccount();
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAccountResult> getAccountPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getAccount:getAccount", TypeShape.of(GetAccountResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DigitalOcean App.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getApp(GetAppArgs.builder()
     *             .appId(&#34;e665d18d-7b56-44a9-92ce-31979174d544&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;defaultIngress&#34;, example.applyValue(getAppResult -&gt; getAppResult.defaultIngress()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAppResult> getApp(GetAppArgs args) {
        return getApp(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DigitalOcean App.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getApp(GetAppArgs.builder()
     *             .appId(&#34;e665d18d-7b56-44a9-92ce-31979174d544&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;defaultIngress&#34;, example.applyValue(getAppResult -&gt; getAppResult.defaultIngress()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAppResult> getAppPlain(GetAppPlainArgs args) {
        return getAppPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DigitalOcean App.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getApp(GetAppArgs.builder()
     *             .appId(&#34;e665d18d-7b56-44a9-92ce-31979174d544&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;defaultIngress&#34;, example.applyValue(getAppResult -&gt; getAppResult.defaultIngress()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAppResult> getApp(GetAppArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getApp:getApp", TypeShape.of(GetAppResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DigitalOcean App.
     * 
     * ## Example Usage
     * 
     * Get the account:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetAppArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getApp(GetAppArgs.builder()
     *             .appId(&#34;e665d18d-7b56-44a9-92ce-31979174d544&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;defaultIngress&#34;, example.applyValue(getAppResult -&gt; getAppResult.defaultIngress()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAppResult> getAppPlain(GetAppPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getApp:getApp", TypeShape.of(GetAppResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a certificate. This data source provides the name, type, state,
     * domains, expiry date, and the sha1 fingerprint as configured on your DigitalOcean account.
     * This is useful if the certificate in question is not managed by this provider or you need to utilize
     * any of the certificates data.
     * 
     * An error is triggered if the provided certificate name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the certificate:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args) {
        return getCertificate(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a certificate. This data source provides the name, type, state,
     * domains, expiry date, and the sha1 fingerprint as configured on your DigitalOcean account.
     * This is useful if the certificate in question is not managed by this provider or you need to utilize
     * any of the certificates data.
     * 
     * An error is triggered if the provided certificate name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the certificate:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args) {
        return getCertificatePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a certificate. This data source provides the name, type, state,
     * domains, expiry date, and the sha1 fingerprint as configured on your DigitalOcean account.
     * This is useful if the certificate in question is not managed by this provider or you need to utilize
     * any of the certificates data.
     * 
     * An error is triggered if the provided certificate name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the certificate:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCertificateResult> getCertificate(GetCertificateArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a certificate. This data source provides the name, type, state,
     * domains, expiry date, and the sha1 fingerprint as configured on your DigitalOcean account.
     * This is useful if the certificate in question is not managed by this provider or you need to utilize
     * any of the certificates data.
     * 
     * An error is triggered if the provided certificate name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the certificate:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetCertificateArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getCertificate(GetCertificateArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCertificateResult> getCertificatePlain(GetCertificatePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getCertificate:getCertificate", TypeShape.of(GetCertificateResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a container registry. This data source provides the name as
     * configured on your DigitalOcean account. This is useful if the container
     * registry name in question is not managed by this provider or you need validate if
     * the container registry exists in the account.
     * 
     * An error is triggered if the provided container registry name does not exist.
     * 
     * ## Example Usage
     * ### Basic Example
     * 
     * Get the container registry:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetContainerRegistryResult> getContainerRegistry(GetContainerRegistryArgs args) {
        return getContainerRegistry(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a container registry. This data source provides the name as
     * configured on your DigitalOcean account. This is useful if the container
     * registry name in question is not managed by this provider or you need validate if
     * the container registry exists in the account.
     * 
     * An error is triggered if the provided container registry name does not exist.
     * 
     * ## Example Usage
     * ### Basic Example
     * 
     * Get the container registry:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetContainerRegistryResult> getContainerRegistryPlain(GetContainerRegistryPlainArgs args) {
        return getContainerRegistryPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a container registry. This data source provides the name as
     * configured on your DigitalOcean account. This is useful if the container
     * registry name in question is not managed by this provider or you need validate if
     * the container registry exists in the account.
     * 
     * An error is triggered if the provided container registry name does not exist.
     * 
     * ## Example Usage
     * ### Basic Example
     * 
     * Get the container registry:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetContainerRegistryResult> getContainerRegistry(GetContainerRegistryArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getContainerRegistry:getContainerRegistry", TypeShape.of(GetContainerRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a container registry. This data source provides the name as
     * configured on your DigitalOcean account. This is useful if the container
     * registry name in question is not managed by this provider or you need validate if
     * the container registry exists in the account.
     * 
     * An error is triggered if the provided container registry name does not exist.
     * 
     * ## Example Usage
     * ### Basic Example
     * 
     * Get the container registry:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetContainerRegistryArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getContainerRegistry(GetContainerRegistryArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetContainerRegistryResult> getContainerRegistryPlain(GetContainerRegistryPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getContainerRegistry:getContainerRegistry", TypeShape.of(GetContainerRegistryResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides the CA certificate for a DigitalOcean database.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseCaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ca = DigitaloceanFunctions.getDatabaseCa(GetDatabaseCaArgs.builder()
     *             .clusterId(&#34;aaa-bbb-ccc-ddd&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;caOutput&#34;, ca.applyValue(getDatabaseCaResult -&gt; getDatabaseCaResult.certificate()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseCaResult> getDatabaseCa(GetDatabaseCaArgs args) {
        return getDatabaseCa(args, InvokeOptions.Empty);
    }
    /**
     * Provides the CA certificate for a DigitalOcean database.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseCaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ca = DigitaloceanFunctions.getDatabaseCa(GetDatabaseCaArgs.builder()
     *             .clusterId(&#34;aaa-bbb-ccc-ddd&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;caOutput&#34;, ca.applyValue(getDatabaseCaResult -&gt; getDatabaseCaResult.certificate()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseCaResult> getDatabaseCaPlain(GetDatabaseCaPlainArgs args) {
        return getDatabaseCaPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides the CA certificate for a DigitalOcean database.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseCaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ca = DigitaloceanFunctions.getDatabaseCa(GetDatabaseCaArgs.builder()
     *             .clusterId(&#34;aaa-bbb-ccc-ddd&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;caOutput&#34;, ca.applyValue(getDatabaseCaResult -&gt; getDatabaseCaResult.certificate()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseCaResult> getDatabaseCa(GetDatabaseCaArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDatabaseCa:getDatabaseCa", TypeShape.of(GetDatabaseCaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides the CA certificate for a DigitalOcean database.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseCaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ca = DigitaloceanFunctions.getDatabaseCa(GetDatabaseCaArgs.builder()
     *             .clusterId(&#34;aaa-bbb-ccc-ddd&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;caOutput&#34;, ca.applyValue(getDatabaseCaResult -&gt; getDatabaseCaResult.certificate()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseCaResult> getDatabaseCaPlain(GetDatabaseCaPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDatabaseCa:getDatabaseCa", TypeShape.of(GetDatabaseCaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database cluster resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseOutput&#34;, example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.uri()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseClusterResult> getDatabaseCluster(GetDatabaseClusterArgs args) {
        return getDatabaseCluster(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database cluster resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseOutput&#34;, example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.uri()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseClusterResult> getDatabaseClusterPlain(GetDatabaseClusterPlainArgs args) {
        return getDatabaseClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database cluster resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseOutput&#34;, example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.uri()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseClusterResult> getDatabaseCluster(GetDatabaseClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDatabaseCluster:getDatabaseCluster", TypeShape.of(GetDatabaseClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database cluster resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseOutput&#34;, example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.uri()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseClusterResult> getDatabaseClusterPlain(GetDatabaseClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDatabaseCluster:getDatabaseCluster", TypeShape.of(GetDatabaseClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database replica.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseReplicaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         final var read-only = DigitaloceanFunctions.getDatabaseReplica(GetDatabaseReplicaArgs.builder()
     *             .clusterId(example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;terra-test-ro&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;replicaOutput&#34;, read_only.uri());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseReplicaResult> getDatabaseReplica(GetDatabaseReplicaArgs args) {
        return getDatabaseReplica(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database replica.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseReplicaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         final var read-only = DigitaloceanFunctions.getDatabaseReplica(GetDatabaseReplicaArgs.builder()
     *             .clusterId(example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;terra-test-ro&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;replicaOutput&#34;, read_only.uri());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseReplicaResult> getDatabaseReplicaPlain(GetDatabaseReplicaPlainArgs args) {
        return getDatabaseReplicaPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database replica.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseReplicaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         final var read-only = DigitaloceanFunctions.getDatabaseReplica(GetDatabaseReplicaArgs.builder()
     *             .clusterId(example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;terra-test-ro&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;replicaOutput&#34;, read_only.uri());
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseReplicaResult> getDatabaseReplica(GetDatabaseReplicaArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDatabaseReplica:getDatabaseReplica", TypeShape.of(GetDatabaseReplicaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database replica.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseReplicaArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;example-cluster&#34;)
     *             .build());
     * 
     *         final var read-only = DigitaloceanFunctions.getDatabaseReplica(GetDatabaseReplicaArgs.builder()
     *             .clusterId(example.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;terra-test-ro&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;replicaOutput&#34;, read_only.uri());
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseReplicaResult> getDatabaseReplicaPlain(GetDatabaseReplicaPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDatabaseReplica:getDatabaseReplica", TypeShape.of(GetDatabaseReplicaResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database user resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;main-cluster&#34;)
     *             .build());
     * 
     *         final var example = DigitaloceanFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .clusterId(main.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;example-user&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseUserPassword&#34;, example.applyValue(getDatabaseUserResult -&gt; getDatabaseUserResult.password()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args) {
        return getDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database user resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;main-cluster&#34;)
     *             .build());
     * 
     *         final var example = DigitaloceanFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .clusterId(main.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;example-user&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseUserPassword&#34;, example.applyValue(getDatabaseUserResult -&gt; getDatabaseUserResult.password()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args) {
        return getDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides information on a DigitalOcean database user resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;main-cluster&#34;)
     *             .build());
     * 
     *         final var example = DigitaloceanFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .clusterId(main.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;example-user&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseUserPassword&#34;, example.applyValue(getDatabaseUserResult -&gt; getDatabaseUserResult.password()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides information on a DigitalOcean database user resource.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDatabaseClusterArgs;
     * import com.pulumi.digitalocean.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var main = DigitaloceanFunctions.getDatabaseCluster(GetDatabaseClusterArgs.builder()
     *             .name(&#34;main-cluster&#34;)
     *             .build());
     * 
     *         final var example = DigitaloceanFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .clusterId(main.applyValue(getDatabaseClusterResult -&gt; getDatabaseClusterResult.id()))
     *             .name(&#34;example-user&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;databaseUserPassword&#34;, example.applyValue(getDatabaseUserResult -&gt; getDatabaseUserResult.password()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a domain. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the domain
     * name in question is not managed by this provider or you need to utilize TTL or zone
     * file data.
     * 
     * An error is triggered if the provided domain name is not managed with your
     * DigitalOcean account.
     * 
     */
    public static Output<GetDomainResult> getDomain(GetDomainArgs args) {
        return getDomain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a domain. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the domain
     * name in question is not managed by this provider or you need to utilize TTL or zone
     * file data.
     * 
     * An error is triggered if the provided domain name is not managed with your
     * DigitalOcean account.
     * 
     */
    public static CompletableFuture<GetDomainResult> getDomainPlain(GetDomainPlainArgs args) {
        return getDomainPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a domain. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the domain
     * name in question is not managed by this provider or you need to utilize TTL or zone
     * file data.
     * 
     * An error is triggered if the provided domain name is not managed with your
     * DigitalOcean account.
     * 
     */
    public static Output<GetDomainResult> getDomain(GetDomainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDomain:getDomain", TypeShape.of(GetDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a domain. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the domain
     * name in question is not managed by this provider or you need to utilize TTL or zone
     * file data.
     * 
     * An error is triggered if the provided domain name is not managed with your
     * DigitalOcean account.
     * 
     */
    public static CompletableFuture<GetDomainResult> getDomainPlain(GetDomainPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDomain:getDomain", TypeShape.of(GetDomainResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDomainsResult> getDomains() {
        return getDomains(GetDomainsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain() {
        return getDomainsPlain(GetDomainsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDomainsResult> getDomains(GetDomainsArgs args) {
        return getDomains(args, InvokeOptions.Empty);
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain(GetDomainsPlainArgs args) {
        return getDomainsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDomainsResult> getDomains(GetDomainsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDomains:getDomains", TypeShape.of(GetDomainsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on domains for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all domains will be returned.
     * 
     * This data source is useful if the domains in question are not managed by this provider or you need to
     * utilize any of the domains&#39; data.
     * 
     * Note: You can use the `digitalocean.Domain` data source to obtain metadata
     * about a single domain if you already know the `name`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter domains. (This example
     * also uses the regular expression `match_by` mode in order to match domains by suffix.)
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDomainsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var examples = DigitaloceanFunctions.getDomains(GetDomainsArgs.builder()
     *             .filters(GetDomainsFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .matchBy(&#34;re&#34;)
     *                 .values(&#34;example\\.com$&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDomainsResult> getDomainsPlain(GetDomainsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDomains:getDomains", TypeShape.of(GetDomainsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletResult> getDroplet() {
        return getDroplet(GetDropletArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletResult> getDropletPlain() {
        return getDropletPlain(GetDropletPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletResult> getDroplet(GetDropletArgs args) {
        return getDroplet(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletResult> getDropletPlain(GetDropletPlainArgs args) {
        return getDropletPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletResult> getDroplet(GetDropletArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDroplet:getDroplet", TypeShape.of(GetDropletResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a Droplet for use in other resources. This data source provides
     * all of the Droplet&#39;s properties as configured on your DigitalOcean account. This
     * is useful if the Droplet in question is not managed by this provider or you need to
     * utilize any of the Droplet&#39;s data.
     * 
     * **Note:** This data source returns a single Droplet. When specifying a `tag`, an
     * error is triggered if more than one Droplet is found.
     * 
     * ## Example Usage
     * 
     * Get the Droplet by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .name(&#34;web&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;dropletOutput&#34;, example.applyValue(getDropletResult -&gt; getDropletResult.ipv4Address()));
     *     }
     * }
     * ```
     * 
     * Get the Droplet by tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .tag(&#34;web&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the Droplet by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getDroplet(GetDropletArgs.builder()
     *             .id(digitalocean_kubernetes_cluster.example().node_pool()[0].nodes()[0].droplet_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletResult> getDropletPlain(GetDropletPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDroplet:getDroplet", TypeShape.of(GetDropletResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletSnapshotResult> getDropletSnapshot() {
        return getDropletSnapshot(GetDropletSnapshotArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletSnapshotResult> getDropletSnapshotPlain() {
        return getDropletSnapshotPlain(GetDropletSnapshotPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletSnapshotResult> getDropletSnapshot(GetDropletSnapshotArgs args) {
        return getDropletSnapshot(args, InvokeOptions.Empty);
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletSnapshotResult> getDropletSnapshotPlain(GetDropletSnapshotPlainArgs args) {
        return getDropletSnapshotPlain(args, InvokeOptions.Empty);
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletSnapshotResult> getDropletSnapshot(GetDropletSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDropletSnapshot:getDropletSnapshot", TypeShape.of(GetDropletSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Droplet snapshots are saved instances of a Droplet. Use this data
     * source to retrieve the ID of a DigitalOcean Droplet snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the Droplet snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Create image from snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletSnapshotArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var web-snapshot = DigitaloceanFunctions.getDropletSnapshot(GetDropletSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var from_snapshot = new Droplet(&#34;from-snapshot&#34;, DropletArgs.builder()        
     *             .image(web_snapshot.id())
     *             .region(&#34;nyc3&#34;)
     *             .size(&#34;s-2vcpu-4gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletSnapshotResult> getDropletSnapshotPlain(GetDropletSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDropletSnapshot:getDropletSnapshot", TypeShape.of(GetDropletSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletsResult> getDroplets() {
        return getDroplets(GetDropletsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletsResult> getDropletsPlain() {
        return getDropletsPlain(GetDropletsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletsResult> getDroplets(GetDropletsArgs args) {
        return getDroplets(args, InvokeOptions.Empty);
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletsResult> getDropletsPlain(GetDropletsPlainArgs args) {
        return getDropletsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDropletsResult> getDroplets(GetDropletsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getDroplets:getDroplets", TypeShape.of(GetDropletsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on Droplets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Droplets will be returned.
     * 
     * This data source is useful if the Droplets in question are not managed by the provider or you need to
     * utilize any of the Droplets&#39; data.
     * 
     * Note: You can use the `digitalocean.Droplet` data source to obtain metadata
     * about a single Droplet if you already know the `id`, unique `name`, or unique `tag` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Droplets with size `s-1vcpu-1gb`:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(GetDropletsFilterArgs.builder()
     *                 .key(&#34;size&#34;)
     *                 .values(&#34;s-1vcpu-1gb&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetDropletsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var small-with-backups = DigitaloceanFunctions.getDroplets(GetDropletsArgs.builder()
     *             .filters(            
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;size&#34;)
     *                     .values(&#34;s-1vcpu-1gb&#34;)
     *                     .build(),
     *                 GetDropletsFilterArgs.builder()
     *                     .key(&#34;backups&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build())
     *             .sorts(GetDropletsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created_at&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDropletsResult> getDropletsPlain(GetDropletsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getDroplets:getDroplets", TypeShape.of(GetDropletsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DigitalOcean Firewall.
     * 
     * ## Example Usage
     * 
     * Get the firewall:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getFirewall(GetFirewallArgs.builder()
     *             .firewallId(&#34;1df48973-6eef-4214-854f-fa7726e7e583&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;exampleFirewallName&#34;, example.applyValue(getFirewallResult -&gt; getFirewallResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args) {
        return getFirewall(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DigitalOcean Firewall.
     * 
     * ## Example Usage
     * 
     * Get the firewall:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getFirewall(GetFirewallArgs.builder()
     *             .firewallId(&#34;1df48973-6eef-4214-854f-fa7726e7e583&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;exampleFirewallName&#34;, example.applyValue(getFirewallResult -&gt; getFirewallResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args) {
        return getFirewallPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DigitalOcean Firewall.
     * 
     * ## Example Usage
     * 
     * Get the firewall:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getFirewall(GetFirewallArgs.builder()
     *             .firewallId(&#34;1df48973-6eef-4214-854f-fa7726e7e583&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;exampleFirewallName&#34;, example.applyValue(getFirewallResult -&gt; getFirewallResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFirewallResult> getFirewall(GetFirewallArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DigitalOcean Firewall.
     * 
     * ## Example Usage
     * 
     * Get the firewall:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFirewallArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getFirewall(GetFirewallArgs.builder()
     *             .firewallId(&#34;1df48973-6eef-4214-854f-fa7726e7e583&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;exampleFirewallName&#34;, example.applyValue(getFirewallResult -&gt; getFirewallResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFirewallResult> getFirewallPlain(GetFirewallPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getFirewall:getFirewall", TypeShape.of(GetFirewallResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
     * 
     * Get information on a floating ip. This data source provides the region and Droplet id
     * as configured on your DigitalOcean account. This is useful if the floating IP
     * in question is not managed by the provider or you need to find the Droplet the IP is
     * attached to.
     * 
     * An error is triggered if the provided floating IP does not exist.
     * 
     * ## Example Usage
     * 
     * Get the floating IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getFloatingIpResult -&gt; getFloatingIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args) {
        return getFloatingIp(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
     * 
     * Get information on a floating ip. This data source provides the region and Droplet id
     * as configured on your DigitalOcean account. This is useful if the floating IP
     * in question is not managed by the provider or you need to find the Droplet the IP is
     * attached to.
     * 
     * An error is triggered if the provided floating IP does not exist.
     * 
     * ## Example Usage
     * 
     * Get the floating IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getFloatingIpResult -&gt; getFloatingIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args) {
        return getFloatingIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
     * 
     * Get information on a floating ip. This data source provides the region and Droplet id
     * as configured on your DigitalOcean account. This is useful if the floating IP
     * in question is not managed by the provider or you need to find the Droplet the IP is
     * attached to.
     * 
     * An error is triggered if the provided floating IP does not exist.
     * 
     * ## Example Usage
     * 
     * Get the floating IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getFloatingIpResult -&gt; getFloatingIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFloatingIpResult> getFloatingIp(GetFloatingIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **Deprecated:** DigitalOcean Floating IPs have been renamed reserved IPs. This data source will be removed in a future release. Please use `digitalocean.ReservedIp` instead.
     * 
     * Get information on a floating ip. This data source provides the region and Droplet id
     * as configured on your DigitalOcean account. This is useful if the floating IP
     * in question is not managed by the provider or you need to find the Droplet the IP is
     * attached to.
     * 
     * An error is triggered if the provided floating IP does not exist.
     * 
     * ## Example Usage
     * 
     * Get the floating IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetFloatingIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getFloatingIp(GetFloatingIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getFloatingIpResult -&gt; getFloatingIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFloatingIpResult> getFloatingIpPlain(GetFloatingIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getFloatingIp:getFloatingIp", TypeShape.of(GetFloatingIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImageResult> getImage() {
        return getImage(GetImageArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain() {
        return getImagePlain(GetImagePlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args) {
        return getImage(args, InvokeOptions.Empty);
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args) {
        return getImagePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImageResult> getImage(GetImageArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on an image for use in other resources (e.g. creating a Droplet
     * based on snapshot). This data source provides all of the image properties as
     * configured on your DigitalOcean account. This is useful if the image in question
     * is not managed by the provider or you need to utilize any of the image&#39;s data.
     * 
     * An error is triggered if zero or more than one result is returned by the query.
     * 
     * ## Example Usage
     * 
     * Get the data about a snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example1 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a snapshot to create a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleImage = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .name(&#34;example-1.0.0&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(exampleImage.applyValue(getImageResult -&gt; getImageResult.id()))
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Get the data about an official image:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImageArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example2 = DigitaloceanFunctions.getImage(GetImageArgs.builder()
     *             .slug(&#34;ubuntu-18-04-x64&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImageResult> getImagePlain(GetImagePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getImage:getImage", TypeShape.of(GetImageResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImagesResult> getImages() {
        return getImages(GetImagesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain() {
        return getImagesPlain(GetImagesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args) {
        return getImages(args, InvokeOptions.Empty);
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args) {
        return getImagesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetImagesResult> getImages(GetImagesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on images for use in other resources (e.g. creating a Droplet
     * based on a snapshot), with the ability to filter and sort the results. If no filters are specified,
     * all images will be returned.
     * 
     * This data source is useful if the image in question is not managed by the provider or you need to utilize any
     * of the image&#39;s data.
     * 
     * Note: You can use the `digitalocean.getImage` data source to obtain metadata
     * about a single image if you already know the `slug`, unique `name`, or `id` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter images.
     * 
     * For example to find all Ubuntu images:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var ubuntu = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(GetImagesFilterArgs.builder()
     *                 .key(&#34;distribution&#34;)
     *                 .values(&#34;Ubuntu&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetImagesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getImages(GetImagesArgs.builder()
     *             .filters(            
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;distribution&#34;)
     *                     .values(&#34;Ubuntu&#34;)
     *                     .build(),
     *                 GetImagesFilterArgs.builder()
     *                     .key(&#34;regions&#34;)
     *                     .values(&#34;nyc3&#34;)
     *                     .build())
     *             .sorts(GetImagesSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;created&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetImagesResult> getImagesPlain(GetImagesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getImages:getImages", TypeShape.of(GetImagesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about a DigitalOcean Kubernetes cluster for use in other resources. This data source provides all of the cluster&#39;s properties as configured on your DigitalOcean account. This is useful if the cluster in question is not managed by the provider.
     * 
     */
    public static Output<GetKubernetesClusterResult> getKubernetesCluster(GetKubernetesClusterArgs args) {
        return getKubernetesCluster(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about a DigitalOcean Kubernetes cluster for use in other resources. This data source provides all of the cluster&#39;s properties as configured on your DigitalOcean account. This is useful if the cluster in question is not managed by the provider.
     * 
     */
    public static CompletableFuture<GetKubernetesClusterResult> getKubernetesClusterPlain(GetKubernetesClusterPlainArgs args) {
        return getKubernetesClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about a DigitalOcean Kubernetes cluster for use in other resources. This data source provides all of the cluster&#39;s properties as configured on your DigitalOcean account. This is useful if the cluster in question is not managed by the provider.
     * 
     */
    public static Output<GetKubernetesClusterResult> getKubernetesCluster(GetKubernetesClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getKubernetesCluster:getKubernetesCluster", TypeShape.of(GetKubernetesClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about a DigitalOcean Kubernetes cluster for use in other resources. This data source provides all of the cluster&#39;s properties as configured on your DigitalOcean account. This is useful if the cluster in question is not managed by the provider.
     * 
     */
    public static CompletableFuture<GetKubernetesClusterResult> getKubernetesClusterPlain(GetKubernetesClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getKubernetesCluster:getKubernetesCluster", TypeShape.of(GetKubernetesClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetKubernetesVersionsResult> getKubernetesVersions() {
        return getKubernetesVersions(GetKubernetesVersionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetKubernetesVersionsResult> getKubernetesVersionsPlain() {
        return getKubernetesVersionsPlain(GetKubernetesVersionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetKubernetesVersionsResult> getKubernetesVersions(GetKubernetesVersionsArgs args) {
        return getKubernetesVersions(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetKubernetesVersionsResult> getKubernetesVersionsPlain(GetKubernetesVersionsPlainArgs args) {
        return getKubernetesVersionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetKubernetesVersionsResult> getKubernetesVersions(GetKubernetesVersionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getKubernetesVersions:getKubernetesVersions", TypeShape.of(GetKubernetesVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides access to the available DigitalOcean Kubernetes Service versions.
     * 
     * ## Example Usage
     * ### Output a list of all available versions
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         ctx.export(&#34;k8s-versions&#34;, example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.validVersions()));
     *     }
     * }
     * ```
     * ### Create a Kubernetes cluster using the most recent version available
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions();
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Pin a Kubernetes cluster to a specific minor version
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetKubernetesVersionsArgs;
     * import com.pulumi.digitalocean.KubernetesCluster;
     * import com.pulumi.digitalocean.KubernetesClusterArgs;
     * import com.pulumi.digitalocean.inputs.KubernetesClusterNodePoolArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getKubernetesVersions(GetKubernetesVersionsArgs.builder()
     *             .versionPrefix(&#34;1.22.&#34;)
     *             .build());
     * 
     *         var example_cluster = new KubernetesCluster(&#34;example-cluster&#34;, KubernetesClusterArgs.builder()        
     *             .region(&#34;lon1&#34;)
     *             .version(example.applyValue(getKubernetesVersionsResult -&gt; getKubernetesVersionsResult.latestVersion()))
     *             .nodePool(KubernetesClusterNodePoolArgs.builder()
     *                 .name(&#34;default&#34;)
     *                 .size(&#34;s-1vcpu-2gb&#34;)
     *                 .nodeCount(3)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetKubernetesVersionsResult> getKubernetesVersionsPlain(GetKubernetesVersionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getKubernetesVersions:getKubernetesVersions", TypeShape.of(GetKubernetesVersionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer() {
        return getLoadBalancer(GetLoadBalancerArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain() {
        return getLoadBalancerPlain(GetLoadBalancerPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer(GetLoadBalancerArgs args) {
        return getLoadBalancer(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain(GetLoadBalancerPlainArgs args) {
        return getLoadBalancerPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetLoadBalancerResult> getLoadBalancer(GetLoadBalancerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getLoadBalancer:getLoadBalancer", TypeShape.of(GetLoadBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a load balancer for use in other resources. This data source
     * provides all of the load balancers properties as configured on your DigitalOcean
     * account. This is useful if the load balancer in question is not managed by
     * the provider or you need to utilize any of the load balancers data.
     * 
     * An error is triggered if the provided load balancer name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the load balancer by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .name(&#34;app&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;lbOutput&#34;, example.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.ip()));
     *     }
     * }
     * ```
     * 
     * Get the load balancer by ID:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetLoadBalancerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
     *             .id(&#34;loadbalancer_id&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetLoadBalancerResult> getLoadBalancerPlain(GetLoadBalancerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getLoadBalancer:getLoadBalancer", TypeShape.of(GetLoadBalancerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a single DigitalOcean project. If neither the `id` nor `name` attributes are provided,
     * then this data source returns the default project.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var default = DigitaloceanFunctions.getProject();
     * 
     *         final var staging = DigitaloceanFunctions.getProject(GetProjectArgs.builder()
     *             .name(&#34;My Staging Project&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all DigitalOcean projects associated with an account, with
     * the ability to filter and sort the results. If no filters are specified, all projects
     * will be returned.
     * 
     * Note: You can use the `digitalocean.Project` data source to
     * obtain metadata about a single project if you already know the `id` to retrieve or the unique
     * `name` of the project.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter projects.
     * 
     * For example to find all staging environment projects:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var staging = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(GetProjectsFilterArgs.builder()
     *                 .key(&#34;environment&#34;)
     *                 .values(&#34;Staging&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var non-default-production = DigitaloceanFunctions.getProjects(GetProjectsArgs.builder()
     *             .filters(            
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;environment&#34;)
     *                     .values(&#34;Production&#34;)
     *                     .build(),
     *                 GetProjectsFilterArgs.builder()
     *                     .key(&#34;is_default&#34;)
     *                     .values(&#34;false&#34;)
     *                     .build())
     *             .sorts(GetProjectsSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getProjects:getProjects", TypeShape.of(GetProjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DNS record. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the record
     * in question is not managed by the provider.
     * 
     * An error is triggered if the provided domain name or record are not managed with
     * your DigitalOcean account.
     * 
     */
    public static Output<GetRecordResult> getRecord(GetRecordArgs args) {
        return getRecord(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DNS record. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the record
     * in question is not managed by the provider.
     * 
     * An error is triggered if the provided domain name or record are not managed with
     * your DigitalOcean account.
     * 
     */
    public static CompletableFuture<GetRecordResult> getRecordPlain(GetRecordPlainArgs args) {
        return getRecordPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a DNS record. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the record
     * in question is not managed by the provider.
     * 
     * An error is triggered if the provided domain name or record are not managed with
     * your DigitalOcean account.
     * 
     */
    public static Output<GetRecordResult> getRecord(GetRecordArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getRecord:getRecord", TypeShape.of(GetRecordResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a DNS record. This data source provides the name, TTL, and zone
     * file as configured on your DigitalOcean account. This is useful if the record
     * in question is not managed by the provider.
     * 
     * An error is triggered if the provided domain name or record are not managed with
     * your DigitalOcean account.
     * 
     */
    public static CompletableFuture<GetRecordResult> getRecordPlain(GetRecordPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getRecord:getRecord", TypeShape.of(GetRecordResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all DNS records within a domain, with the ability to filter and sort the results.
     * If no filters are specified, all records will be returned.
     * 
     */
    public static Output<GetRecordsResult> getRecords(GetRecordsArgs args) {
        return getRecords(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DNS records within a domain, with the ability to filter and sort the results.
     * If no filters are specified, all records will be returned.
     * 
     */
    public static CompletableFuture<GetRecordsResult> getRecordsPlain(GetRecordsPlainArgs args) {
        return getRecordsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all DNS records within a domain, with the ability to filter and sort the results.
     * If no filters are specified, all records will be returned.
     * 
     */
    public static Output<GetRecordsResult> getRecords(GetRecordsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getRecords:getRecords", TypeShape.of(GetRecordsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all DNS records within a domain, with the ability to filter and sort the results.
     * If no filters are specified, all records will be returned.
     * 
     */
    public static CompletableFuture<GetRecordsResult> getRecordsPlain(GetRecordsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getRecords:getRecords", TypeShape.of(GetRecordsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a single DigitalOcean region. This is useful to find out
     * what Droplet sizes and features are supported within a region.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sfo2 = DigitaloceanFunctions.getRegion(GetRegionArgs.builder()
     *             .slug(&#34;sfo2&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;regionName&#34;, sfo2.applyValue(getRegionResult -&gt; getRegionResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionResult> getRegion(GetRegionArgs args) {
        return getRegion(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean region. This is useful to find out
     * what Droplet sizes and features are supported within a region.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sfo2 = DigitaloceanFunctions.getRegion(GetRegionArgs.builder()
     *             .slug(&#34;sfo2&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;regionName&#34;, sfo2.applyValue(getRegionResult -&gt; getRegionResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionResult> getRegionPlain(GetRegionPlainArgs args) {
        return getRegionPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a single DigitalOcean region. This is useful to find out
     * what Droplet sizes and features are supported within a region.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sfo2 = DigitaloceanFunctions.getRegion(GetRegionArgs.builder()
     *             .slug(&#34;sfo2&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;regionName&#34;, sfo2.applyValue(getRegionResult -&gt; getRegionResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionResult> getRegion(GetRegionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getRegion:getRegion", TypeShape.of(GetRegionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a single DigitalOcean region. This is useful to find out
     * what Droplet sizes and features are supported within a region.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var sfo2 = DigitaloceanFunctions.getRegion(GetRegionArgs.builder()
     *             .slug(&#34;sfo2&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;regionName&#34;, sfo2.applyValue(getRegionResult -&gt; getRegionResult.name()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionResult> getRegionPlain(GetRegionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getRegion:getRegion", TypeShape.of(GetRegionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionsResult> getRegions() {
        return getRegions(GetRegionsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain() {
        return getRegionsPlain(GetRegionsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionsResult> getRegions(GetRegionsArgs args) {
        return getRegions(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain(GetRegionsPlainArgs args) {
        return getRegionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRegionsResult> getRegions(GetRegionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getRegions:getRegions", TypeShape.of(GetRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about all supported DigitalOcean regions, with the ability to
     * filter and sort the results. If no filters are specified, all regions will be returned.
     * 
     * Note: You can use the `digitalocean.getRegion` data source
     * to obtain metadata about a single region if you already know the `slug` to retrieve.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter regions.
     * 
     * For example to find all available regions:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(GetRegionsFilterArgs.builder()
     *                 .key(&#34;available&#34;)
     *                 .values(&#34;true&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * You can filter on multiple fields and sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetRegionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var available = DigitaloceanFunctions.getRegions(GetRegionsArgs.builder()
     *             .filters(            
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;available&#34;)
     *                     .values(&#34;true&#34;)
     *                     .build(),
     *                 GetRegionsFilterArgs.builder()
     *                     .key(&#34;features&#34;)
     *                     .values(&#34;private_networking&#34;)
     *                     .build())
     *             .sorts(GetRegionsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRegionsResult> getRegionsPlain(GetRegionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getRegions:getRegions", TypeShape.of(GetRegionsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * Get the reserved IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetReservedIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getReservedIp(GetReservedIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getReservedIpResult -&gt; getReservedIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReservedIpResult> getReservedIp(GetReservedIpArgs args) {
        return getReservedIp(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * Get the reserved IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetReservedIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getReservedIp(GetReservedIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getReservedIpResult -&gt; getReservedIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReservedIpResult> getReservedIpPlain(GetReservedIpPlainArgs args) {
        return getReservedIpPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * Get the reserved IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetReservedIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getReservedIp(GetReservedIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getReservedIpResult -&gt; getReservedIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetReservedIpResult> getReservedIp(GetReservedIpArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getReservedIp:getReservedIp", TypeShape.of(GetReservedIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * Get the reserved IP:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetReservedIpArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var config = ctx.config();
     *         final var publicIp = config.get(&#34;publicIp&#34;);
     *         final var example = DigitaloceanFunctions.getReservedIp(GetReservedIpArgs.builder()
     *             .ipAddress(publicIp)
     *             .build());
     * 
     *         ctx.export(&#34;fipOutput&#34;, example.applyValue(getReservedIpResult -&gt; getReservedIpResult.dropletId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetReservedIpResult> getReservedIpPlain(GetReservedIpPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getReservedIp:getReservedIp", TypeShape.of(GetReservedIpResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static Output<GetSizesResult> getSizes() {
        return getSizes(GetSizesArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static CompletableFuture<GetSizesResult> getSizesPlain() {
        return getSizesPlain(GetSizesPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static Output<GetSizesResult> getSizes(GetSizesArgs args) {
        return getSizes(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static CompletableFuture<GetSizesResult> getSizesPlain(GetSizesPlainArgs args) {
        return getSizesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static Output<GetSizesResult> getSizes(GetSizesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSizes:getSizes", TypeShape.of(GetSizesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieves information about the Droplet sizes that DigitalOcean supports, with
     * the ability to filter and sort the results. If no filters are specified, all sizes
     * will be returned.
     * 
     */
    public static CompletableFuture<GetSizesResult> getSizesPlain(GetSizesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSizes:getSizes", TypeShape.of(GetSizesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a Spaces bucket for use in other resources. This is useful if the Spaces bucket in question
     * is not managed by the provider or you need to utilize any of the bucket&#39;s data.
     * 
     * ## Example Usage
     * 
     * Get the bucket by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getSpacesBucket(GetSpacesBucketArgs.builder()
     *             .name(&#34;my-spaces-bucket&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bucketDomainName&#34;, example.applyValue(getSpacesBucketResult -&gt; getSpacesBucketResult.bucketDomainName()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketResult> getSpacesBucket(GetSpacesBucketArgs args) {
        return getSpacesBucket(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a Spaces bucket for use in other resources. This is useful if the Spaces bucket in question
     * is not managed by the provider or you need to utilize any of the bucket&#39;s data.
     * 
     * ## Example Usage
     * 
     * Get the bucket by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getSpacesBucket(GetSpacesBucketArgs.builder()
     *             .name(&#34;my-spaces-bucket&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bucketDomainName&#34;, example.applyValue(getSpacesBucketResult -&gt; getSpacesBucketResult.bucketDomainName()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketResult> getSpacesBucketPlain(GetSpacesBucketPlainArgs args) {
        return getSpacesBucketPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a Spaces bucket for use in other resources. This is useful if the Spaces bucket in question
     * is not managed by the provider or you need to utilize any of the bucket&#39;s data.
     * 
     * ## Example Usage
     * 
     * Get the bucket by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getSpacesBucket(GetSpacesBucketArgs.builder()
     *             .name(&#34;my-spaces-bucket&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bucketDomainName&#34;, example.applyValue(getSpacesBucketResult -&gt; getSpacesBucketResult.bucketDomainName()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketResult> getSpacesBucket(GetSpacesBucketArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSpacesBucket:getSpacesBucket", TypeShape.of(GetSpacesBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a Spaces bucket for use in other resources. This is useful if the Spaces bucket in question
     * is not managed by the provider or you need to utilize any of the bucket&#39;s data.
     * 
     * ## Example Usage
     * 
     * Get the bucket by name:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getSpacesBucket(GetSpacesBucketArgs.builder()
     *             .name(&#34;my-spaces-bucket&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         ctx.export(&#34;bucketDomainName&#34;, example.applyValue(getSpacesBucketResult -&gt; getSpacesBucketResult.bucketDomainName()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketResult> getSpacesBucketPlain(GetSpacesBucketPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSpacesBucket:getSpacesBucket", TypeShape.of(GetSpacesBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The Spaces object data source allows access to the metadata and
     * _optionally_ (see below) content of an object stored inside a Spaces bucket.
     * 
     * &gt; **Note:** The content of an object (`body` field) is available only for objects which have a human-readable
     * `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially
     * downloading large amount of data which would be thrown away in favor of metadata.
     * 
     * ## Example Usage
     * 
     * The following example retrieves a text object (which must have a `Content-Type`
     * value starting with `text/`) and uses it as the `user_data` for a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var bootstrapScript = DigitaloceanFunctions.getSpacesBucketObject(GetSpacesBucketObjectArgs.builder()
     *             .bucket(&#34;ourcorp-deploy-config&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .key(&#34;droplet-bootstrap-script.sh&#34;)
     *             .build());
     * 
     *         var web = new Droplet(&#34;web&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .userData(bootstrapScript.applyValue(getSpacesBucketObjectResult -&gt; getSpacesBucketObjectResult.body()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketObjectResult> getSpacesBucketObject(GetSpacesBucketObjectArgs args) {
        return getSpacesBucketObject(args, InvokeOptions.Empty);
    }
    /**
     * The Spaces object data source allows access to the metadata and
     * _optionally_ (see below) content of an object stored inside a Spaces bucket.
     * 
     * &gt; **Note:** The content of an object (`body` field) is available only for objects which have a human-readable
     * `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially
     * downloading large amount of data which would be thrown away in favor of metadata.
     * 
     * ## Example Usage
     * 
     * The following example retrieves a text object (which must have a `Content-Type`
     * value starting with `text/`) and uses it as the `user_data` for a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var bootstrapScript = DigitaloceanFunctions.getSpacesBucketObject(GetSpacesBucketObjectArgs.builder()
     *             .bucket(&#34;ourcorp-deploy-config&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .key(&#34;droplet-bootstrap-script.sh&#34;)
     *             .build());
     * 
     *         var web = new Droplet(&#34;web&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .userData(bootstrapScript.applyValue(getSpacesBucketObjectResult -&gt; getSpacesBucketObjectResult.body()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketObjectResult> getSpacesBucketObjectPlain(GetSpacesBucketObjectPlainArgs args) {
        return getSpacesBucketObjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * The Spaces object data source allows access to the metadata and
     * _optionally_ (see below) content of an object stored inside a Spaces bucket.
     * 
     * &gt; **Note:** The content of an object (`body` field) is available only for objects which have a human-readable
     * `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially
     * downloading large amount of data which would be thrown away in favor of metadata.
     * 
     * ## Example Usage
     * 
     * The following example retrieves a text object (which must have a `Content-Type`
     * value starting with `text/`) and uses it as the `user_data` for a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var bootstrapScript = DigitaloceanFunctions.getSpacesBucketObject(GetSpacesBucketObjectArgs.builder()
     *             .bucket(&#34;ourcorp-deploy-config&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .key(&#34;droplet-bootstrap-script.sh&#34;)
     *             .build());
     * 
     *         var web = new Droplet(&#34;web&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .userData(bootstrapScript.applyValue(getSpacesBucketObjectResult -&gt; getSpacesBucketObjectResult.body()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketObjectResult> getSpacesBucketObject(GetSpacesBucketObjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSpacesBucketObject:getSpacesBucketObject", TypeShape.of(GetSpacesBucketObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * The Spaces object data source allows access to the metadata and
     * _optionally_ (see below) content of an object stored inside a Spaces bucket.
     * 
     * &gt; **Note:** The content of an object (`body` field) is available only for objects which have a human-readable
     * `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially
     * downloading large amount of data which would be thrown away in favor of metadata.
     * 
     * ## Example Usage
     * 
     * The following example retrieves a text object (which must have a `Content-Type`
     * value starting with `text/`) and uses it as the `user_data` for a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketObjectArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var bootstrapScript = DigitaloceanFunctions.getSpacesBucketObject(GetSpacesBucketObjectArgs.builder()
     *             .bucket(&#34;ourcorp-deploy-config&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .key(&#34;droplet-bootstrap-script.sh&#34;)
     *             .build());
     * 
     *         var web = new Droplet(&#34;web&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .userData(bootstrapScript.applyValue(getSpacesBucketObjectResult -&gt; getSpacesBucketObjectResult.body()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketObjectResult> getSpacesBucketObjectPlain(GetSpacesBucketObjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSpacesBucketObject:getSpacesBucketObject", TypeShape.of(GetSpacesBucketObjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **NOTE on `max_keys`:** Retrieving very large numbers of keys can adversely affect the provider&#39;s performance.
     * 
     * The bucket-objects data source returns keys (i.e., file names) and other metadata about objects in a Spaces bucket.
     * 
     */
    public static Output<GetSpacesBucketObjectsResult> getSpacesBucketObjects(GetSpacesBucketObjectsArgs args) {
        return getSpacesBucketObjects(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **NOTE on `max_keys`:** Retrieving very large numbers of keys can adversely affect the provider&#39;s performance.
     * 
     * The bucket-objects data source returns keys (i.e., file names) and other metadata about objects in a Spaces bucket.
     * 
     */
    public static CompletableFuture<GetSpacesBucketObjectsResult> getSpacesBucketObjectsPlain(GetSpacesBucketObjectsPlainArgs args) {
        return getSpacesBucketObjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * &gt; **NOTE on `max_keys`:** Retrieving very large numbers of keys can adversely affect the provider&#39;s performance.
     * 
     * The bucket-objects data source returns keys (i.e., file names) and other metadata about objects in a Spaces bucket.
     * 
     */
    public static Output<GetSpacesBucketObjectsResult> getSpacesBucketObjects(GetSpacesBucketObjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSpacesBucketObjects:getSpacesBucketObjects", TypeShape.of(GetSpacesBucketObjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * &gt; **NOTE on `max_keys`:** Retrieving very large numbers of keys can adversely affect the provider&#39;s performance.
     * 
     * The bucket-objects data source returns keys (i.e., file names) and other metadata about objects in a Spaces bucket.
     * 
     */
    public static CompletableFuture<GetSpacesBucketObjectsResult> getSpacesBucketObjectsPlain(GetSpacesBucketObjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSpacesBucketObjects:getSpacesBucketObjects", TypeShape.of(GetSpacesBucketObjectsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketsResult> getSpacesBuckets() {
        return getSpacesBuckets(GetSpacesBucketsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketsResult> getSpacesBucketsPlain() {
        return getSpacesBucketsPlain(GetSpacesBucketsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketsResult> getSpacesBuckets(GetSpacesBucketsArgs args) {
        return getSpacesBuckets(args, InvokeOptions.Empty);
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketsResult> getSpacesBucketsPlain(GetSpacesBucketsPlainArgs args) {
        return getSpacesBucketsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSpacesBucketsResult> getSpacesBuckets(GetSpacesBucketsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSpacesBuckets:getSpacesBuckets", TypeShape.of(GetSpacesBucketsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
     * If no filters are specified, all Spaces buckets will be returned.
     * 
     * Note: You can use the `digitalocean.SpacesBucket` data source to
     * obtain metadata about a single bucket if you already know its `name` and `region`.
     * 
     * ## Example Usage
     * 
     * Use the `filter` block with a `key` string and `values` list to filter buckets.
     * 
     * Get all buckets in a region:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * You can sort the results as well:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSpacesBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var nyc3 = DigitaloceanFunctions.getSpacesBuckets(GetSpacesBucketsArgs.builder()
     *             .filters(GetSpacesBucketsFilterArgs.builder()
     *                 .key(&#34;region&#34;)
     *                 .values(&#34;nyc3&#34;)
     *                 .build())
     *             .sorts(GetSpacesBucketsSortArgs.builder()
     *                 .direction(&#34;desc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSpacesBucketsResult> getSpacesBucketsPlain(GetSpacesBucketsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSpacesBuckets:getSpacesBuckets", TypeShape.of(GetSpacesBucketsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a ssh key. This data source provides the name, public key,
     * and fingerprint as configured on your DigitalOcean account. This is useful if
     * the ssh key in question is not managed by the provider or you need to utilize any
     * of the keys data.
     * 
     * An error is triggered if the provided ssh key name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the ssh key:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeyArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSshKey = DigitaloceanFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .sshKeys(exampleSshKey.applyValue(getSshKeyResult -&gt; getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args) {
        return getSshKey(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a ssh key. This data source provides the name, public key,
     * and fingerprint as configured on your DigitalOcean account. This is useful if
     * the ssh key in question is not managed by the provider or you need to utilize any
     * of the keys data.
     * 
     * An error is triggered if the provided ssh key name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the ssh key:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeyArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSshKey = DigitaloceanFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .sshKeys(exampleSshKey.applyValue(getSshKeyResult -&gt; getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args) {
        return getSshKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a ssh key. This data source provides the name, public key,
     * and fingerprint as configured on your DigitalOcean account. This is useful if
     * the ssh key in question is not managed by the provider or you need to utilize any
     * of the keys data.
     * 
     * An error is triggered if the provided ssh key name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the ssh key:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeyArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSshKey = DigitaloceanFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .sshKeys(exampleSshKey.applyValue(getSshKeyResult -&gt; getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeyResult> getSshKey(GetSshKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a ssh key. This data source provides the name, public key,
     * and fingerprint as configured on your DigitalOcean account. This is useful if
     * the ssh key in question is not managed by the provider or you need to utilize any
     * of the keys data.
     * 
     * An error is triggered if the provided ssh key name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the ssh key:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeyArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleSshKey = DigitaloceanFunctions.getSshKey(GetSshKeyArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .sshKeys(exampleSshKey.applyValue(getSshKeyResult -&gt; getSshKeyResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeyResult> getSshKeyPlain(GetSshKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSshKey:getSshKey", TypeShape.of(GetSshKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys() {
        return getSshKeys(GetSshKeysArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain() {
        return getSshKeysPlain(GetSshKeysPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(GetSshKeysArgs args) {
        return getSshKeys(args, InvokeOptions.Empty);
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(GetSshKeysPlainArgs args) {
        return getSshKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSshKeysResult> getSshKeys(GetSshKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on SSH Keys for use in other resources.
     * 
     * This data source is useful if the SSH Keys in question are not managed by the provider or you need to
     * utilize any of the SSH Keys&#39; data.
     * 
     * Note: You can use the `digitalocean.SshKey` data source to obtain metadata
     * about a single SSH Key if you already know the unique `name` to retrieve.
     * 
     * ## Example Usage
     * 
     * For example, to find all SSH keys:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .sorts(GetSshKeysSortArgs.builder()
     *                 .direction(&#34;asc&#34;)
     *                 .key(&#34;name&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Or to find ones matching specific values:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetSshKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var keys = DigitaloceanFunctions.getSshKeys(GetSshKeysArgs.builder()
     *             .filters(GetSshKeysFilterArgs.builder()
     *                 .key(&#34;name&#34;)
     *                 .values(                
     *                     &#34;laptop&#34;,
     *                     &#34;desktop&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSshKeysResult> getSshKeysPlain(GetSshKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getSshKeys:getSshKeys", TypeShape.of(GetSshKeysResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a tag. This data source provides the name as configured on
     * your DigitalOcean account. This is useful if the tag name in question is not
     * managed by the provider or you need validate if the tag exists in the account.
     * 
     * An error is triggered if the provided tag name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTag = DigitaloceanFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .tags(exampleTag.applyValue(getTagResult -&gt; getTagResult.name()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args) {
        return getTag(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a tag. This data source provides the name as configured on
     * your DigitalOcean account. This is useful if the tag name in question is not
     * managed by the provider or you need validate if the tag exists in the account.
     * 
     * An error is triggered if the provided tag name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTag = DigitaloceanFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .tags(exampleTag.applyValue(getTagResult -&gt; getTagResult.name()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args) {
        return getTagPlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a tag. This data source provides the name as configured on
     * your DigitalOcean account. This is useful if the tag name in question is not
     * managed by the provider or you need validate if the tag exists in the account.
     * 
     * An error is triggered if the provided tag name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTag = DigitaloceanFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .tags(exampleTag.applyValue(getTagResult -&gt; getTagResult.name()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagResult> getTag(GetTagArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a tag. This data source provides the name as configured on
     * your DigitalOcean account. This is useful if the tag name in question is not
     * managed by the provider or you need validate if the tag exists in the account.
     * 
     * An error is triggered if the provided tag name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the tag:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleTag = DigitaloceanFunctions.getTag(GetTagArgs.builder()
     *             .name(&#34;example&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc2&#34;)
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .tags(exampleTag.applyValue(getTagResult -&gt; getTagResult.name()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagResult> getTagPlain(GetTagPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getTag:getTag", TypeShape.of(GetTagResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagsResult> getTags() {
        return getTags(GetTagsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain() {
        return getTagsPlain(GetTagsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagsResult> getTags(GetTagsArgs args) {
        return getTags(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(GetTagsPlainArgs args) {
        return getTagsPlain(args, InvokeOptions.Empty);
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetTagsResult> getTags(GetTagsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Returns a list of tags in your DigitalOcean account, with the ability to
     * filter and sort the results. If no filters are specified, all tags will be
     * returned.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetTagsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var list = DigitaloceanFunctions.getTags(GetTagsArgs.builder()
     *             .sorts(GetTagsSortArgs.builder()
     *                 .key(&#34;total_resource_count&#34;)
     *                 .direction(&#34;asc&#34;)
     *                 .build())
     *             .build());
     * 
     *         ctx.export(&#34;sortedTags&#34;, list.applyValue(getTagsResult -&gt; getTagsResult.tags()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetTagsResult> getTagsPlain(GetTagsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getTags:getTags", TypeShape.of(GetTagsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a volume for use in other resources. This data source provides
     * all of the volumes properties as configured on your DigitalOcean account. This is
     * useful if the volume in question is not managed by the provider or you need to utilize
     * any of the volumes data.
     * 
     * An error is triggered if the provided volume name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the volume:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume to attach it to a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import com.pulumi.digitalocean.VolumeAttachment;
     * import com.pulumi.digitalocean.VolumeAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVolume = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var foobar = new VolumeAttachment(&#34;foobar&#34;, VolumeAttachmentArgs.builder()        
     *             .dropletId(exampleDroplet.id())
     *             .volumeId(exampleVolume.applyValue(getVolumeResult -&gt; getVolumeResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args) {
        return getVolume(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a volume for use in other resources. This data source provides
     * all of the volumes properties as configured on your DigitalOcean account. This is
     * useful if the volume in question is not managed by the provider or you need to utilize
     * any of the volumes data.
     * 
     * An error is triggered if the provided volume name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the volume:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume to attach it to a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import com.pulumi.digitalocean.VolumeAttachment;
     * import com.pulumi.digitalocean.VolumeAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVolume = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var foobar = new VolumeAttachment(&#34;foobar&#34;, VolumeAttachmentArgs.builder()        
     *             .dropletId(exampleDroplet.id())
     *             .volumeId(exampleVolume.applyValue(getVolumeResult -&gt; getVolumeResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args) {
        return getVolumePlain(args, InvokeOptions.Empty);
    }
    /**
     * Get information on a volume for use in other resources. This data source provides
     * all of the volumes properties as configured on your DigitalOcean account. This is
     * useful if the volume in question is not managed by the provider or you need to utilize
     * any of the volumes data.
     * 
     * An error is triggered if the provided volume name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the volume:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume to attach it to a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import com.pulumi.digitalocean.VolumeAttachment;
     * import com.pulumi.digitalocean.VolumeAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVolume = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var foobar = new VolumeAttachment(&#34;foobar&#34;, VolumeAttachmentArgs.builder()        
     *             .dropletId(exampleDroplet.id())
     *             .volumeId(exampleVolume.applyValue(getVolumeResult -&gt; getVolumeResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeResult> getVolume(GetVolumeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Get information on a volume for use in other resources. This data source provides
     * all of the volumes properties as configured on your DigitalOcean account. This is
     * useful if the volume in question is not managed by the provider or you need to utilize
     * any of the volumes data.
     * 
     * An error is triggered if the provided volume name does not exist.
     * 
     * ## Example Usage
     * 
     * Get the volume:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume to attach it to a Droplet:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import com.pulumi.digitalocean.VolumeAttachment;
     * import com.pulumi.digitalocean.VolumeAttachmentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVolume = DigitaloceanFunctions.getVolume(GetVolumeArgs.builder()
     *             .name(&#34;app-data&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *         var foobar = new VolumeAttachment(&#34;foobar&#34;, VolumeAttachmentArgs.builder()        
     *             .dropletId(exampleDroplet.id())
     *             .volumeId(exampleVolume.applyValue(getVolumeResult -&gt; getVolumeResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeResult> getVolumePlain(GetVolumePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getVolume:getVolume", TypeShape.of(GetVolumeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeSnapshotResult> getVolumeSnapshot() {
        return getVolumeSnapshot(GetVolumeSnapshotArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeSnapshotResult> getVolumeSnapshotPlain() {
        return getVolumeSnapshotPlain(GetVolumeSnapshotPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeSnapshotResult> getVolumeSnapshot(GetVolumeSnapshotArgs args) {
        return getVolumeSnapshot(args, InvokeOptions.Empty);
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeSnapshotResult> getVolumeSnapshotPlain(GetVolumeSnapshotPlainArgs args) {
        return getVolumeSnapshotPlain(args, InvokeOptions.Empty);
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVolumeSnapshotResult> getVolumeSnapshot(GetVolumeSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getVolumeSnapshot:getVolumeSnapshot", TypeShape.of(GetVolumeSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Volume snapshots are saved instances of a block storage volume. Use this data
     * source to retrieve the ID of a DigitalOcean volume snapshot for use in other
     * resources.
     * 
     * ## Example Usage
     * 
     * Get the volume snapshot:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .mostRecent(true)
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a volume snapshot to create a new volume based on it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
     * import com.pulumi.digitalocean.Volume;
     * import com.pulumi.digitalocean.VolumeArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var snapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
     *             .nameRegex(&#34;^web&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .mostRecent(true)
     *             .build());
     * 
     *         var foobar = new Volume(&#34;foobar&#34;, VolumeArgs.builder()        
     *             .region(&#34;nyc3&#34;)
     *             .size(100)
     *             .snapshotId(snapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVolumeSnapshotResult> getVolumeSnapshotPlain(GetVolumeSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getVolumeSnapshot:getVolumeSnapshot", TypeShape.of(GetVolumeSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVpcResult> getVpc() {
        return getVpc(GetVpcArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVpcResult> getVpcPlain() {
        return getVpcPlain(GetVpcPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVpcResult> getVpc(GetVpcArgs args) {
        return getVpc(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVpcResult> getVpcPlain(GetVpcPlainArgs args) {
        return getVpcPlain(args, InvokeOptions.Empty);
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetVpcResult> getVpc(GetVpcArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("digitalocean:index/getVpc:getVpc", TypeShape.of(GetVpcResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Retrieve information about a VPC for use in other resources.
     * 
     * This data source provides all of the VPC&#39;s properties as configured on your
     * DigitalOcean account. This is useful if the VPC in question is not managed by
     * the provider or you need to utilize any of the VPC&#39;s data.
     * 
     * VPCs may be looked up by `id` or `name`. Specifying a `region` will
     * return that that region&#39;s default VPC.
     * 
     * ## Example Usage
     * ### VPC By Name
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * Reuse the data about a VPC to assign a Droplet to it:
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.digitalocean.DigitaloceanFunctions;
     * import com.pulumi.digitalocean.inputs.GetVpcArgs;
     * import com.pulumi.digitalocean.Droplet;
     * import com.pulumi.digitalocean.DropletArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var exampleVpc = DigitaloceanFunctions.getVpc(GetVpcArgs.builder()
     *             .name(&#34;example-network&#34;)
     *             .build());
     * 
     *         var exampleDroplet = new Droplet(&#34;exampleDroplet&#34;, DropletArgs.builder()        
     *             .size(&#34;s-1vcpu-1gb&#34;)
     *             .image(&#34;ubuntu-18-04-x64&#34;)
     *             .region(&#34;nyc3&#34;)
     *             .vpcUuid(exampleVpc.applyValue(getVpcResult -&gt; getVpcResult.id()))
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetVpcResult> getVpcPlain(GetVpcPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("digitalocean:index/getVpc:getVpc", TypeShape.of(GetVpcResult.class), args, Utilities.withVersion(options));
    }
}
