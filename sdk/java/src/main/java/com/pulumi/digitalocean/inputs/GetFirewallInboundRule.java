// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFirewallInboundRule extends com.pulumi.resources.InvokeArgs {

    public static final GetFirewallInboundRule Empty = new GetFirewallInboundRule();

    /**
     * The ports on which traffic will be allowed
     * specified as a string containing a single port, a range (e.g. &#34;8000-9000&#34;),
     * or &#34;1-65535&#34; to open all ports for a protocol. Required for when protocol is
     * `tcp` or `udp`.
     * 
     */
    @Import(name="portRange")
    private @Nullable String portRange;

    /**
     * @return The ports on which traffic will be allowed
     * specified as a string containing a single port, a range (e.g. &#34;8000-9000&#34;),
     * or &#34;1-65535&#34; to open all ports for a protocol. Required for when protocol is
     * `tcp` or `udp`.
     * 
     */
    public Optional<String> portRange() {
        return Optional.ofNullable(this.portRange);
    }

    /**
     * The type of traffic to be allowed.
     * This may be one of &#34;tcp&#34;, &#34;udp&#34;, or &#34;icmp&#34;.
     * 
     */
    @Import(name="protocol", required=true)
    private String protocol;

    /**
     * @return The type of traffic to be allowed.
     * This may be one of &#34;tcp&#34;, &#34;udp&#34;, or &#34;icmp&#34;.
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    /**
     * An array of strings containing the IPv4
     * addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
     * inbound traffic will be accepted.
     * 
     */
    @Import(name="sourceAddresses")
    private @Nullable List<String> sourceAddresses;

    /**
     * @return An array of strings containing the IPv4
     * addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
     * inbound traffic will be accepted.
     * 
     */
    public Optional<List<String>> sourceAddresses() {
        return Optional.ofNullable(this.sourceAddresses);
    }

    /**
     * An array containing the IDs of
     * the Droplets from which the inbound traffic will be accepted.
     * 
     */
    @Import(name="sourceDropletIds")
    private @Nullable List<Integer> sourceDropletIds;

    /**
     * @return An array containing the IDs of
     * the Droplets from which the inbound traffic will be accepted.
     * 
     */
    public Optional<List<Integer>> sourceDropletIds() {
        return Optional.ofNullable(this.sourceDropletIds);
    }

    @Import(name="sourceKubernetesIds")
    private @Nullable List<String> sourceKubernetesIds;

    public Optional<List<String>> sourceKubernetesIds() {
        return Optional.ofNullable(this.sourceKubernetesIds);
    }

    /**
     * An array containing the IDs
     * of the Load Balancers from which the inbound traffic will be accepted.
     * 
     */
    @Import(name="sourceLoadBalancerUids")
    private @Nullable List<String> sourceLoadBalancerUids;

    /**
     * @return An array containing the IDs
     * of the Load Balancers from which the inbound traffic will be accepted.
     * 
     */
    public Optional<List<String>> sourceLoadBalancerUids() {
        return Optional.ofNullable(this.sourceLoadBalancerUids);
    }

    /**
     * A set of names of Tags corresponding to group of
     * Droplets from which the inbound traffic will be accepted.
     * 
     */
    @Import(name="sourceTags")
    private @Nullable List<String> sourceTags;

    /**
     * @return A set of names of Tags corresponding to group of
     * Droplets from which the inbound traffic will be accepted.
     * 
     */
    public Optional<List<String>> sourceTags() {
        return Optional.ofNullable(this.sourceTags);
    }

    private GetFirewallInboundRule() {}

    private GetFirewallInboundRule(GetFirewallInboundRule $) {
        this.portRange = $.portRange;
        this.protocol = $.protocol;
        this.sourceAddresses = $.sourceAddresses;
        this.sourceDropletIds = $.sourceDropletIds;
        this.sourceKubernetesIds = $.sourceKubernetesIds;
        this.sourceLoadBalancerUids = $.sourceLoadBalancerUids;
        this.sourceTags = $.sourceTags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFirewallInboundRule defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFirewallInboundRule $;

        public Builder() {
            $ = new GetFirewallInboundRule();
        }

        public Builder(GetFirewallInboundRule defaults) {
            $ = new GetFirewallInboundRule(Objects.requireNonNull(defaults));
        }

        /**
         * @param portRange The ports on which traffic will be allowed
         * specified as a string containing a single port, a range (e.g. &#34;8000-9000&#34;),
         * or &#34;1-65535&#34; to open all ports for a protocol. Required for when protocol is
         * `tcp` or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder portRange(@Nullable String portRange) {
            $.portRange = portRange;
            return this;
        }

        /**
         * @param protocol The type of traffic to be allowed.
         * This may be one of &#34;tcp&#34;, &#34;udp&#34;, or &#34;icmp&#34;.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param sourceAddresses An array of strings containing the IPv4
         * addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
         * inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddresses(@Nullable List<String> sourceAddresses) {
            $.sourceAddresses = sourceAddresses;
            return this;
        }

        /**
         * @param sourceAddresses An array of strings containing the IPv4
         * addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs from which the
         * inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceAddresses(String... sourceAddresses) {
            return sourceAddresses(List.of(sourceAddresses));
        }

        /**
         * @param sourceDropletIds An array containing the IDs of
         * the Droplets from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceDropletIds(@Nullable List<Integer> sourceDropletIds) {
            $.sourceDropletIds = sourceDropletIds;
            return this;
        }

        /**
         * @param sourceDropletIds An array containing the IDs of
         * the Droplets from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceDropletIds(Integer... sourceDropletIds) {
            return sourceDropletIds(List.of(sourceDropletIds));
        }

        public Builder sourceKubernetesIds(@Nullable List<String> sourceKubernetesIds) {
            $.sourceKubernetesIds = sourceKubernetesIds;
            return this;
        }

        public Builder sourceKubernetesIds(String... sourceKubernetesIds) {
            return sourceKubernetesIds(List.of(sourceKubernetesIds));
        }

        /**
         * @param sourceLoadBalancerUids An array containing the IDs
         * of the Load Balancers from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceLoadBalancerUids(@Nullable List<String> sourceLoadBalancerUids) {
            $.sourceLoadBalancerUids = sourceLoadBalancerUids;
            return this;
        }

        /**
         * @param sourceLoadBalancerUids An array containing the IDs
         * of the Load Balancers from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceLoadBalancerUids(String... sourceLoadBalancerUids) {
            return sourceLoadBalancerUids(List.of(sourceLoadBalancerUids));
        }

        /**
         * @param sourceTags A set of names of Tags corresponding to group of
         * Droplets from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceTags(@Nullable List<String> sourceTags) {
            $.sourceTags = sourceTags;
            return this;
        }

        /**
         * @param sourceTags A set of names of Tags corresponding to group of
         * Droplets from which the inbound traffic will be accepted.
         * 
         * @return builder
         * 
         */
        public Builder sourceTags(String... sourceTags) {
            return sourceTags(List.of(sourceTags));
        }

        public GetFirewallInboundRule build() {
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("GetFirewallInboundRule", "protocol");
            }
            return $;
        }
    }

}
