// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.GenaiOpenaiApiKeyModelArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenaiOpenaiApiKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenaiOpenaiApiKeyArgs Empty = new GenaiOpenaiApiKeyArgs();

    /**
     * The OpenAI API key.
     * 
     */
    @Import(name="apiKey", required=true)
    private Output<String> apiKey;

    /**
     * @return The OpenAI API key.
     * 
     */
    public Output<String> apiKey() {
        return this.apiKey;
    }

    /**
     * Models associated with the OpenAI API key
     * 
     */
    @Import(name="models")
    private @Nullable Output<List<GenaiOpenaiApiKeyModelArgs>> models;

    /**
     * @return Models associated with the OpenAI API key
     * 
     */
    public Optional<Output<List<GenaiOpenaiApiKeyModelArgs>>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * A name for the API key.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the API key.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private GenaiOpenaiApiKeyArgs() {}

    private GenaiOpenaiApiKeyArgs(GenaiOpenaiApiKeyArgs $) {
        this.apiKey = $.apiKey;
        this.models = $.models;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenaiOpenaiApiKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenaiOpenaiApiKeyArgs $;

        public Builder() {
            $ = new GenaiOpenaiApiKeyArgs();
        }

        public Builder(GenaiOpenaiApiKeyArgs defaults) {
            $ = new GenaiOpenaiApiKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKey The OpenAI API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(Output<String> apiKey) {
            $.apiKey = apiKey;
            return this;
        }

        /**
         * @param apiKey The OpenAI API key.
         * 
         * @return builder
         * 
         */
        public Builder apiKey(String apiKey) {
            return apiKey(Output.of(apiKey));
        }

        /**
         * @param models Models associated with the OpenAI API key
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable Output<List<GenaiOpenaiApiKeyModelArgs>> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models Models associated with the OpenAI API key
         * 
         * @return builder
         * 
         */
        public Builder models(List<GenaiOpenaiApiKeyModelArgs> models) {
            return models(Output.of(models));
        }

        /**
         * @param models Models associated with the OpenAI API key
         * 
         * @return builder
         * 
         */
        public Builder models(GenaiOpenaiApiKeyModelArgs... models) {
            return models(List.of(models));
        }

        /**
         * @param name A name for the API key.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the API key.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public GenaiOpenaiApiKeyArgs build() {
            if ($.apiKey == null) {
                throw new MissingRequiredPropertyException("GenaiOpenaiApiKeyArgs", "apiKey");
            }
            return $;
        }
    }

}
