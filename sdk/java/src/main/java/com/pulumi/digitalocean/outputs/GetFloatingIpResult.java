// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFloatingIpResult {
    /**
     * @return The Droplet id that the floating IP has been assigned to.
     * 
     */
    private Integer dropletId;
    /**
     * @return The uniform resource name of the floating IP.
     * 
     */
    private String floatingIpUrn;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String ipAddress;
    /**
     * @return The region that the floating IP is reserved to.
     * 
     */
    private String region;

    private GetFloatingIpResult() {}
    /**
     * @return The Droplet id that the floating IP has been assigned to.
     * 
     */
    public Integer dropletId() {
        return this.dropletId;
    }
    /**
     * @return The uniform resource name of the floating IP.
     * 
     */
    public String floatingIpUrn() {
        return this.floatingIpUrn;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return The region that the floating IP is reserved to.
     * 
     */
    public String region() {
        return this.region;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFloatingIpResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dropletId;
        private String floatingIpUrn;
        private String id;
        private String ipAddress;
        private String region;
        public Builder() {}
        public Builder(GetFloatingIpResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropletId = defaults.dropletId;
    	      this.floatingIpUrn = defaults.floatingIpUrn;
    	      this.id = defaults.id;
    	      this.ipAddress = defaults.ipAddress;
    	      this.region = defaults.region;
        }

        @CustomType.Setter
        public Builder dropletId(Integer dropletId) {
            if (dropletId == null) {
              throw new MissingRequiredPropertyException("GetFloatingIpResult", "dropletId");
            }
            this.dropletId = dropletId;
            return this;
        }
        @CustomType.Setter
        public Builder floatingIpUrn(String floatingIpUrn) {
            if (floatingIpUrn == null) {
              throw new MissingRequiredPropertyException("GetFloatingIpResult", "floatingIpUrn");
            }
            this.floatingIpUrn = floatingIpUrn;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFloatingIpResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetFloatingIpResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetFloatingIpResult", "region");
            }
            this.region = region;
            return this;
        }
        public GetFloatingIpResult build() {
            final var _resultValue = new GetFloatingIpResult();
            _resultValue.dropletId = dropletId;
            _resultValue.floatingIpUrn = floatingIpUrn;
            _resultValue.id = id;
            _resultValue.ipAddress = ipAddress;
            _resultValue.region = region;
            return _resultValue;
        }
    }
}
