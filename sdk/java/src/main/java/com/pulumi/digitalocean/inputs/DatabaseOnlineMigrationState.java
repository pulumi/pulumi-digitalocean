// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.DatabaseOnlineMigrationSourceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseOnlineMigrationState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseOnlineMigrationState Empty = new DatabaseOnlineMigrationState();

    /**
     * The ID of the target MySQL cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the target MySQL cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The date and time when the online migration was created
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time when the online migration was created
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * When set to true, enables SSL encryption when connecting to the source database.
     * 
     */
    @Import(name="disableSsl")
    private @Nullable Output<Boolean> disableSsl;

    /**
     * @return When set to true, enables SSL encryption when connecting to the source database.
     * 
     */
    public Optional<Output<Boolean>> disableSsl() {
        return Optional.ofNullable(this.disableSsl);
    }

    /**
     * A list of databases that should be ignored during migration.
     * 
     */
    @Import(name="ignoreDbs")
    private @Nullable Output<List<String>> ignoreDbs;

    /**
     * @return A list of databases that should be ignored during migration.
     * 
     */
    public Optional<Output<List<String>>> ignoreDbs() {
        return Optional.ofNullable(this.ignoreDbs);
    }

    /**
     * Configuration for migration
     * 
     */
    @Import(name="source")
    private @Nullable Output<DatabaseOnlineMigrationSourceArgs> source;

    /**
     * @return Configuration for migration
     * 
     */
    public Optional<Output<DatabaseOnlineMigrationSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * The status of the online migration
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The status of the online migration
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private DatabaseOnlineMigrationState() {}

    private DatabaseOnlineMigrationState(DatabaseOnlineMigrationState $) {
        this.clusterId = $.clusterId;
        this.createdAt = $.createdAt;
        this.disableSsl = $.disableSsl;
        this.ignoreDbs = $.ignoreDbs;
        this.source = $.source;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseOnlineMigrationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseOnlineMigrationState $;

        public Builder() {
            $ = new DatabaseOnlineMigrationState();
        }

        public Builder(DatabaseOnlineMigrationState defaults) {
            $ = new DatabaseOnlineMigrationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param createdAt The date and time when the online migration was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time when the online migration was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param disableSsl When set to true, enables SSL encryption when connecting to the source database.
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(@Nullable Output<Boolean> disableSsl) {
            $.disableSsl = disableSsl;
            return this;
        }

        /**
         * @param disableSsl When set to true, enables SSL encryption when connecting to the source database.
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(Boolean disableSsl) {
            return disableSsl(Output.of(disableSsl));
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(@Nullable Output<List<String>> ignoreDbs) {
            $.ignoreDbs = ignoreDbs;
            return this;
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(List<String> ignoreDbs) {
            return ignoreDbs(Output.of(ignoreDbs));
        }

        /**
         * @param ignoreDbs A list of databases that should be ignored during migration.
         * 
         * @return builder
         * 
         */
        public Builder ignoreDbs(String... ignoreDbs) {
            return ignoreDbs(List.of(ignoreDbs));
        }

        /**
         * @param source Configuration for migration
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<DatabaseOnlineMigrationSourceArgs> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Configuration for migration
         * 
         * @return builder
         * 
         */
        public Builder source(DatabaseOnlineMigrationSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param status The status of the online migration
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The status of the online migration
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public DatabaseOnlineMigrationState build() {
            return $;
        }
    }

}
