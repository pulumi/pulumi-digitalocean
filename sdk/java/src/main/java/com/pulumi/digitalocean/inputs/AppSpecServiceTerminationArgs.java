// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSpecServiceTerminationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSpecServiceTerminationArgs Empty = new AppSpecServiceTerminationArgs();

    /**
     * The number of seconds to wait between selecting a container instance for termination and issuing the TERM signal. Selecting a container instance for termination begins an asynchronous drain of new requests on upstream load-balancers. Default: 15 seconds, Minimum 1, Maximum 110.
     * 
     * A `static_site` can contain:
     * 
     */
    @Import(name="drainSeconds")
    private @Nullable Output<Integer> drainSeconds;

    /**
     * @return The number of seconds to wait between selecting a container instance for termination and issuing the TERM signal. Selecting a container instance for termination begins an asynchronous drain of new requests on upstream load-balancers. Default: 15 seconds, Minimum 1, Maximum 110.
     * 
     * A `static_site` can contain:
     * 
     */
    public Optional<Output<Integer>> drainSeconds() {
        return Optional.ofNullable(this.drainSeconds);
    }

    /**
     * The number of seconds to wait between sending a TERM signal to a container and issuing a KILL which causes immediate shutdown. Default: 120, Minimum 1, Maximum 600.
     * 
     * A `function` component can contain:
     * 
     */
    @Import(name="gracePeriodSeconds")
    private @Nullable Output<Integer> gracePeriodSeconds;

    /**
     * @return The number of seconds to wait between sending a TERM signal to a container and issuing a KILL which causes immediate shutdown. Default: 120, Minimum 1, Maximum 600.
     * 
     * A `function` component can contain:
     * 
     */
    public Optional<Output<Integer>> gracePeriodSeconds() {
        return Optional.ofNullable(this.gracePeriodSeconds);
    }

    private AppSpecServiceTerminationArgs() {}

    private AppSpecServiceTerminationArgs(AppSpecServiceTerminationArgs $) {
        this.drainSeconds = $.drainSeconds;
        this.gracePeriodSeconds = $.gracePeriodSeconds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSpecServiceTerminationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSpecServiceTerminationArgs $;

        public Builder() {
            $ = new AppSpecServiceTerminationArgs();
        }

        public Builder(AppSpecServiceTerminationArgs defaults) {
            $ = new AppSpecServiceTerminationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param drainSeconds The number of seconds to wait between selecting a container instance for termination and issuing the TERM signal. Selecting a container instance for termination begins an asynchronous drain of new requests on upstream load-balancers. Default: 15 seconds, Minimum 1, Maximum 110.
         * 
         * A `static_site` can contain:
         * 
         * @return builder
         * 
         */
        public Builder drainSeconds(@Nullable Output<Integer> drainSeconds) {
            $.drainSeconds = drainSeconds;
            return this;
        }

        /**
         * @param drainSeconds The number of seconds to wait between selecting a container instance for termination and issuing the TERM signal. Selecting a container instance for termination begins an asynchronous drain of new requests on upstream load-balancers. Default: 15 seconds, Minimum 1, Maximum 110.
         * 
         * A `static_site` can contain:
         * 
         * @return builder
         * 
         */
        public Builder drainSeconds(Integer drainSeconds) {
            return drainSeconds(Output.of(drainSeconds));
        }

        /**
         * @param gracePeriodSeconds The number of seconds to wait between sending a TERM signal to a container and issuing a KILL which causes immediate shutdown. Default: 120, Minimum 1, Maximum 600.
         * 
         * A `function` component can contain:
         * 
         * @return builder
         * 
         */
        public Builder gracePeriodSeconds(@Nullable Output<Integer> gracePeriodSeconds) {
            $.gracePeriodSeconds = gracePeriodSeconds;
            return this;
        }

        /**
         * @param gracePeriodSeconds The number of seconds to wait between sending a TERM signal to a container and issuing a KILL which causes immediate shutdown. Default: 120, Minimum 1, Maximum 600.
         * 
         * A `function` component can contain:
         * 
         * @return builder
         * 
         */
        public Builder gracePeriodSeconds(Integer gracePeriodSeconds) {
            return gracePeriodSeconds(Output.of(gracePeriodSeconds));
        }

        public AppSpecServiceTerminationArgs build() {
            return $;
        }
    }

}
