// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDropletArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDropletArgs Empty = new GetDropletArgs();

    /**
     * A boolean value specifying whether or not to search GPU Droplets
     * 
     */
    @Import(name="gpu")
    private @Nullable Output<Boolean> gpu;

    /**
     * @return A boolean value specifying whether or not to search GPU Droplets
     * 
     */
    public Optional<Output<Boolean>> gpu() {
        return Optional.ofNullable(this.gpu);
    }

    /**
     * The ID of the Droplet
     * 
     */
    @Import(name="id")
    private @Nullable Output<Integer> id;

    /**
     * @return The ID of the Droplet
     * 
     */
    public Optional<Output<Integer>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The name of the Droplet.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Droplet.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A tag applied to the Droplet.
     * 
     * To include GPU Droplets when searching by name, use:
     * 
     */
    @Import(name="tag")
    private @Nullable Output<String> tag;

    /**
     * @return A tag applied to the Droplet.
     * 
     * To include GPU Droplets when searching by name, use:
     * 
     */
    public Optional<Output<String>> tag() {
        return Optional.ofNullable(this.tag);
    }

    private GetDropletArgs() {}

    private GetDropletArgs(GetDropletArgs $) {
        this.gpu = $.gpu;
        this.id = $.id;
        this.name = $.name;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDropletArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDropletArgs $;

        public Builder() {
            $ = new GetDropletArgs();
        }

        public Builder(GetDropletArgs defaults) {
            $ = new GetDropletArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gpu A boolean value specifying whether or not to search GPU Droplets
         * 
         * @return builder
         * 
         */
        public Builder gpu(@Nullable Output<Boolean> gpu) {
            $.gpu = gpu;
            return this;
        }

        /**
         * @param gpu A boolean value specifying whether or not to search GPU Droplets
         * 
         * @return builder
         * 
         */
        public Builder gpu(Boolean gpu) {
            return gpu(Output.of(gpu));
        }

        /**
         * @param id The ID of the Droplet
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<Integer> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The ID of the Droplet
         * 
         * @return builder
         * 
         */
        public Builder id(Integer id) {
            return id(Output.of(id));
        }

        /**
         * @param name The name of the Droplet.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Droplet.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tag A tag applied to the Droplet.
         * 
         * To include GPU Droplets when searching by name, use:
         * 
         * @return builder
         * 
         */
        public Builder tag(@Nullable Output<String> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag A tag applied to the Droplet.
         * 
         * To include GPU Droplets when searching by name, use:
         * 
         * @return builder
         * 
         */
        public Builder tag(String tag) {
            return tag(Output.of(tag));
        }

        public GetDropletArgs build() {
            return $;
        }
    }

}
