// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.digitalocean.DatabaseMysqlConfigArgs;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.inputs.DatabaseMysqlConfigState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a virtual resource that can be used to change advanced configuration
 * options for a DigitalOcean managed MySQL database cluster.
 * 
 * &gt; **Note** MySQL configurations are only removed from state when destroyed. The remote configuration is not unset.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.DatabaseCluster;
 * import com.pulumi.digitalocean.DatabaseClusterArgs;
 * import com.pulumi.digitalocean.DatabaseMysqlConfig;
 * import com.pulumi.digitalocean.DatabaseMysqlConfigArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleDatabaseCluster = new DatabaseCluster(&#34;exampleDatabaseCluster&#34;, DatabaseClusterArgs.builder()        
 *             .engine(&#34;mysql&#34;)
 *             .version(&#34;8&#34;)
 *             .size(&#34;db-s-1vcpu-1gb&#34;)
 *             .region(&#34;nyc1&#34;)
 *             .nodeCount(1)
 *             .build());
 * 
 *         var exampleDatabaseMysqlConfig = new DatabaseMysqlConfig(&#34;exampleDatabaseMysqlConfig&#34;, DatabaseMysqlConfigArgs.builder()        
 *             .clusterId(exampleDatabaseCluster.id())
 *             .connectTimeout(10)
 *             .defaultTimeZone(&#34;UTC&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * A MySQL database cluster&#39;s configuration can be imported using the `id` the parent cluster, e.g.
 * 
 * ```sh
 *  $ pulumi import digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig example 4b62829a-9c42-465b-aaa3-84051048e712
 * ```
 * 
 */
@ResourceType(type="digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig")
public class DatabaseMysqlConfig extends com.pulumi.resources.CustomResource {
    /**
     * The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    @Export(name="backupHour", type=Integer.class, parameters={})
    private Output<Integer> backupHour;

    /**
     * @return The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    public Output<Integer> backupHour() {
        return this.backupHour;
    }
    /**
     * The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    @Export(name="backupMinute", type=Integer.class, parameters={})
    private Output<Integer> backupMinute;

    /**
     * @return The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
     * 
     */
    public Output<Integer> backupMinute() {
        return this.backupMinute;
    }
    /**
     * The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    @Export(name="binlogRetentionPeriod", type=Integer.class, parameters={})
    private Output<Integer> binlogRetentionPeriod;

    /**
     * @return The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
     * 
     */
    public Output<Integer> binlogRetentionPeriod() {
        return this.binlogRetentionPeriod;
    }
    /**
     * The ID of the target MySQL cluster.
     * 
     */
    @Export(name="clusterId", type=String.class, parameters={})
    private Output<String> clusterId;

    /**
     * @return The ID of the target MySQL cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }
    /**
     * The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
     * 
     */
    @Export(name="connectTimeout", type=Integer.class, parameters={})
    private Output<Integer> connectTimeout;

    /**
     * @return The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
     * 
     */
    public Output<Integer> connectTimeout() {
        return this.connectTimeout;
    }
    /**
     * Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
     * 
     */
    @Export(name="defaultTimeZone", type=String.class, parameters={})
    private Output<String> defaultTimeZone;

    /**
     * @return Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
     * 
     */
    public Output<String> defaultTimeZone() {
        return this.defaultTimeZone;
    }
    /**
     * The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
     * 
     */
    @Export(name="groupConcatMaxLen", type=Integer.class, parameters={})
    private Output<Integer> groupConcatMaxLen;

    /**
     * @return The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
     * 
     */
    public Output<Integer> groupConcatMaxLen() {
        return this.groupConcatMaxLen;
    }
    /**
     * The time, in seconds, before cached statistics expire.
     * 
     */
    @Export(name="informationSchemaStatsExpiry", type=Integer.class, parameters={})
    private Output<Integer> informationSchemaStatsExpiry;

    /**
     * @return The time, in seconds, before cached statistics expire.
     * 
     */
    public Output<Integer> informationSchemaStatsExpiry() {
        return this.informationSchemaStatsExpiry;
    }
    /**
     * The minimum length of words that an InnoDB FULLTEXT index stores.
     * 
     */
    @Export(name="innodbFtMinTokenSize", type=Integer.class, parameters={})
    private Output<Integer> innodbFtMinTokenSize;

    /**
     * @return The minimum length of words that an InnoDB FULLTEXT index stores.
     * 
     */
    public Output<Integer> innodbFtMinTokenSize() {
        return this.innodbFtMinTokenSize;
    }
    /**
     * The InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    @Export(name="innodbFtServerStopwordTable", type=String.class, parameters={})
    private Output<String> innodbFtServerStopwordTable;

    /**
     * @return The InnoDB FULLTEXT index stopword list for all InnoDB tables.
     * 
     */
    public Output<String> innodbFtServerStopwordTable() {
        return this.innodbFtServerStopwordTable;
    }
    /**
     * The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
     * 
     */
    @Export(name="innodbLockWaitTimeout", type=Integer.class, parameters={})
    private Output<Integer> innodbLockWaitTimeout;

    /**
     * @return The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
     * 
     */
    public Output<Integer> innodbLockWaitTimeout() {
        return this.innodbLockWaitTimeout;
    }
    /**
     * The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
     * 
     */
    @Export(name="innodbLogBufferSize", type=Integer.class, parameters={})
    private Output<Integer> innodbLogBufferSize;

    /**
     * @return The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
     * 
     */
    public Output<Integer> innodbLogBufferSize() {
        return this.innodbLogBufferSize;
    }
    /**
     * The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    @Export(name="innodbOnlineAlterLogMaxSize", type=Integer.class, parameters={})
    private Output<Integer> innodbOnlineAlterLogMaxSize;

    /**
     * @return The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
     * 
     */
    public Output<Integer> innodbOnlineAlterLogMaxSize() {
        return this.innodbOnlineAlterLogMaxSize;
    }
    /**
     * When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
     * 
     */
    @Export(name="innodbPrintAllDeadlocks", type=Boolean.class, parameters={})
    private Output<Boolean> innodbPrintAllDeadlocks;

    /**
     * @return When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
     * 
     */
    public Output<Boolean> innodbPrintAllDeadlocks() {
        return this.innodbPrintAllDeadlocks;
    }
    /**
     * When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
     * 
     */
    @Export(name="innodbRollbackOnTimeout", type=Boolean.class, parameters={})
    private Output<Boolean> innodbRollbackOnTimeout;

    /**
     * @return When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
     * 
     */
    public Output<Boolean> innodbRollbackOnTimeout() {
        return this.innodbRollbackOnTimeout;
    }
    /**
     * The time, in seconds, the server waits for activity on an interactive. connection before closing it.
     * 
     */
    @Export(name="interactiveTimeout", type=Integer.class, parameters={})
    private Output<Integer> interactiveTimeout;

    /**
     * @return The time, in seconds, the server waits for activity on an interactive. connection before closing it.
     * 
     */
    public Output<Integer> interactiveTimeout() {
        return this.interactiveTimeout;
    }
    /**
     * The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
     * 
     */
    @Export(name="internalTmpMemStorageEngine", type=String.class, parameters={})
    private Output<String> internalTmpMemStorageEngine;

    /**
     * @return The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
     * 
     */
    public Output<String> internalTmpMemStorageEngine() {
        return this.internalTmpMemStorageEngine;
    }
    /**
     * The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
     * 
     */
    @Export(name="longQueryTime", type=Double.class, parameters={})
    private Output<Double> longQueryTime;

    /**
     * @return The time, in seconds, for a query to take to execute before being captured by `slow_query_logs`. Default is `10` seconds.
     * 
     */
    public Output<Double> longQueryTime() {
        return this.longQueryTime;
    }
    /**
     * The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
     * 
     */
    @Export(name="maxAllowedPacket", type=Integer.class, parameters={})
    private Output<Integer> maxAllowedPacket;

    /**
     * @return The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
     * 
     */
    public Output<Integer> maxAllowedPacket() {
        return this.maxAllowedPacket;
    }
    /**
     * The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
     * 
     */
    @Export(name="maxHeapTableSize", type=Integer.class, parameters={})
    private Output<Integer> maxHeapTableSize;

    /**
     * @return The maximum size, in bytes, of internal in-memory tables. Also set `tmp_table_size`. Default is `16777216` (16M)
     * 
     */
    public Output<Integer> maxHeapTableSize() {
        return this.maxHeapTableSize;
    }
    /**
     * The time, in seconds, to wait for more data from an existing connection. aborting the read.
     * 
     */
    @Export(name="netReadTimeout", type=Integer.class, parameters={})
    private Output<Integer> netReadTimeout;

    /**
     * @return The time, in seconds, to wait for more data from an existing connection. aborting the read.
     * 
     */
    public Output<Integer> netReadTimeout() {
        return this.netReadTimeout;
    }
    /**
     * The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    @Export(name="netWriteTimeout", type=Integer.class, parameters={})
    private Output<Integer> netWriteTimeout;

    /**
     * @return The number of seconds to wait for a block to be written to a connection before aborting the write.
     * 
     */
    public Output<Integer> netWriteTimeout() {
        return this.netWriteTimeout;
    }
    /**
     * When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
     * 
     */
    @Export(name="slowQueryLog", type=Boolean.class, parameters={})
    private Output<Boolean> slowQueryLog;

    /**
     * @return When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
     * 
     */
    public Output<Boolean> slowQueryLog() {
        return this.slowQueryLog;
    }
    /**
     * The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
     * 
     */
    @Export(name="sortBufferSize", type=Integer.class, parameters={})
    private Output<Integer> sortBufferSize;

    /**
     * @return The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
     * 
     */
    public Output<Integer> sortBufferSize() {
        return this.sortBufferSize;
    }
    /**
     * Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
     * 
     */
    @Export(name="sqlMode", type=String.class, parameters={})
    private Output<String> sqlMode;

    /**
     * @return Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
     * 
     */
    public Output<String> sqlMode() {
        return this.sqlMode;
    }
    /**
     * Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    @Export(name="sqlRequirePrimaryKey", type=Boolean.class, parameters={})
    private Output<Boolean> sqlRequirePrimaryKey;

    /**
     * @return Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
     * 
     */
    public Output<Boolean> sqlRequirePrimaryKey() {
        return this.sqlRequirePrimaryKey;
    }
    /**
     * The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
     * 
     */
    @Export(name="tmpTableSize", type=Integer.class, parameters={})
    private Output<Integer> tmpTableSize;

    /**
     * @return The maximum size, in bytes, of internal in-memory tables. Also set `max_heap_table_size`. Default is `16777216` (16M).
     * 
     */
    public Output<Integer> tmpTableSize() {
        return this.tmpTableSize;
    }
    /**
     * The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    @Export(name="waitTimeout", type=Integer.class, parameters={})
    private Output<Integer> waitTimeout;

    /**
     * @return The number of seconds the server waits for activity on a noninteractive connection before closing it.
     * 
     */
    public Output<Integer> waitTimeout() {
        return this.waitTimeout;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseMysqlConfig(String name) {
        this(name, DatabaseMysqlConfigArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseMysqlConfig(String name, DatabaseMysqlConfigArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseMysqlConfig(String name, DatabaseMysqlConfigArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig", name, args == null ? DatabaseMysqlConfigArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private DatabaseMysqlConfig(String name, Output<String> id, @Nullable DatabaseMysqlConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseMysqlConfig get(String name, Output<String> id, @Nullable DatabaseMysqlConfigState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseMysqlConfig(name, id, state, options);
    }
}
