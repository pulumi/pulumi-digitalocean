// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVolumeResult {
    /**
     * @return Text describing a block storage volume.
     * 
     */
    private @Nullable String description;
    /**
     * @return A list of associated Droplet ids.
     * 
     */
    private List<Integer> dropletIds;
    /**
     * @return Filesystem label currently in-use on the block storage volume.
     * 
     */
    private String filesystemLabel;
    /**
     * @return Filesystem type currently in-use on the block storage volume.
     * 
     */
    private String filesystemType;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String name;
    private @Nullable String region;
    /**
     * @return The size of the block storage volume in GiB.
     * 
     */
    private Integer size;
    /**
     * @return A list of the tags associated to the Volume.
     * 
     */
    private List<String> tags;
    /**
     * @return The uniform resource name for the storage volume.
     * 
     */
    private String urn;

    private GetVolumeResult() {}
    /**
     * @return Text describing a block storage volume.
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return A list of associated Droplet ids.
     * 
     */
    public List<Integer> dropletIds() {
        return this.dropletIds;
    }
    /**
     * @return Filesystem label currently in-use on the block storage volume.
     * 
     */
    public String filesystemLabel() {
        return this.filesystemLabel;
    }
    /**
     * @return Filesystem type currently in-use on the block storage volume.
     * 
     */
    public String filesystemType() {
        return this.filesystemType;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> region() {
        return Optional.ofNullable(this.region);
    }
    /**
     * @return The size of the block storage volume in GiB.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return A list of the tags associated to the Volume.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The uniform resource name for the storage volume.
     * 
     */
    public String urn() {
        return this.urn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String description;
        private List<Integer> dropletIds;
        private String filesystemLabel;
        private String filesystemType;
        private String id;
        private String name;
        private @Nullable String region;
        private Integer size;
        private List<String> tags;
        private String urn;
        public Builder() {}
        public Builder(GetVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.dropletIds = defaults.dropletIds;
    	      this.filesystemLabel = defaults.filesystemLabel;
    	      this.filesystemType = defaults.filesystemType;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.tags = defaults.tags;
    	      this.urn = defaults.urn;
        }

        @CustomType.Setter
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dropletIds(List<Integer> dropletIds) {
            this.dropletIds = Objects.requireNonNull(dropletIds);
            return this;
        }
        public Builder dropletIds(Integer... dropletIds) {
            return dropletIds(List.of(dropletIds));
        }
        @CustomType.Setter
        public Builder filesystemLabel(String filesystemLabel) {
            this.filesystemLabel = Objects.requireNonNull(filesystemLabel);
            return this;
        }
        @CustomType.Setter
        public Builder filesystemType(String filesystemType) {
            this.filesystemType = Objects.requireNonNull(filesystemType);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder region(@Nullable String region) {
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            this.size = Objects.requireNonNull(size);
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder urn(String urn) {
            this.urn = Objects.requireNonNull(urn);
            return this;
        }
        public GetVolumeResult build() {
            final var _resultValue = new GetVolumeResult();
            _resultValue.description = description;
            _resultValue.dropletIds = dropletIds;
            _resultValue.filesystemLabel = filesystemLabel;
            _resultValue.filesystemType = filesystemType;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.region = region;
            _resultValue.size = size;
            _resultValue.tags = tags;
            _resultValue.urn = urn;
            return _resultValue;
        }
    }
}
