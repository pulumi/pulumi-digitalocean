// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.GetRecordsFilter;
import com.pulumi.digitalocean.inputs.GetRecordsSort;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetRecordsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetRecordsPlainArgs Empty = new GetRecordsPlainArgs();

    /**
     * The domain name to search for DNS records
     * 
     */
    @Import(name="domain", required=true)
    private String domain;

    /**
     * @return The domain name to search for DNS records
     * 
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Filter the results.
     * The `filter` block is documented below.
     * 
     */
    @Import(name="filters")
    private @Nullable List<GetRecordsFilter> filters;

    /**
     * @return Filter the results.
     * The `filter` block is documented below.
     * 
     */
    public Optional<List<GetRecordsFilter>> filters() {
        return Optional.ofNullable(this.filters);
    }

    /**
     * Sort the results.
     * The `sort` block is documented below.
     * 
     */
    @Import(name="sorts")
    private @Nullable List<GetRecordsSort> sorts;

    /**
     * @return Sort the results.
     * The `sort` block is documented below.
     * 
     */
    public Optional<List<GetRecordsSort>> sorts() {
        return Optional.ofNullable(this.sorts);
    }

    private GetRecordsPlainArgs() {}

    private GetRecordsPlainArgs(GetRecordsPlainArgs $) {
        this.domain = $.domain;
        this.filters = $.filters;
        this.sorts = $.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetRecordsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetRecordsPlainArgs $;

        public Builder() {
            $ = new GetRecordsPlainArgs();
        }

        public Builder(GetRecordsPlainArgs defaults) {
            $ = new GetRecordsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain The domain name to search for DNS records
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param filters Filter the results.
         * The `filter` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filters(@Nullable List<GetRecordsFilter> filters) {
            $.filters = filters;
            return this;
        }

        /**
         * @param filters Filter the results.
         * The `filter` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder filters(GetRecordsFilter... filters) {
            return filters(List.of(filters));
        }

        /**
         * @param sorts Sort the results.
         * The `sort` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sorts(@Nullable List<GetRecordsSort> sorts) {
            $.sorts = sorts;
            return this;
        }

        /**
         * @param sorts Sort the results.
         * The `sort` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder sorts(GetRecordsSort... sorts) {
            return sorts(List.of(sorts));
        }

        public GetRecordsPlainArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("GetRecordsPlainArgs", "domain");
            }
            return $;
        }
    }

}
