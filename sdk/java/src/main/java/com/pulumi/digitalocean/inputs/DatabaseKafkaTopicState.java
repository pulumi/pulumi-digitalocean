// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.DatabaseKafkaTopicConfigArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseKafkaTopicState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseKafkaTopicState Empty = new DatabaseKafkaTopicState();

    /**
     * The ID of the source database cluster. Note: This must be a Kafka cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the source database cluster. Note: This must be a Kafka cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * A set of advanced configuration parameters. Defaults will be set for any of the parameters that are not included.
     * The `config` block is documented below.
     * 
     */
    @Import(name="configs")
    private @Nullable Output<List<DatabaseKafkaTopicConfigArgs>> configs;

    /**
     * @return A set of advanced configuration parameters. Defaults will be set for any of the parameters that are not included.
     * The `config` block is documented below.
     * 
     */
    public Optional<Output<List<DatabaseKafkaTopicConfigArgs>>> configs() {
        return Optional.ofNullable(this.configs);
    }

    /**
     * The name for the topic.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name for the topic.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The number of partitions for the topic. Default and minimum set at 3, maximum is 2048.
     * 
     */
    @Import(name="partitionCount")
    private @Nullable Output<Integer> partitionCount;

    /**
     * @return The number of partitions for the topic. Default and minimum set at 3, maximum is 2048.
     * 
     */
    public Optional<Output<Integer>> partitionCount() {
        return Optional.ofNullable(this.partitionCount);
    }

    /**
     * The number of nodes that topics are replicated across. Default and minimum set at 2, maximum is the number of nodes in the cluster.
     * 
     */
    @Import(name="replicationFactor")
    private @Nullable Output<Integer> replicationFactor;

    /**
     * @return The number of nodes that topics are replicated across. Default and minimum set at 2, maximum is the number of nodes in the cluster.
     * 
     */
    public Optional<Output<Integer>> replicationFactor() {
        return Optional.ofNullable(this.replicationFactor);
    }

    /**
     * The current status of the topic. Possible values are &#39;active&#39;, &#39;configuring&#39;, and &#39;deleting&#39;.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return The current status of the topic. Possible values are &#39;active&#39;, &#39;configuring&#39;, and &#39;deleting&#39;.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private DatabaseKafkaTopicState() {}

    private DatabaseKafkaTopicState(DatabaseKafkaTopicState $) {
        this.clusterId = $.clusterId;
        this.configs = $.configs;
        this.name = $.name;
        this.partitionCount = $.partitionCount;
        this.replicationFactor = $.replicationFactor;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseKafkaTopicState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseKafkaTopicState $;

        public Builder() {
            $ = new DatabaseKafkaTopicState();
        }

        public Builder(DatabaseKafkaTopicState defaults) {
            $ = new DatabaseKafkaTopicState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the source database cluster. Note: This must be a Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the source database cluster. Note: This must be a Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param configs A set of advanced configuration parameters. Defaults will be set for any of the parameters that are not included.
         * The `config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(@Nullable Output<List<DatabaseKafkaTopicConfigArgs>> configs) {
            $.configs = configs;
            return this;
        }

        /**
         * @param configs A set of advanced configuration parameters. Defaults will be set for any of the parameters that are not included.
         * The `config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(List<DatabaseKafkaTopicConfigArgs> configs) {
            return configs(Output.of(configs));
        }

        /**
         * @param configs A set of advanced configuration parameters. Defaults will be set for any of the parameters that are not included.
         * The `config` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder configs(DatabaseKafkaTopicConfigArgs... configs) {
            return configs(List.of(configs));
        }

        /**
         * @param name The name for the topic.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name for the topic.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param partitionCount The number of partitions for the topic. Default and minimum set at 3, maximum is 2048.
         * 
         * @return builder
         * 
         */
        public Builder partitionCount(@Nullable Output<Integer> partitionCount) {
            $.partitionCount = partitionCount;
            return this;
        }

        /**
         * @param partitionCount The number of partitions for the topic. Default and minimum set at 3, maximum is 2048.
         * 
         * @return builder
         * 
         */
        public Builder partitionCount(Integer partitionCount) {
            return partitionCount(Output.of(partitionCount));
        }

        /**
         * @param replicationFactor The number of nodes that topics are replicated across. Default and minimum set at 2, maximum is the number of nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder replicationFactor(@Nullable Output<Integer> replicationFactor) {
            $.replicationFactor = replicationFactor;
            return this;
        }

        /**
         * @param replicationFactor The number of nodes that topics are replicated across. Default and minimum set at 2, maximum is the number of nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder replicationFactor(Integer replicationFactor) {
            return replicationFactor(Output.of(replicationFactor));
        }

        /**
         * @param state The current status of the topic. Possible values are &#39;active&#39;, &#39;configuring&#39;, and &#39;deleting&#39;.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state The current status of the topic. Possible values are &#39;active&#39;, &#39;configuring&#39;, and &#39;deleting&#39;.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public DatabaseKafkaTopicState build() {
            return $;
        }
    }

}
