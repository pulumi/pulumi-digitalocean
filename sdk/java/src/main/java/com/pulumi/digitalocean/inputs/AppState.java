// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.AppDedicatedIpArgs;
import com.pulumi.digitalocean.inputs.AppSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppState extends com.pulumi.resources.ResourceArgs {

    public static final AppState Empty = new AppState();

    /**
     * The ID the app&#39;s currently active deployment.
     * 
     */
    @Import(name="activeDeploymentId")
    private @Nullable Output<String> activeDeploymentId;

    /**
     * @return The ID the app&#39;s currently active deployment.
     * 
     */
    public Optional<Output<String>> activeDeploymentId() {
        return Optional.ofNullable(this.activeDeploymentId);
    }

    /**
     * The uniform resource identifier for the app.
     * 
     */
    @Import(name="appUrn")
    private @Nullable Output<String> appUrn;

    /**
     * @return The uniform resource identifier for the app.
     * 
     */
    public Optional<Output<String>> appUrn() {
        return Optional.ofNullable(this.appUrn);
    }

    /**
     * The date and time of when the app was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time of when the app was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The dedicated egress IP addresses associated with the app.
     * 
     */
    @Import(name="dedicatedIps")
    private @Nullable Output<List<AppDedicatedIpArgs>> dedicatedIps;

    /**
     * @return The dedicated egress IP addresses associated with the app.
     * 
     */
    public Optional<Output<List<AppDedicatedIpArgs>>> dedicatedIps() {
        return Optional.ofNullable(this.dedicatedIps);
    }

    /**
     * The default URL to access the app.
     * 
     */
    @Import(name="defaultIngress")
    private @Nullable Output<String> defaultIngress;

    /**
     * @return The default URL to access the app.
     * 
     */
    public Optional<Output<String>> defaultIngress() {
        return Optional.ofNullable(this.defaultIngress);
    }

    /**
     * The live domain of the app.
     * 
     */
    @Import(name="liveDomain")
    private @Nullable Output<String> liveDomain;

    /**
     * @return The live domain of the app.
     * 
     */
    public Optional<Output<String>> liveDomain() {
        return Optional.ofNullable(this.liveDomain);
    }

    /**
     * The live URL of the app.
     * 
     */
    @Import(name="liveUrl")
    private @Nullable Output<String> liveUrl;

    /**
     * @return The live URL of the app.
     * 
     */
    public Optional<Output<String>> liveUrl() {
        return Optional.ofNullable(this.liveUrl);
    }

    /**
     * The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A DigitalOcean App spec describing the app.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<AppSpecArgs> spec;

    /**
     * @return A DigitalOcean App spec describing the app.
     * 
     */
    public Optional<Output<AppSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    /**
     * The date and time of when the app was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return The date and time of when the app was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private AppState() {}

    private AppState(AppState $) {
        this.activeDeploymentId = $.activeDeploymentId;
        this.appUrn = $.appUrn;
        this.createdAt = $.createdAt;
        this.dedicatedIps = $.dedicatedIps;
        this.defaultIngress = $.defaultIngress;
        this.liveDomain = $.liveDomain;
        this.liveUrl = $.liveUrl;
        this.projectId = $.projectId;
        this.spec = $.spec;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppState $;

        public Builder() {
            $ = new AppState();
        }

        public Builder(AppState defaults) {
            $ = new AppState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeDeploymentId The ID the app&#39;s currently active deployment.
         * 
         * @return builder
         * 
         */
        public Builder activeDeploymentId(@Nullable Output<String> activeDeploymentId) {
            $.activeDeploymentId = activeDeploymentId;
            return this;
        }

        /**
         * @param activeDeploymentId The ID the app&#39;s currently active deployment.
         * 
         * @return builder
         * 
         */
        public Builder activeDeploymentId(String activeDeploymentId) {
            return activeDeploymentId(Output.of(activeDeploymentId));
        }

        /**
         * @param appUrn The uniform resource identifier for the app.
         * 
         * @return builder
         * 
         */
        public Builder appUrn(@Nullable Output<String> appUrn) {
            $.appUrn = appUrn;
            return this;
        }

        /**
         * @param appUrn The uniform resource identifier for the app.
         * 
         * @return builder
         * 
         */
        public Builder appUrn(String appUrn) {
            return appUrn(Output.of(appUrn));
        }

        /**
         * @param createdAt The date and time of when the app was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time of when the app was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(@Nullable Output<List<AppDedicatedIpArgs>> dedicatedIps) {
            $.dedicatedIps = dedicatedIps;
            return this;
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(List<AppDedicatedIpArgs> dedicatedIps) {
            return dedicatedIps(Output.of(dedicatedIps));
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(AppDedicatedIpArgs... dedicatedIps) {
            return dedicatedIps(List.of(dedicatedIps));
        }

        /**
         * @param defaultIngress The default URL to access the app.
         * 
         * @return builder
         * 
         */
        public Builder defaultIngress(@Nullable Output<String> defaultIngress) {
            $.defaultIngress = defaultIngress;
            return this;
        }

        /**
         * @param defaultIngress The default URL to access the app.
         * 
         * @return builder
         * 
         */
        public Builder defaultIngress(String defaultIngress) {
            return defaultIngress(Output.of(defaultIngress));
        }

        /**
         * @param liveDomain The live domain of the app.
         * 
         * @return builder
         * 
         */
        public Builder liveDomain(@Nullable Output<String> liveDomain) {
            $.liveDomain = liveDomain;
            return this;
        }

        /**
         * @param liveDomain The live domain of the app.
         * 
         * @return builder
         * 
         */
        public Builder liveDomain(String liveDomain) {
            return liveDomain(Output.of(liveDomain));
        }

        /**
         * @param liveUrl The live URL of the app.
         * 
         * @return builder
         * 
         */
        public Builder liveUrl(@Nullable Output<String> liveUrl) {
            $.liveUrl = liveUrl;
            return this;
        }

        /**
         * @param liveUrl The live URL of the app.
         * 
         * @return builder
         * 
         */
        public Builder liveUrl(String liveUrl) {
            return liveUrl(Output.of(liveUrl));
        }

        /**
         * @param projectId The ID of the project that the app is assigned to.
         * 
         * A spec can contain multiple components.
         * 
         * A `service` can contain:
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that the app is assigned to.
         * 
         * A spec can contain multiple components.
         * 
         * A `service` can contain:
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param spec A DigitalOcean App spec describing the app.
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<AppSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec A DigitalOcean App spec describing the app.
         * 
         * @return builder
         * 
         */
        public Builder spec(AppSpecArgs spec) {
            return spec(Output.of(spec));
        }

        /**
         * @param updatedAt The date and time of when the app was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt The date and time of when the app was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public AppState build() {
            return $;
        }
    }

}
