// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs extends com.pulumi.resources.ResourceArgs {

    public static final GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs Empty = new GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs();

    /**
     * Number of completed datasources in the last indexing job
     * 
     */
    @Import(name="completedDatasources")
    private @Nullable Output<Integer> completedDatasources;

    /**
     * @return Number of completed datasources in the last indexing job
     * 
     */
    public Optional<Output<Integer>> completedDatasources() {
        return Optional.ofNullable(this.completedDatasources);
    }

    /**
     * Created At timestamp for the last indexing job
     * 
     */
    @Import(name="createdAt", required=true)
    private Output<String> createdAt;

    /**
     * @return Created At timestamp for the last indexing job
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }

    /**
     * Datasource UUIDs for the last indexing job
     * 
     */
    @Import(name="datasourceUuids")
    private @Nullable Output<List<String>> datasourceUuids;

    /**
     * @return Datasource UUIDs for the last indexing job
     * 
     */
    public Optional<Output<List<String>>> datasourceUuids() {
        return Optional.ofNullable(this.datasourceUuids);
    }

    /**
     * Timestamp when the last indexing job finished
     * 
     */
    @Import(name="finishedAt", required=true)
    private Output<String> finishedAt;

    /**
     * @return Timestamp when the last indexing job finished
     * 
     */
    public Output<String> finishedAt() {
        return this.finishedAt;
    }

    /**
     * UUID	of the Knowledge Base for the last indexing job
     * 
     */
    @Import(name="knowledgeBaseUuid")
    private @Nullable Output<String> knowledgeBaseUuid;

    /**
     * @return UUID	of the Knowledge Base for the last indexing job
     * 
     */
    public Optional<Output<String>> knowledgeBaseUuid() {
        return Optional.ofNullable(this.knowledgeBaseUuid);
    }

    /**
     * Phase of the last indexing job
     * 
     */
    @Import(name="phase")
    private @Nullable Output<String> phase;

    /**
     * @return Phase of the last indexing job
     * 
     */
    public Optional<Output<String>> phase() {
        return Optional.ofNullable(this.phase);
    }

    /**
     * Timestamp when the last indexing job started
     * 
     */
    @Import(name="startedAt", required=true)
    private Output<String> startedAt;

    /**
     * @return Timestamp when the last indexing job started
     * 
     */
    public Output<String> startedAt() {
        return this.startedAt;
    }

    /**
     * Number of tokens processed in the last indexing job
     * 
     */
    @Import(name="tokens")
    private @Nullable Output<Integer> tokens;

    /**
     * @return Number of tokens processed in the last indexing job
     * 
     */
    public Optional<Output<Integer>> tokens() {
        return Optional.ofNullable(this.tokens);
    }

    /**
     * Total number of datasources in the last indexing job
     * 
     */
    @Import(name="totalDatasources")
    private @Nullable Output<Integer> totalDatasources;

    /**
     * @return Total number of datasources in the last indexing job
     * 
     */
    public Optional<Output<Integer>> totalDatasources() {
        return Optional.ofNullable(this.totalDatasources);
    }

    /**
     * Timestamp when the last indexing job updated
     * 
     */
    @Import(name="updatedAt", required=true)
    private Output<String> updatedAt;

    /**
     * @return Timestamp when the last indexing job updated
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     * UUID	of the last indexing job
     * 
     */
    @Import(name="uuid")
    private @Nullable Output<String> uuid;

    /**
     * @return UUID	of the last indexing job
     * 
     */
    public Optional<Output<String>> uuid() {
        return Optional.ofNullable(this.uuid);
    }

    private GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs() {}

    private GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs(GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs $) {
        this.completedDatasources = $.completedDatasources;
        this.createdAt = $.createdAt;
        this.datasourceUuids = $.datasourceUuids;
        this.finishedAt = $.finishedAt;
        this.knowledgeBaseUuid = $.knowledgeBaseUuid;
        this.phase = $.phase;
        this.startedAt = $.startedAt;
        this.tokens = $.tokens;
        this.totalDatasources = $.totalDatasources;
        this.updatedAt = $.updatedAt;
        this.uuid = $.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs $;

        public Builder() {
            $ = new GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs();
        }

        public Builder(GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs defaults) {
            $ = new GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param completedDatasources Number of completed datasources in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder completedDatasources(@Nullable Output<Integer> completedDatasources) {
            $.completedDatasources = completedDatasources;
            return this;
        }

        /**
         * @param completedDatasources Number of completed datasources in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder completedDatasources(Integer completedDatasources) {
            return completedDatasources(Output.of(completedDatasources));
        }

        /**
         * @param createdAt Created At timestamp for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder createdAt(Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Created At timestamp for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param datasourceUuids Datasource UUIDs for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder datasourceUuids(@Nullable Output<List<String>> datasourceUuids) {
            $.datasourceUuids = datasourceUuids;
            return this;
        }

        /**
         * @param datasourceUuids Datasource UUIDs for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder datasourceUuids(List<String> datasourceUuids) {
            return datasourceUuids(Output.of(datasourceUuids));
        }

        /**
         * @param datasourceUuids Datasource UUIDs for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder datasourceUuids(String... datasourceUuids) {
            return datasourceUuids(List.of(datasourceUuids));
        }

        /**
         * @param finishedAt Timestamp when the last indexing job finished
         * 
         * @return builder
         * 
         */
        public Builder finishedAt(Output<String> finishedAt) {
            $.finishedAt = finishedAt;
            return this;
        }

        /**
         * @param finishedAt Timestamp when the last indexing job finished
         * 
         * @return builder
         * 
         */
        public Builder finishedAt(String finishedAt) {
            return finishedAt(Output.of(finishedAt));
        }

        /**
         * @param knowledgeBaseUuid UUID	of the Knowledge Base for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseUuid(@Nullable Output<String> knowledgeBaseUuid) {
            $.knowledgeBaseUuid = knowledgeBaseUuid;
            return this;
        }

        /**
         * @param knowledgeBaseUuid UUID	of the Knowledge Base for the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseUuid(String knowledgeBaseUuid) {
            return knowledgeBaseUuid(Output.of(knowledgeBaseUuid));
        }

        /**
         * @param phase Phase of the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder phase(@Nullable Output<String> phase) {
            $.phase = phase;
            return this;
        }

        /**
         * @param phase Phase of the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder phase(String phase) {
            return phase(Output.of(phase));
        }

        /**
         * @param startedAt Timestamp when the last indexing job started
         * 
         * @return builder
         * 
         */
        public Builder startedAt(Output<String> startedAt) {
            $.startedAt = startedAt;
            return this;
        }

        /**
         * @param startedAt Timestamp when the last indexing job started
         * 
         * @return builder
         * 
         */
        public Builder startedAt(String startedAt) {
            return startedAt(Output.of(startedAt));
        }

        /**
         * @param tokens Number of tokens processed in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder tokens(@Nullable Output<Integer> tokens) {
            $.tokens = tokens;
            return this;
        }

        /**
         * @param tokens Number of tokens processed in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder tokens(Integer tokens) {
            return tokens(Output.of(tokens));
        }

        /**
         * @param totalDatasources Total number of datasources in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder totalDatasources(@Nullable Output<Integer> totalDatasources) {
            $.totalDatasources = totalDatasources;
            return this;
        }

        /**
         * @param totalDatasources Total number of datasources in the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder totalDatasources(Integer totalDatasources) {
            return totalDatasources(Output.of(totalDatasources));
        }

        /**
         * @param updatedAt Timestamp when the last indexing job updated
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp when the last indexing job updated
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param uuid UUID	of the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder uuid(@Nullable Output<String> uuid) {
            $.uuid = uuid;
            return this;
        }

        /**
         * @param uuid UUID	of the last indexing job
         * 
         * @return builder
         * 
         */
        public Builder uuid(String uuid) {
            return uuid(Output.of(uuid));
        }

        public GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs build() {
            if ($.createdAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs", "createdAt");
            }
            if ($.finishedAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs", "finishedAt");
            }
            if ($.startedAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs", "startedAt");
            }
            if ($.updatedAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateKnowledgeBaseLastIndexingJobArgs", "updatedAt");
            }
            return $;
        }
    }

}
