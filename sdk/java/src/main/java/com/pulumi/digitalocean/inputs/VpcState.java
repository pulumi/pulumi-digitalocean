// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcState extends com.pulumi.resources.ResourceArgs {

    public static final VpcState Empty = new VpcState();

    /**
     * The date and time of when the VPC was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time of when the VPC was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * A boolean indicating whether or not the VPC is the default one for the region.
     * 
     */
    @Import(name="default")
    private @Nullable Output<Boolean> default_;

    /**
     * @return A boolean indicating whether or not the VPC is the default one for the region.
     * 
     */
    public Optional<Output<Boolean>> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * A free-form text field up to a limit of 255 characters to describe the VPC.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A free-form text field up to a limit of 255 characters to describe the VPC.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than `/16` or smaller than `/24`.
     * 
     */
    @Import(name="ipRange")
    private @Nullable Output<String> ipRange;

    /**
     * @return The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than `/16` or smaller than `/24`.
     * 
     */
    public Optional<Output<String>> ipRange() {
        return Optional.ofNullable(this.ipRange);
    }

    /**
     * A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The DigitalOcean region slug for the VPC&#39;s location.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The DigitalOcean region slug for the VPC&#39;s location.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The uniform resource name (URN) for the VPC.
     * 
     */
    @Import(name="vpcUrn")
    private @Nullable Output<String> vpcUrn;

    /**
     * @return The uniform resource name (URN) for the VPC.
     * 
     */
    public Optional<Output<String>> vpcUrn() {
        return Optional.ofNullable(this.vpcUrn);
    }

    private VpcState() {}

    private VpcState(VpcState $) {
        this.createdAt = $.createdAt;
        this.default_ = $.default_;
        this.description = $.description;
        this.ipRange = $.ipRange;
        this.name = $.name;
        this.region = $.region;
        this.vpcUrn = $.vpcUrn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcState $;

        public Builder() {
            $ = new VpcState();
        }

        public Builder(VpcState defaults) {
            $ = new VpcState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The date and time of when the VPC was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time of when the VPC was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param default_ A boolean indicating whether or not the VPC is the default one for the region.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Output<Boolean> default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param default_ A boolean indicating whether or not the VPC is the default one for the region.
         * 
         * @return builder
         * 
         */
        public Builder default_(Boolean default_) {
            return default_(Output.of(default_));
        }

        /**
         * @param description A free-form text field up to a limit of 255 characters to describe the VPC.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A free-form text field up to a limit of 255 characters to describe the VPC.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipRange The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than `/16` or smaller than `/24`.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(@Nullable Output<String> ipRange) {
            $.ipRange = ipRange;
            return this;
        }

        /**
         * @param ipRange The range of IP addresses for the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be larger than `/16` or smaller than `/24`.
         * 
         * @return builder
         * 
         */
        public Builder ipRange(String ipRange) {
            return ipRange(Output.of(ipRange));
        }

        /**
         * @param name A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name for the VPC. Must be unique and contain alphanumeric characters, dashes, and periods only.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The DigitalOcean region slug for the VPC&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The DigitalOcean region slug for the VPC&#39;s location.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param vpcUrn The uniform resource name (URN) for the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcUrn(@Nullable Output<String> vpcUrn) {
            $.vpcUrn = vpcUrn;
            return this;
        }

        /**
         * @param vpcUrn The uniform resource name (URN) for the VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcUrn(String vpcUrn) {
            return vpcUrn(Output.of(vpcUrn));
        }

        public VpcState build() {
            return $;
        }
    }

}
