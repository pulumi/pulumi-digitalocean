// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerForwardingRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerForwardingRuleArgs Empty = new LoadBalancerForwardingRuleArgs();

    /**
     * **Deprecated** The ID of the TLS certificate to be used for SSL termination.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return **Deprecated** The ID of the TLS certificate to be used for SSL termination.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The unique name of the TLS certificate to be used for SSL termination.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return The unique name of the TLS certificate to be used for SSL termination.
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * An integer representing the port on which the Load Balancer instance will listen.
     * 
     */
    @Import(name="entryPort", required=true)
    private Output<Integer> entryPort;

    /**
     * @return An integer representing the port on which the Load Balancer instance will listen.
     * 
     */
    public Output<Integer> entryPort() {
        return this.entryPort;
    }

    /**
     * The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
     * 
     */
    @Import(name="entryProtocol", required=true)
    private Output<String> entryProtocol;

    /**
     * @return The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
     * 
     */
    public Output<String> entryProtocol() {
        return this.entryProtocol;
    }

    /**
     * An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
     * 
     */
    @Import(name="targetPort", required=true)
    private Output<Integer> targetPort;

    /**
     * @return An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
     * 
     */
    public Output<Integer> targetPort() {
        return this.targetPort;
    }

    /**
     * The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
     * 
     */
    @Import(name="targetProtocol", required=true)
    private Output<String> targetProtocol;

    /**
     * @return The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
     * 
     */
    public Output<String> targetProtocol() {
        return this.targetProtocol;
    }

    /**
     * A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
     * 
     */
    @Import(name="tlsPassthrough")
    private @Nullable Output<Boolean> tlsPassthrough;

    /**
     * @return A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> tlsPassthrough() {
        return Optional.ofNullable(this.tlsPassthrough);
    }

    private LoadBalancerForwardingRuleArgs() {}

    private LoadBalancerForwardingRuleArgs(LoadBalancerForwardingRuleArgs $) {
        this.certificateId = $.certificateId;
        this.certificateName = $.certificateName;
        this.entryPort = $.entryPort;
        this.entryProtocol = $.entryProtocol;
        this.targetPort = $.targetPort;
        this.targetProtocol = $.targetProtocol;
        this.tlsPassthrough = $.tlsPassthrough;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerForwardingRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerForwardingRuleArgs $;

        public Builder() {
            $ = new LoadBalancerForwardingRuleArgs();
        }

        public Builder(LoadBalancerForwardingRuleArgs defaults) {
            $ = new LoadBalancerForwardingRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId **Deprecated** The ID of the TLS certificate to be used for SSL termination.
         * 
         * @return builder
         * 
         * @deprecated
         * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId **Deprecated** The ID of the TLS certificate to be used for SSL termination.
         * 
         * @return builder
         * 
         * @deprecated
         * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateName The unique name of the TLS certificate to be used for SSL termination.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The unique name of the TLS certificate to be used for SSL termination.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param entryPort An integer representing the port on which the Load Balancer instance will listen.
         * 
         * @return builder
         * 
         */
        public Builder entryPort(Output<Integer> entryPort) {
            $.entryPort = entryPort;
            return this;
        }

        /**
         * @param entryPort An integer representing the port on which the Load Balancer instance will listen.
         * 
         * @return builder
         * 
         */
        public Builder entryPort(Integer entryPort) {
            return entryPort(Output.of(entryPort));
        }

        /**
         * @param entryProtocol The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder entryProtocol(Output<String> entryProtocol) {
            $.entryProtocol = entryProtocol;
            return this;
        }

        /**
         * @param entryProtocol The protocol used for traffic to the Load Balancer. The possible values are: `http`, `https`, `http2`, `http3`, `tcp`, or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder entryProtocol(String entryProtocol) {
            return entryProtocol(Output.of(entryProtocol));
        }

        /**
         * @param targetPort An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(Output<Integer> targetPort) {
            $.targetPort = targetPort;
            return this;
        }

        /**
         * @param targetPort An integer representing the port on the backend Droplets to which the Load Balancer will send traffic.
         * 
         * @return builder
         * 
         */
        public Builder targetPort(Integer targetPort) {
            return targetPort(Output.of(targetPort));
        }

        /**
         * @param targetProtocol The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder targetProtocol(Output<String> targetProtocol) {
            $.targetProtocol = targetProtocol;
            return this;
        }

        /**
         * @param targetProtocol The protocol used for traffic from the Load Balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`.
         * 
         * @return builder
         * 
         */
        public Builder targetProtocol(String targetProtocol) {
            return targetProtocol(Output.of(targetProtocol));
        }

        /**
         * @param tlsPassthrough A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsPassthrough(@Nullable Output<Boolean> tlsPassthrough) {
            $.tlsPassthrough = tlsPassthrough;
            return this;
        }

        /**
         * @param tlsPassthrough A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets. The default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder tlsPassthrough(Boolean tlsPassthrough) {
            return tlsPassthrough(Output.of(tlsPassthrough));
        }

        public LoadBalancerForwardingRuleArgs build() {
            if ($.entryPort == null) {
                throw new MissingRequiredPropertyException("LoadBalancerForwardingRuleArgs", "entryPort");
            }
            if ($.entryProtocol == null) {
                throw new MissingRequiredPropertyException("LoadBalancerForwardingRuleArgs", "entryProtocol");
            }
            if ($.targetPort == null) {
                throw new MissingRequiredPropertyException("LoadBalancerForwardingRuleArgs", "targetPort");
            }
            if ($.targetProtocol == null) {
                throw new MissingRequiredPropertyException("LoadBalancerForwardingRuleArgs", "targetProtocol");
            }
            return $;
        }
    }

}
