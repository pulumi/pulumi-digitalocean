// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DatabaseKafkaSchemaRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseKafkaSchemaRegistryArgs Empty = new DatabaseKafkaSchemaRegistryArgs();

    /**
     * The ID of the target Kafka cluster.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return The ID of the target Kafka cluster.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * The schema definition as a string.
     * 
     */
    @Import(name="schema", required=true)
    private Output<String> schema;

    /**
     * @return The schema definition as a string.
     * 
     */
    public Output<String> schema() {
        return this.schema;
    }

    /**
     * The schema type. Available values are: avro, json, or protobuf.
     * 
     */
    @Import(name="schemaType", required=true)
    private Output<String> schemaType;

    /**
     * @return The schema type. Available values are: avro, json, or protobuf.
     * 
     */
    public Output<String> schemaType() {
        return this.schemaType;
    }

    /**
     * The name of the schema subject.
     * 
     */
    @Import(name="subjectName", required=true)
    private Output<String> subjectName;

    /**
     * @return The name of the schema subject.
     * 
     */
    public Output<String> subjectName() {
        return this.subjectName;
    }

    private DatabaseKafkaSchemaRegistryArgs() {}

    private DatabaseKafkaSchemaRegistryArgs(DatabaseKafkaSchemaRegistryArgs $) {
        this.clusterId = $.clusterId;
        this.schema = $.schema;
        this.schemaType = $.schemaType;
        this.subjectName = $.subjectName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseKafkaSchemaRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseKafkaSchemaRegistryArgs $;

        public Builder() {
            $ = new DatabaseKafkaSchemaRegistryArgs();
        }

        public Builder(DatabaseKafkaSchemaRegistryArgs defaults) {
            $ = new DatabaseKafkaSchemaRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param schema The schema definition as a string.
         * 
         * @return builder
         * 
         */
        public Builder schema(Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema definition as a string.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param schemaType The schema type. Available values are: avro, json, or protobuf.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(Output<String> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType The schema type. Available values are: avro, json, or protobuf.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(String schemaType) {
            return schemaType(Output.of(schemaType));
        }

        /**
         * @param subjectName The name of the schema subject.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(Output<String> subjectName) {
            $.subjectName = subjectName;
            return this;
        }

        /**
         * @param subjectName The name of the schema subject.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(String subjectName) {
            return subjectName(Output.of(subjectName));
        }

        public DatabaseKafkaSchemaRegistryArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("DatabaseKafkaSchemaRegistryArgs", "clusterId");
            }
            if ($.schema == null) {
                throw new MissingRequiredPropertyException("DatabaseKafkaSchemaRegistryArgs", "schema");
            }
            if ($.schemaType == null) {
                throw new MissingRequiredPropertyException("DatabaseKafkaSchemaRegistryArgs", "schemaType");
            }
            if ($.subjectName == null) {
                throw new MissingRequiredPropertyException("DatabaseKafkaSchemaRegistryArgs", "subjectName");
            }
            return $;
        }
    }

}
