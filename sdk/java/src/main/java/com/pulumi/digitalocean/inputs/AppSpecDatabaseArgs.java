// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSpecDatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSpecDatabaseArgs Empty = new AppSpecDatabaseArgs();

    /**
     * The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if `cluster_name` is not set, a new cluster will be provisioned.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if `cluster_name` is not set, a new cluster will be provisioned.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * The name of the MySQL or PostgreSQL database to configure.
     * 
     */
    @Import(name="dbName")
    private @Nullable Output<String> dbName;

    /**
     * @return The name of the MySQL or PostgreSQL database to configure.
     * 
     */
    public Optional<Output<String>> dbName() {
        return Optional.ofNullable(this.dbName);
    }

    /**
     * The name of the MySQL or PostgreSQL user to configure.
     * 
     * This resource supports customized create timeouts. The default timeout is 30 minutes.
     * 
     */
    @Import(name="dbUser")
    private @Nullable Output<String> dbUser;

    /**
     * @return The name of the MySQL or PostgreSQL user to configure.
     * 
     * This resource supports customized create timeouts. The default timeout is 30 minutes.
     * 
     */
    public Optional<Output<String>> dbUser() {
        return Optional.ofNullable(this.dbUser);
    }

    /**
     * The database engine to use (`MYSQL`, `PG`, `REDIS`, or `MONGODB`).
     * 
     */
    @Import(name="engine")
    private @Nullable Output<String> engine;

    /**
     * @return The database engine to use (`MYSQL`, `PG`, `REDIS`, or `MONGODB`).
     * 
     */
    public Optional<Output<String>> engine() {
        return Optional.ofNullable(this.engine);
    }

    /**
     * The name of the component.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the component.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Whether this is a production or dev database.
     * 
     */
    @Import(name="production")
    private @Nullable Output<Boolean> production;

    /**
     * @return Whether this is a production or dev database.
     * 
     */
    public Optional<Output<Boolean>> production() {
        return Optional.ofNullable(this.production);
    }

    /**
     * The version of the database engine.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return The version of the database engine.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private AppSpecDatabaseArgs() {}

    private AppSpecDatabaseArgs(AppSpecDatabaseArgs $) {
        this.clusterName = $.clusterName;
        this.dbName = $.dbName;
        this.dbUser = $.dbUser;
        this.engine = $.engine;
        this.name = $.name;
        this.production = $.production;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSpecDatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSpecDatabaseArgs $;

        public Builder() {
            $ = new AppSpecDatabaseArgs();
        }

        public Builder(AppSpecDatabaseArgs defaults) {
            $ = new AppSpecDatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if `cluster_name` is not set, a new cluster will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if `cluster_name` is not set, a new cluster will be provisioned.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param dbName The name of the MySQL or PostgreSQL database to configure.
         * 
         * @return builder
         * 
         */
        public Builder dbName(@Nullable Output<String> dbName) {
            $.dbName = dbName;
            return this;
        }

        /**
         * @param dbName The name of the MySQL or PostgreSQL database to configure.
         * 
         * @return builder
         * 
         */
        public Builder dbName(String dbName) {
            return dbName(Output.of(dbName));
        }

        /**
         * @param dbUser The name of the MySQL or PostgreSQL user to configure.
         * 
         * This resource supports customized create timeouts. The default timeout is 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder dbUser(@Nullable Output<String> dbUser) {
            $.dbUser = dbUser;
            return this;
        }

        /**
         * @param dbUser The name of the MySQL or PostgreSQL user to configure.
         * 
         * This resource supports customized create timeouts. The default timeout is 30 minutes.
         * 
         * @return builder
         * 
         */
        public Builder dbUser(String dbUser) {
            return dbUser(Output.of(dbUser));
        }

        /**
         * @param engine The database engine to use (`MYSQL`, `PG`, `REDIS`, or `MONGODB`).
         * 
         * @return builder
         * 
         */
        public Builder engine(@Nullable Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine The database engine to use (`MYSQL`, `PG`, `REDIS`, or `MONGODB`).
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param production Whether this is a production or dev database.
         * 
         * @return builder
         * 
         */
        public Builder production(@Nullable Output<Boolean> production) {
            $.production = production;
            return this;
        }

        /**
         * @param production Whether this is a production or dev database.
         * 
         * @return builder
         * 
         */
        public Builder production(Boolean production) {
            return production(Output.of(production));
        }

        /**
         * @param version The version of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the database engine.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AppSpecDatabaseArgs build() {
            return $;
        }
    }

}
