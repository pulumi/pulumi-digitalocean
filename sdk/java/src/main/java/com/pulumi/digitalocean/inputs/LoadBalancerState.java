// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.enums.Algorithm;
import com.pulumi.digitalocean.enums.Region;
import com.pulumi.digitalocean.inputs.LoadBalancerFirewallArgs;
import com.pulumi.digitalocean.inputs.LoadBalancerForwardingRuleArgs;
import com.pulumi.digitalocean.inputs.LoadBalancerHealthcheckArgs;
import com.pulumi.digitalocean.inputs.LoadBalancerStickySessionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `round_robin`
     * or `least_connections`. The default value is `round_robin`.
     * 
     */
    @Import(name="algorithm")
    private @Nullable Output<Either<String,Algorithm>> algorithm;

    /**
     * @return The load balancing algorithm used to determine
     * which backend Droplet will be selected by a client. It must be either `round_robin`
     * or `least_connections`. The default value is `round_robin`.
     * 
     */
    public Optional<Output<Either<String,Algorithm>>> algorithm() {
        return Optional.ofNullable(this.algorithm);
    }

    /**
     * A boolean value indicating whether to disable automatic DNS record creation for Let&#39;s Encrypt certificates that are added to the load balancer. Default value is `false`.
     * 
     */
    @Import(name="disableLetsEncryptDnsRecords")
    private @Nullable Output<Boolean> disableLetsEncryptDnsRecords;

    /**
     * @return A boolean value indicating whether to disable automatic DNS record creation for Let&#39;s Encrypt certificates that are added to the load balancer. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> disableLetsEncryptDnsRecords() {
        return Optional.ofNullable(this.disableLetsEncryptDnsRecords);
    }

    /**
     * A list of the IDs of each droplet to be attached to the Load Balancer.
     * 
     */
    @Import(name="dropletIds")
    private @Nullable Output<List<Integer>> dropletIds;

    /**
     * @return A list of the IDs of each droplet to be attached to the Load Balancer.
     * 
     */
    public Optional<Output<List<Integer>>> dropletIds() {
        return Optional.ofNullable(this.dropletIds);
    }

    /**
     * The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     * 
     */
    @Import(name="dropletTag")
    private @Nullable Output<String> dropletTag;

    /**
     * @return The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
     * 
     */
    public Optional<Output<String>> dropletTag() {
        return Optional.ofNullable(this.dropletTag);
    }

    /**
     * A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
     * 
     */
    @Import(name="enableBackendKeepalive")
    private @Nullable Output<Boolean> enableBackendKeepalive;

    /**
     * @return A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> enableBackendKeepalive() {
        return Optional.ofNullable(this.enableBackendKeepalive);
    }

    /**
     * A boolean value indicating whether PROXY
     * Protocol should be used to pass information from connecting client requests to
     * the backend service. Default value is `false`.
     * 
     */
    @Import(name="enableProxyProtocol")
    private @Nullable Output<Boolean> enableProxyProtocol;

    /**
     * @return A boolean value indicating whether PROXY
     * Protocol should be used to pass information from connecting client requests to
     * the backend service. Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> enableProxyProtocol() {
        return Optional.ofNullable(this.enableProxyProtocol);
    }

    /**
     * A block containing rules for allowing/denying traffic to the Load Balancer. The `firewall` block is documented below. Only 1 firewall is allowed.
     * 
     */
    @Import(name="firewall")
    private @Nullable Output<LoadBalancerFirewallArgs> firewall;

    /**
     * @return A block containing rules for allowing/denying traffic to the Load Balancer. The `firewall` block is documented below. Only 1 firewall is allowed.
     * 
     */
    public Optional<Output<LoadBalancerFirewallArgs>> firewall() {
        return Optional.ofNullable(this.firewall);
    }

    /**
     * A list of `forwarding_rule` to be assigned to the
     * Load Balancer. The `forwarding_rule` block is documented below.
     * 
     */
    @Import(name="forwardingRules")
    private @Nullable Output<List<LoadBalancerForwardingRuleArgs>> forwardingRules;

    /**
     * @return A list of `forwarding_rule` to be assigned to the
     * Load Balancer. The `forwarding_rule` block is documented below.
     * 
     */
    public Optional<Output<List<LoadBalancerForwardingRuleArgs>>> forwardingRules() {
        return Optional.ofNullable(this.forwardingRules);
    }

    /**
     * A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     * 
     */
    @Import(name="healthcheck")
    private @Nullable Output<LoadBalancerHealthcheckArgs> healthcheck;

    /**
     * @return A `healthcheck` block to be assigned to the
     * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
     * 
     */
    public Optional<Output<LoadBalancerHealthcheckArgs>> healthcheck() {
        return Optional.ofNullable(this.healthcheck);
    }

    /**
     * Specifies the idle timeout for HTTPS connections on the load balancer in seconds.
     * 
     */
    @Import(name="httpIdleTimeoutSeconds")
    private @Nullable Output<Integer> httpIdleTimeoutSeconds;

    /**
     * @return Specifies the idle timeout for HTTPS connections on the load balancer in seconds.
     * 
     */
    public Optional<Output<Integer>> httpIdleTimeoutSeconds() {
        return Optional.ofNullable(this.httpIdleTimeoutSeconds);
    }

    /**
     * The ip of the Load Balancer
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The ip of the Load Balancer
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * The uniform resource name for the Load Balancer
     * 
     */
    @Import(name="loadBalancerUrn")
    private @Nullable Output<String> loadBalancerUrn;

    /**
     * @return The uniform resource name for the Load Balancer
     * 
     */
    public Optional<Output<String>> loadBalancerUrn() {
        return Optional.ofNullable(this.loadBalancerUrn);
    }

    /**
     * The Load Balancer name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The Load Balancer name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The ID of the project that the load balancer is associated with. If no ID is provided at creation, the load balancer associates with the user&#39;s default project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project that the load balancer is associated with. If no ID is provided at creation, the load balancer associates with the user&#39;s default project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     * 
     */
    @Import(name="redirectHttpToHttps")
    private @Nullable Output<Boolean> redirectHttpToHttps;

    /**
     * @return A boolean value indicating whether
     * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
     * Default value is `false`.
     * 
     */
    public Optional<Output<Boolean>> redirectHttpToHttps() {
        return Optional.ofNullable(this.redirectHttpToHttps);
    }

    /**
     * The region to start in
     * 
     */
    @Import(name="region")
    private @Nullable Output<Either<String,Region>> region;

    /**
     * @return The region to start in
     * 
     */
    public Optional<Output<Either<String,Region>>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`. Only one of `size` or `size_unit` may be provided.
     * 
     */
    @Import(name="size")
    private @Nullable Output<String> size;

    /**
     * @return The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`. Only one of `size` or `size_unit` may be provided.
     * 
     */
    public Optional<Output<String>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * The size of the Load Balancer. It must be in the range (1, 100). Defaults to `1`. Only one of `size` or `size_unit` may be provided.
     * 
     */
    @Import(name="sizeUnit")
    private @Nullable Output<Integer> sizeUnit;

    /**
     * @return The size of the Load Balancer. It must be in the range (1, 100). Defaults to `1`. Only one of `size` or `size_unit` may be provided.
     * 
     */
    public Optional<Output<Integer>> sizeUnit() {
        return Optional.ofNullable(this.sizeUnit);
    }

    @Import(name="status")
    private @Nullable Output<String> status;

    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * A `sticky_sessions` block to be assigned to the
     * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
     * 
     */
    @Import(name="stickySessions")
    private @Nullable Output<LoadBalancerStickySessionsArgs> stickySessions;

    /**
     * @return A `sticky_sessions` block to be assigned to the
     * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
     * 
     */
    public Optional<Output<LoadBalancerStickySessionsArgs>> stickySessions() {
        return Optional.ofNullable(this.stickySessions);
    }

    /**
     * An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The ID of the VPC where the load balancer will be located.
     * 
     */
    @Import(name="vpcUuid")
    private @Nullable Output<String> vpcUuid;

    /**
     * @return The ID of the VPC where the load balancer will be located.
     * 
     */
    public Optional<Output<String>> vpcUuid() {
        return Optional.ofNullable(this.vpcUuid);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.algorithm = $.algorithm;
        this.disableLetsEncryptDnsRecords = $.disableLetsEncryptDnsRecords;
        this.dropletIds = $.dropletIds;
        this.dropletTag = $.dropletTag;
        this.enableBackendKeepalive = $.enableBackendKeepalive;
        this.enableProxyProtocol = $.enableProxyProtocol;
        this.firewall = $.firewall;
        this.forwardingRules = $.forwardingRules;
        this.healthcheck = $.healthcheck;
        this.httpIdleTimeoutSeconds = $.httpIdleTimeoutSeconds;
        this.ip = $.ip;
        this.loadBalancerUrn = $.loadBalancerUrn;
        this.name = $.name;
        this.projectId = $.projectId;
        this.redirectHttpToHttps = $.redirectHttpToHttps;
        this.region = $.region;
        this.size = $.size;
        this.sizeUnit = $.sizeUnit;
        this.status = $.status;
        this.stickySessions = $.stickySessions;
        this.type = $.type;
        this.vpcUuid = $.vpcUuid;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The load balancing algorithm used to determine
         * which backend Droplet will be selected by a client. It must be either `round_robin`
         * or `least_connections`. The default value is `round_robin`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(@Nullable Output<Either<String,Algorithm>> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The load balancing algorithm used to determine
         * which backend Droplet will be selected by a client. It must be either `round_robin`
         * or `least_connections`. The default value is `round_robin`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Either<String,Algorithm> algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param algorithm The load balancing algorithm used to determine
         * which backend Droplet will be selected by a client. It must be either `round_robin`
         * or `least_connections`. The default value is `round_robin`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Either.ofLeft(algorithm));
        }

        /**
         * @param algorithm The load balancing algorithm used to determine
         * which backend Droplet will be selected by a client. It must be either `round_robin`
         * or `least_connections`. The default value is `round_robin`.
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Algorithm algorithm) {
            return algorithm(Either.ofRight(algorithm));
        }

        /**
         * @param disableLetsEncryptDnsRecords A boolean value indicating whether to disable automatic DNS record creation for Let&#39;s Encrypt certificates that are added to the load balancer. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableLetsEncryptDnsRecords(@Nullable Output<Boolean> disableLetsEncryptDnsRecords) {
            $.disableLetsEncryptDnsRecords = disableLetsEncryptDnsRecords;
            return this;
        }

        /**
         * @param disableLetsEncryptDnsRecords A boolean value indicating whether to disable automatic DNS record creation for Let&#39;s Encrypt certificates that are added to the load balancer. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder disableLetsEncryptDnsRecords(Boolean disableLetsEncryptDnsRecords) {
            return disableLetsEncryptDnsRecords(Output.of(disableLetsEncryptDnsRecords));
        }

        /**
         * @param dropletIds A list of the IDs of each droplet to be attached to the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder dropletIds(@Nullable Output<List<Integer>> dropletIds) {
            $.dropletIds = dropletIds;
            return this;
        }

        /**
         * @param dropletIds A list of the IDs of each droplet to be attached to the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder dropletIds(List<Integer> dropletIds) {
            return dropletIds(Output.of(dropletIds));
        }

        /**
         * @param dropletIds A list of the IDs of each droplet to be attached to the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder dropletIds(Integer... dropletIds) {
            return dropletIds(List.of(dropletIds));
        }

        /**
         * @param dropletTag The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder dropletTag(@Nullable Output<String> dropletTag) {
            $.dropletTag = dropletTag;
            return this;
        }

        /**
         * @param dropletTag The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
         * 
         * @return builder
         * 
         */
        public Builder dropletTag(String dropletTag) {
            return dropletTag(Output.of(dropletTag));
        }

        /**
         * @param enableBackendKeepalive A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableBackendKeepalive(@Nullable Output<Boolean> enableBackendKeepalive) {
            $.enableBackendKeepalive = enableBackendKeepalive;
            return this;
        }

        /**
         * @param enableBackendKeepalive A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableBackendKeepalive(Boolean enableBackendKeepalive) {
            return enableBackendKeepalive(Output.of(enableBackendKeepalive));
        }

        /**
         * @param enableProxyProtocol A boolean value indicating whether PROXY
         * Protocol should be used to pass information from connecting client requests to
         * the backend service. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableProxyProtocol(@Nullable Output<Boolean> enableProxyProtocol) {
            $.enableProxyProtocol = enableProxyProtocol;
            return this;
        }

        /**
         * @param enableProxyProtocol A boolean value indicating whether PROXY
         * Protocol should be used to pass information from connecting client requests to
         * the backend service. Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder enableProxyProtocol(Boolean enableProxyProtocol) {
            return enableProxyProtocol(Output.of(enableProxyProtocol));
        }

        /**
         * @param firewall A block containing rules for allowing/denying traffic to the Load Balancer. The `firewall` block is documented below. Only 1 firewall is allowed.
         * 
         * @return builder
         * 
         */
        public Builder firewall(@Nullable Output<LoadBalancerFirewallArgs> firewall) {
            $.firewall = firewall;
            return this;
        }

        /**
         * @param firewall A block containing rules for allowing/denying traffic to the Load Balancer. The `firewall` block is documented below. Only 1 firewall is allowed.
         * 
         * @return builder
         * 
         */
        public Builder firewall(LoadBalancerFirewallArgs firewall) {
            return firewall(Output.of(firewall));
        }

        /**
         * @param forwardingRules A list of `forwarding_rule` to be assigned to the
         * Load Balancer. The `forwarding_rule` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(@Nullable Output<List<LoadBalancerForwardingRuleArgs>> forwardingRules) {
            $.forwardingRules = forwardingRules;
            return this;
        }

        /**
         * @param forwardingRules A list of `forwarding_rule` to be assigned to the
         * Load Balancer. The `forwarding_rule` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(List<LoadBalancerForwardingRuleArgs> forwardingRules) {
            return forwardingRules(Output.of(forwardingRules));
        }

        /**
         * @param forwardingRules A list of `forwarding_rule` to be assigned to the
         * Load Balancer. The `forwarding_rule` block is documented below.
         * 
         * @return builder
         * 
         */
        public Builder forwardingRules(LoadBalancerForwardingRuleArgs... forwardingRules) {
            return forwardingRules(List.of(forwardingRules));
        }

        /**
         * @param healthcheck A `healthcheck` block to be assigned to the
         * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
         * 
         * @return builder
         * 
         */
        public Builder healthcheck(@Nullable Output<LoadBalancerHealthcheckArgs> healthcheck) {
            $.healthcheck = healthcheck;
            return this;
        }

        /**
         * @param healthcheck A `healthcheck` block to be assigned to the
         * Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
         * 
         * @return builder
         * 
         */
        public Builder healthcheck(LoadBalancerHealthcheckArgs healthcheck) {
            return healthcheck(Output.of(healthcheck));
        }

        /**
         * @param httpIdleTimeoutSeconds Specifies the idle timeout for HTTPS connections on the load balancer in seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpIdleTimeoutSeconds(@Nullable Output<Integer> httpIdleTimeoutSeconds) {
            $.httpIdleTimeoutSeconds = httpIdleTimeoutSeconds;
            return this;
        }

        /**
         * @param httpIdleTimeoutSeconds Specifies the idle timeout for HTTPS connections on the load balancer in seconds.
         * 
         * @return builder
         * 
         */
        public Builder httpIdleTimeoutSeconds(Integer httpIdleTimeoutSeconds) {
            return httpIdleTimeoutSeconds(Output.of(httpIdleTimeoutSeconds));
        }

        /**
         * @param ip The ip of the Load Balancer
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The ip of the Load Balancer
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param loadBalancerUrn The uniform resource name for the Load Balancer
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerUrn(@Nullable Output<String> loadBalancerUrn) {
            $.loadBalancerUrn = loadBalancerUrn;
            return this;
        }

        /**
         * @param loadBalancerUrn The uniform resource name for the Load Balancer
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerUrn(String loadBalancerUrn) {
            return loadBalancerUrn(Output.of(loadBalancerUrn));
        }

        /**
         * @param name The Load Balancer name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The Load Balancer name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The ID of the project that the load balancer is associated with. If no ID is provided at creation, the load balancer associates with the user&#39;s default project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that the load balancer is associated with. If no ID is provided at creation, the load balancer associates with the user&#39;s default project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param redirectHttpToHttps A boolean value indicating whether
         * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
         * Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder redirectHttpToHttps(@Nullable Output<Boolean> redirectHttpToHttps) {
            $.redirectHttpToHttps = redirectHttpToHttps;
            return this;
        }

        /**
         * @param redirectHttpToHttps A boolean value indicating whether
         * HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
         * Default value is `false`.
         * 
         * @return builder
         * 
         */
        public Builder redirectHttpToHttps(Boolean redirectHttpToHttps) {
            return redirectHttpToHttps(Output.of(redirectHttpToHttps));
        }

        /**
         * @param region The region to start in
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<Either<String,Region>> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region to start in
         * 
         * @return builder
         * 
         */
        public Builder region(Either<String,Region> region) {
            return region(Output.of(region));
        }

        /**
         * @param region The region to start in
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Either.ofLeft(region));
        }

        /**
         * @param region The region to start in
         * 
         * @return builder
         * 
         */
        public Builder region(Region region) {
            return region(Either.ofRight(region));
        }

        /**
         * @param size The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`. Only one of `size` or `size_unit` may be provided.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<String> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the Load Balancer. It must be either `lb-small`, `lb-medium`, or `lb-large`. Defaults to `lb-small`. Only one of `size` or `size_unit` may be provided.
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Output.of(size));
        }

        /**
         * @param sizeUnit The size of the Load Balancer. It must be in the range (1, 100). Defaults to `1`. Only one of `size` or `size_unit` may be provided.
         * 
         * @return builder
         * 
         */
        public Builder sizeUnit(@Nullable Output<Integer> sizeUnit) {
            $.sizeUnit = sizeUnit;
            return this;
        }

        /**
         * @param sizeUnit The size of the Load Balancer. It must be in the range (1, 100). Defaults to `1`. Only one of `size` or `size_unit` may be provided.
         * 
         * @return builder
         * 
         */
        public Builder sizeUnit(Integer sizeUnit) {
            return sizeUnit(Output.of(sizeUnit));
        }

        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param stickySessions A `sticky_sessions` block to be assigned to the
         * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
         * 
         * @return builder
         * 
         */
        public Builder stickySessions(@Nullable Output<LoadBalancerStickySessionsArgs> stickySessions) {
            $.stickySessions = stickySessions;
            return this;
        }

        /**
         * @param stickySessions A `sticky_sessions` block to be assigned to the
         * Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
         * 
         * @return builder
         * 
         */
        public Builder stickySessions(LoadBalancerStickySessionsArgs stickySessions) {
            return stickySessions(Output.of(stickySessions));
        }

        /**
         * @param type An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`. If not specified, the default value is `none`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcUuid The ID of the VPC where the load balancer will be located.
         * 
         * @return builder
         * 
         */
        public Builder vpcUuid(@Nullable Output<String> vpcUuid) {
            $.vpcUuid = vpcUuid;
            return this;
        }

        /**
         * @param vpcUuid The ID of the VPC where the load balancer will be located.
         * 
         * @return builder
         * 
         */
        public Builder vpcUuid(String vpcUuid) {
            return vpcUuid(Output.of(vpcUuid));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
