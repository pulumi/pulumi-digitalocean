// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.VpcNatGatewayEgressArgs;
import com.pulumi.digitalocean.inputs.VpcNatGatewayVpcArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpcNatGatewayState extends com.pulumi.resources.ResourceArgs {

    public static final VpcNatGatewayState Empty = new VpcNatGatewayState();

    /**
     * Created at timestamp for the VPC NAT Gateway.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Created at timestamp for the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
     * `public_gateways` embedding the reserved `ipv4` addresses.
     * 
     */
    @Import(name="egresses")
    private @Nullable Output<List<VpcNatGatewayEgressArgs>> egresses;

    /**
     * @return Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
     * `public_gateways` embedding the reserved `ipv4` addresses.
     * 
     */
    public Optional<Output<List<VpcNatGatewayEgressArgs>>> egresses() {
        return Optional.ofNullable(this.egresses);
    }

    /**
     * The egress timeout value for ICMP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="icmpTimeoutSeconds")
    private @Nullable Output<Integer> icmpTimeoutSeconds;

    /**
     * @return The egress timeout value for ICMP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> icmpTimeoutSeconds() {
        return Optional.ofNullable(this.icmpTimeoutSeconds);
    }

    /**
     * The name of the VPC NAT Gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The region for the VPC NAT Gateway.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region for the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The size of the VPC NAT Gateway.
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return The size of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * State of the VPC NAT Gateway
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the VPC NAT Gateway
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * The egress timeout value for TCP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="tcpTimeoutSeconds")
    private @Nullable Output<Integer> tcpTimeoutSeconds;

    /**
     * @return The egress timeout value for TCP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> tcpTimeoutSeconds() {
        return Optional.ofNullable(this.tcpTimeoutSeconds);
    }

    /**
     * The type of the VPC NAT Gateway.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The egress timeout value for UDP connections of the VPC NAT Gateway.
     * 
     */
    @Import(name="udpTimeoutSeconds")
    private @Nullable Output<Integer> udpTimeoutSeconds;

    /**
     * @return The egress timeout value for UDP connections of the VPC NAT Gateway.
     * 
     */
    public Optional<Output<Integer>> udpTimeoutSeconds() {
        return Optional.ofNullable(this.udpTimeoutSeconds);
    }

    /**
     * Updated at timestamp for the VPC NAT Gateway.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Updated at timestamp for the VPC NAT Gateway.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
     * documented below.
     * 
     */
    @Import(name="vpcs")
    private @Nullable Output<List<VpcNatGatewayVpcArgs>> vpcs;

    /**
     * @return The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
     * documented below.
     * 
     */
    public Optional<Output<List<VpcNatGatewayVpcArgs>>> vpcs() {
        return Optional.ofNullable(this.vpcs);
    }

    private VpcNatGatewayState() {}

    private VpcNatGatewayState(VpcNatGatewayState $) {
        this.createdAt = $.createdAt;
        this.egresses = $.egresses;
        this.icmpTimeoutSeconds = $.icmpTimeoutSeconds;
        this.name = $.name;
        this.region = $.region;
        this.size = $.size;
        this.state = $.state;
        this.tcpTimeoutSeconds = $.tcpTimeoutSeconds;
        this.type = $.type;
        this.udpTimeoutSeconds = $.udpTimeoutSeconds;
        this.updatedAt = $.updatedAt;
        this.vpcs = $.vpcs;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpcNatGatewayState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpcNatGatewayState $;

        public Builder() {
            $ = new VpcNatGatewayState();
        }

        public Builder(VpcNatGatewayState defaults) {
            $ = new VpcNatGatewayState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Created at timestamp for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Created at timestamp for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param egresses Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
         * `public_gateways` embedding the reserved `ipv4` addresses.
         * 
         * @return builder
         * 
         */
        public Builder egresses(@Nullable Output<List<VpcNatGatewayEgressArgs>> egresses) {
            $.egresses = egresses;
            return this;
        }

        /**
         * @param egresses Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
         * `public_gateways` embedding the reserved `ipv4` addresses.
         * 
         * @return builder
         * 
         */
        public Builder egresses(List<VpcNatGatewayEgressArgs> egresses) {
            return egresses(Output.of(egresses));
        }

        /**
         * @param egresses Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
         * `public_gateways` embedding the reserved `ipv4` addresses.
         * 
         * @return builder
         * 
         */
        public Builder egresses(VpcNatGatewayEgressArgs... egresses) {
            return egresses(List.of(egresses));
        }

        /**
         * @param icmpTimeoutSeconds The egress timeout value for ICMP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder icmpTimeoutSeconds(@Nullable Output<Integer> icmpTimeoutSeconds) {
            $.icmpTimeoutSeconds = icmpTimeoutSeconds;
            return this;
        }

        /**
         * @param icmpTimeoutSeconds The egress timeout value for ICMP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder icmpTimeoutSeconds(Integer icmpTimeoutSeconds) {
            return icmpTimeoutSeconds(Output.of(icmpTimeoutSeconds));
        }

        /**
         * @param name The name of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The region for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param size The size of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size The size of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param state State of the VPC NAT Gateway
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the VPC NAT Gateway
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param tcpTimeoutSeconds The egress timeout value for TCP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutSeconds(@Nullable Output<Integer> tcpTimeoutSeconds) {
            $.tcpTimeoutSeconds = tcpTimeoutSeconds;
            return this;
        }

        /**
         * @param tcpTimeoutSeconds The egress timeout value for TCP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutSeconds(Integer tcpTimeoutSeconds) {
            return tcpTimeoutSeconds(Output.of(tcpTimeoutSeconds));
        }

        /**
         * @param type The type of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param udpTimeoutSeconds The egress timeout value for UDP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutSeconds(@Nullable Output<Integer> udpTimeoutSeconds) {
            $.udpTimeoutSeconds = udpTimeoutSeconds;
            return this;
        }

        /**
         * @param udpTimeoutSeconds The egress timeout value for UDP connections of the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutSeconds(Integer udpTimeoutSeconds) {
            return udpTimeoutSeconds(Output.of(udpTimeoutSeconds));
        }

        /**
         * @param updatedAt Updated at timestamp for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Updated at timestamp for the VPC NAT Gateway.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(@Nullable Output<List<VpcNatGatewayVpcArgs>> vpcs) {
            $.vpcs = vpcs;
            return this;
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(List<VpcNatGatewayVpcArgs> vpcs) {
            return vpcs(Output.of(vpcs));
        }

        /**
         * @param vpcs The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
         * documented below.
         * 
         * @return builder
         * 
         */
        public Builder vpcs(VpcNatGatewayVpcArgs... vpcs) {
            return vpcs(List.of(vpcs));
        }

        public VpcNatGatewayState build() {
            return $;
        }
    }

}
