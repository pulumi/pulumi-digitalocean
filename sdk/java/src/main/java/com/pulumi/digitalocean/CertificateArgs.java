// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.enums.CertificateType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CertificateArgs Empty = new CertificateArgs();

    /**
     * The full PEM-formatted trust chain
     * between the certificate authority&#39;s certificate and your domain&#39;s TLS
     * certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="certificateChain")
    private @Nullable Output<String> certificateChain;

    /**
     * @return The full PEM-formatted trust chain
     * between the certificate authority&#39;s certificate and your domain&#39;s TLS
     * certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> certificateChain() {
        return Optional.ofNullable(this.certificateChain);
    }

    /**
     * List of fully qualified domain names (FQDNs) for
     * which the certificate will be issued. The domains must be managed using
     * DigitalOcean&#39;s DNS. Only valid when type is `letsEncrypt`.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return List of fully qualified domain names (FQDNs) for
     * which the certificate will be issued. The domains must be managed using
     * DigitalOcean&#39;s DNS. Only valid when type is `letsEncrypt`.
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * The contents of a PEM-formatted public
     * TLS certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="leafCertificate")
    private @Nullable Output<String> leafCertificate;

    /**
     * @return The contents of a PEM-formatted public
     * TLS certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> leafCertificate() {
        return Optional.ofNullable(this.leafCertificate);
    }

    /**
     * The name of the certificate for identification.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the certificate for identification.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The contents of a PEM-formatted private-key
     * corresponding to the SSL certificate. Only valid when type is `custom`.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The contents of a PEM-formatted private-key
     * corresponding to the SSL certificate. Only valid when type is `custom`.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The type of certificate to provision. Can be either
     * `custom` or `letsEncrypt`. Defaults to `custom`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<Either<String,CertificateType>> type;

    /**
     * @return The type of certificate to provision. Can be either
     * `custom` or `letsEncrypt`. Defaults to `custom`.
     * 
     */
    public Optional<Output<Either<String,CertificateType>>> type() {
        return Optional.ofNullable(this.type);
    }

    private CertificateArgs() {}

    private CertificateArgs(CertificateArgs $) {
        this.certificateChain = $.certificateChain;
        this.domains = $.domains;
        this.leafCertificate = $.leafCertificate;
        this.name = $.name;
        this.privateKey = $.privateKey;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateArgs $;

        public Builder() {
            $ = new CertificateArgs();
        }

        public Builder(CertificateArgs defaults) {
            $ = new CertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateChain The full PEM-formatted trust chain
         * between the certificate authority&#39;s certificate and your domain&#39;s TLS
         * certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(@Nullable Output<String> certificateChain) {
            $.certificateChain = certificateChain;
            return this;
        }

        /**
         * @param certificateChain The full PEM-formatted trust chain
         * between the certificate authority&#39;s certificate and your domain&#39;s TLS
         * certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder certificateChain(String certificateChain) {
            return certificateChain(Output.of(certificateChain));
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `letsEncrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `letsEncrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains List of fully qualified domain names (FQDNs) for
         * which the certificate will be issued. The domains must be managed using
         * DigitalOcean&#39;s DNS. Only valid when type is `letsEncrypt`.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param leafCertificate The contents of a PEM-formatted public
         * TLS certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder leafCertificate(@Nullable Output<String> leafCertificate) {
            $.leafCertificate = leafCertificate;
            return this;
        }

        /**
         * @param leafCertificate The contents of a PEM-formatted public
         * TLS certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder leafCertificate(String leafCertificate) {
            return leafCertificate(Output.of(leafCertificate));
        }

        /**
         * @param name The name of the certificate for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the certificate for identification.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateKey The contents of a PEM-formatted private-key
         * corresponding to the SSL certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The contents of a PEM-formatted private-key
         * corresponding to the SSL certificate. Only valid when type is `custom`.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `letsEncrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Either<String,CertificateType>> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `letsEncrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(Either<String,CertificateType> type) {
            return type(Output.of(type));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `letsEncrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Either.ofLeft(type));
        }

        /**
         * @param type The type of certificate to provision. Can be either
         * `custom` or `letsEncrypt`. Defaults to `custom`.
         * 
         * @return builder
         * 
         */
        public Builder type(CertificateType type) {
            return type(Either.ofRight(type));
        }

        public CertificateArgs build() {
            return $;
        }
    }

}
