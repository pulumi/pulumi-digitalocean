// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.AppDedicatedIpArgs;
import com.pulumi.digitalocean.inputs.AppSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppArgs Empty = new AppArgs();

    /**
     * The dedicated egress IP addresses associated with the app.
     * 
     */
    @Import(name="dedicatedIps")
    private @Nullable Output<List<AppDedicatedIpArgs>> dedicatedIps;

    /**
     * @return The dedicated egress IP addresses associated with the app.
     * 
     */
    public Optional<Output<List<AppDedicatedIpArgs>>> dedicatedIps() {
        return Optional.ofNullable(this.dedicatedIps);
    }

    /**
     * The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * A DigitalOcean App spec describing the app.
     * 
     */
    @Import(name="spec")
    private @Nullable Output<AppSpecArgs> spec;

    /**
     * @return A DigitalOcean App spec describing the app.
     * 
     */
    public Optional<Output<AppSpecArgs>> spec() {
        return Optional.ofNullable(this.spec);
    }

    private AppArgs() {}

    private AppArgs(AppArgs $) {
        this.dedicatedIps = $.dedicatedIps;
        this.projectId = $.projectId;
        this.spec = $.spec;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppArgs $;

        public Builder() {
            $ = new AppArgs();
        }

        public Builder(AppArgs defaults) {
            $ = new AppArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(@Nullable Output<List<AppDedicatedIpArgs>> dedicatedIps) {
            $.dedicatedIps = dedicatedIps;
            return this;
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(List<AppDedicatedIpArgs> dedicatedIps) {
            return dedicatedIps(Output.of(dedicatedIps));
        }

        /**
         * @param dedicatedIps The dedicated egress IP addresses associated with the app.
         * 
         * @return builder
         * 
         */
        public Builder dedicatedIps(AppDedicatedIpArgs... dedicatedIps) {
            return dedicatedIps(List.of(dedicatedIps));
        }

        /**
         * @param projectId The ID of the project that the app is assigned to.
         * 
         * A spec can contain multiple components.
         * 
         * A `service` can contain:
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that the app is assigned to.
         * 
         * A spec can contain multiple components.
         * 
         * A `service` can contain:
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param spec A DigitalOcean App spec describing the app.
         * 
         * @return builder
         * 
         */
        public Builder spec(@Nullable Output<AppSpecArgs> spec) {
            $.spec = spec;
            return this;
        }

        /**
         * @param spec A DigitalOcean App spec describing the app.
         * 
         * @return builder
         * 
         */
        public Builder spec(AppSpecArgs spec) {
            return spec(Output.of(spec));
        }

        public AppArgs build() {
            return $;
        }
    }

}
