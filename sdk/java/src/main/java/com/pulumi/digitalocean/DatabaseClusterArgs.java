// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Either;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.enums.DatabaseSlug;
import com.pulumi.digitalocean.enums.Region;
import com.pulumi.digitalocean.inputs.DatabaseClusterBackupRestoreArgs;
import com.pulumi.digitalocean.inputs.DatabaseClusterMaintenanceWindowArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseClusterArgs Empty = new DatabaseClusterArgs();

    /**
     * Create a new database cluster based on a backup of an existing cluster.
     * 
     */
    @Import(name="backupRestore")
    private @Nullable Output<DatabaseClusterBackupRestoreArgs> backupRestore;

    /**
     * @return Create a new database cluster based on a backup of an existing cluster.
     * 
     */
    public Optional<Output<DatabaseClusterBackupRestoreArgs>> backupRestore() {
        return Optional.ofNullable(this.backupRestore);
    }

    /**
     * Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
     * 
     */
    @Import(name="engine", required=true)
    private Output<String> engine;

    /**
     * @return Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
     * 
     */
    public Output<String> engine() {
        return this.engine;
    }

    /**
     * A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeys_lru`, `allkeys_random`, `volatile_lru`, `volatile_random`, or `volatile_ttl`.
     * 
     */
    @Import(name="evictionPolicy")
    private @Nullable Output<String> evictionPolicy;

    /**
     * @return A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeys_lru`, `allkeys_random`, `volatile_lru`, `volatile_random`, or `volatile_ttl`.
     * 
     */
    public Optional<Output<String>> evictionPolicy() {
        return Optional.ofNullable(this.evictionPolicy);
    }

    /**
     * Defines when the automatic maintenance should be performed for the database cluster.
     * 
     */
    @Import(name="maintenanceWindows")
    private @Nullable Output<List<DatabaseClusterMaintenanceWindowArgs>> maintenanceWindows;

    /**
     * @return Defines when the automatic maintenance should be performed for the database cluster.
     * 
     */
    public Optional<Output<List<DatabaseClusterMaintenanceWindowArgs>>> maintenanceWindows() {
        return Optional.ofNullable(this.maintenanceWindows);
    }

    /**
     * The name of the database cluster.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the database cluster.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
     * 
     */
    @Import(name="nodeCount", required=true)
    private Output<Integer> nodeCount;

    /**
     * @return Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    /**
     * The ID of the VPC where the database cluster will be located.
     * 
     */
    @Import(name="privateNetworkUuid")
    private @Nullable Output<String> privateNetworkUuid;

    /**
     * @return The ID of the VPC where the database cluster will be located.
     * 
     */
    public Optional<Output<String>> privateNetworkUuid() {
        return Optional.ofNullable(this.privateNetworkUuid);
    }

    /**
     * The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * DigitalOcean region where the cluster will reside.
     * 
     */
    @Import(name="region", required=true)
    private Output<Either<String,Region>> region;

    /**
     * @return DigitalOcean region where the cluster will reside.
     * 
     */
    public Output<Either<String,Region>> region() {
        return this.region;
    }

    /**
     * Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
     * 
     */
    @Import(name="size", required=true)
    private Output<Either<String,DatabaseSlug>> size;

    /**
     * @return Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
     * 
     */
    public Output<Either<String,DatabaseSlug>> size() {
        return this.size;
    }

    /**
     * A comma separated string specifying the  SQL modes for a MySQL cluster.
     * 
     */
    @Import(name="sqlMode")
    private @Nullable Output<String> sqlMode;

    /**
     * @return A comma separated string specifying the  SQL modes for a MySQL cluster.
     * 
     */
    public Optional<Output<String>> sqlMode() {
        return Optional.ofNullable(this.sqlMode);
    }

    /**
     * Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
     * 
     */
    @Import(name="storageSizeMib")
    private @Nullable Output<String> storageSizeMib;

    /**
     * @return Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
     * 
     */
    public Optional<Output<String>> storageSizeMib() {
        return Optional.ofNullable(this.storageSizeMib);
    }

    /**
     * A list of tag names to be applied to the database cluster.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return A list of tag names to be applied to the database cluster.
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Engine version used by the cluster (ex. `14` for PostgreSQL 14).
     * When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Engine version used by the cluster (ex. `14` for PostgreSQL 14).
     * When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private DatabaseClusterArgs() {}

    private DatabaseClusterArgs(DatabaseClusterArgs $) {
        this.backupRestore = $.backupRestore;
        this.engine = $.engine;
        this.evictionPolicy = $.evictionPolicy;
        this.maintenanceWindows = $.maintenanceWindows;
        this.name = $.name;
        this.nodeCount = $.nodeCount;
        this.privateNetworkUuid = $.privateNetworkUuid;
        this.projectId = $.projectId;
        this.region = $.region;
        this.size = $.size;
        this.sqlMode = $.sqlMode;
        this.storageSizeMib = $.storageSizeMib;
        this.tags = $.tags;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseClusterArgs $;

        public Builder() {
            $ = new DatabaseClusterArgs();
        }

        public Builder(DatabaseClusterArgs defaults) {
            $ = new DatabaseClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupRestore Create a new database cluster based on a backup of an existing cluster.
         * 
         * @return builder
         * 
         */
        public Builder backupRestore(@Nullable Output<DatabaseClusterBackupRestoreArgs> backupRestore) {
            $.backupRestore = backupRestore;
            return this;
        }

        /**
         * @param backupRestore Create a new database cluster based on a backup of an existing cluster.
         * 
         * @return builder
         * 
         */
        public Builder backupRestore(DatabaseClusterBackupRestoreArgs backupRestore) {
            return backupRestore(Output.of(backupRestore));
        }

        /**
         * @param engine Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
         * 
         * @return builder
         * 
         */
        public Builder engine(Output<String> engine) {
            $.engine = engine;
            return this;
        }

        /**
         * @param engine Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
         * 
         * @return builder
         * 
         */
        public Builder engine(String engine) {
            return engine(Output.of(engine));
        }

        /**
         * @param evictionPolicy A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeys_lru`, `allkeys_random`, `volatile_lru`, `volatile_random`, or `volatile_ttl`.
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(@Nullable Output<String> evictionPolicy) {
            $.evictionPolicy = evictionPolicy;
            return this;
        }

        /**
         * @param evictionPolicy A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeys_lru`, `allkeys_random`, `volatile_lru`, `volatile_random`, or `volatile_ttl`.
         * 
         * @return builder
         * 
         */
        public Builder evictionPolicy(String evictionPolicy) {
            return evictionPolicy(Output.of(evictionPolicy));
        }

        /**
         * @param maintenanceWindows Defines when the automatic maintenance should be performed for the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(@Nullable Output<List<DatabaseClusterMaintenanceWindowArgs>> maintenanceWindows) {
            $.maintenanceWindows = maintenanceWindows;
            return this;
        }

        /**
         * @param maintenanceWindows Defines when the automatic maintenance should be performed for the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(List<DatabaseClusterMaintenanceWindowArgs> maintenanceWindows) {
            return maintenanceWindows(Output.of(maintenanceWindows));
        }

        /**
         * @param maintenanceWindows Defines when the automatic maintenance should be performed for the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder maintenanceWindows(DatabaseClusterMaintenanceWindowArgs... maintenanceWindows) {
            return maintenanceWindows(List.of(maintenanceWindows));
        }

        /**
         * @param name The name of the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nodeCount Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        /**
         * @param privateNetworkUuid The ID of the VPC where the database cluster will be located.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkUuid(@Nullable Output<String> privateNetworkUuid) {
            $.privateNetworkUuid = privateNetworkUuid;
            return this;
        }

        /**
         * @param privateNetworkUuid The ID of the VPC where the database cluster will be located.
         * 
         * @return builder
         * 
         */
        public Builder privateNetworkUuid(String privateNetworkUuid) {
            return privateNetworkUuid(Output.of(privateNetworkUuid));
        }

        /**
         * @param projectId The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region DigitalOcean region where the cluster will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<Either<String,Region>> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region DigitalOcean region where the cluster will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(Either<String,Region> region) {
            return region(Output.of(region));
        }

        /**
         * @param region DigitalOcean region where the cluster will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Either.ofLeft(region));
        }

        /**
         * @param region DigitalOcean region where the cluster will reside.
         * 
         * @return builder
         * 
         */
        public Builder region(Region region) {
            return region(Either.ofRight(region));
        }

        /**
         * @param size Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Either<String,DatabaseSlug>> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
         * 
         * @return builder
         * 
         */
        public Builder size(Either<String,DatabaseSlug> size) {
            return size(Output.of(size));
        }

        /**
         * @param size Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
         * 
         * @return builder
         * 
         */
        public Builder size(String size) {
            return size(Either.ofLeft(size));
        }

        /**
         * @param size Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
         * 
         * @return builder
         * 
         */
        public Builder size(DatabaseSlug size) {
            return size(Either.ofRight(size));
        }

        /**
         * @param sqlMode A comma separated string specifying the  SQL modes for a MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(@Nullable Output<String> sqlMode) {
            $.sqlMode = sqlMode;
            return this;
        }

        /**
         * @param sqlMode A comma separated string specifying the  SQL modes for a MySQL cluster.
         * 
         * @return builder
         * 
         */
        public Builder sqlMode(String sqlMode) {
            return sqlMode(Output.of(sqlMode));
        }

        /**
         * @param storageSizeMib Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeMib(@Nullable Output<String> storageSizeMib) {
            $.storageSizeMib = storageSizeMib;
            return this;
        }

        /**
         * @param storageSizeMib Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeMib(String storageSizeMib) {
            return storageSizeMib(Output.of(storageSizeMib));
        }

        /**
         * @param tags A list of tag names to be applied to the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags A list of tag names to be applied to the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags A list of tag names to be applied to the database cluster.
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param version Engine version used by the cluster (ex. `14` for PostgreSQL 14).
         * When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Engine version used by the cluster (ex. `14` for PostgreSQL 14).
         * When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public DatabaseClusterArgs build() {
            $.engine = Objects.requireNonNull($.engine, "expected parameter 'engine' to be non-null");
            $.nodeCount = Objects.requireNonNull($.nodeCount, "expected parameter 'nodeCount' to be non-null");
            $.region = Objects.requireNonNull($.region, "expected parameter 'region' to be non-null");
            $.size = Objects.requireNonNull($.size, "expected parameter 'size' to be non-null");
            return $;
        }
    }

}
