// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ReservedIpState extends com.pulumi.resources.ResourceArgs {

    public static final ReservedIpState Empty = new ReservedIpState();

    /**
     * The ID of Droplet that the reserved IP will be assigned to.
     * 
     */
    @Import(name="dropletId")
    private @Nullable Output<Integer> dropletId;

    /**
     * @return The ID of Droplet that the reserved IP will be assigned to.
     * 
     */
    public Optional<Output<Integer>> dropletId() {
        return Optional.ofNullable(this.dropletId);
    }

    /**
     * The IP Address of the resource
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return The IP Address of the resource
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * The region that the reserved IP is reserved to.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region that the reserved IP is reserved to.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The uniform resource name of the reserved ip
     * 
     */
    @Import(name="reservedIpUrn")
    private @Nullable Output<String> reservedIpUrn;

    /**
     * @return The uniform resource name of the reserved ip
     * 
     */
    public Optional<Output<String>> reservedIpUrn() {
        return Optional.ofNullable(this.reservedIpUrn);
    }

    private ReservedIpState() {}

    private ReservedIpState(ReservedIpState $) {
        this.dropletId = $.dropletId;
        this.ipAddress = $.ipAddress;
        this.region = $.region;
        this.reservedIpUrn = $.reservedIpUrn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ReservedIpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ReservedIpState $;

        public Builder() {
            $ = new ReservedIpState();
        }

        public Builder(ReservedIpState defaults) {
            $ = new ReservedIpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dropletId The ID of Droplet that the reserved IP will be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder dropletId(@Nullable Output<Integer> dropletId) {
            $.dropletId = dropletId;
            return this;
        }

        /**
         * @param dropletId The ID of Droplet that the reserved IP will be assigned to.
         * 
         * @return builder
         * 
         */
        public Builder dropletId(Integer dropletId) {
            return dropletId(Output.of(dropletId));
        }

        /**
         * @param ipAddress The IP Address of the resource
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress The IP Address of the resource
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param region The region that the reserved IP is reserved to.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region that the reserved IP is reserved to.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param reservedIpUrn The uniform resource name of the reserved ip
         * 
         * @return builder
         * 
         */
        public Builder reservedIpUrn(@Nullable Output<String> reservedIpUrn) {
            $.reservedIpUrn = reservedIpUrn;
            return this;
        }

        /**
         * @param reservedIpUrn The uniform resource name of the reserved ip
         * 
         * @return builder
         * 
         */
        public Builder reservedIpUrn(String reservedIpUrn) {
            return reservedIpUrn(Output.of(reservedIpUrn));
        }

        public ReservedIpState build() {
            return $;
        }
    }

}
