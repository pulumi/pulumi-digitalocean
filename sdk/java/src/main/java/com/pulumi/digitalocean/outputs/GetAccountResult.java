// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccountResult {
    /**
     * @return The total number of droplets current user or team may have active at one time.
     * 
     */
    private Integer dropletLimit;
    /**
     * @return The email address used by the current user to register for DigitalOcean.
     * 
     */
    private String email;
    /**
     * @return If true, the user has verified their account via email. False otherwise.
     * 
     */
    private Boolean emailVerified;
    /**
     * @return The total number of floating IPs the current user or team may have.
     * 
     */
    private Integer floatingIpLimit;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return This value is one of &#34;active&#34;, &#34;warning&#34; or &#34;locked&#34;.
     * 
     */
    private String status;
    /**
     * @return A human-readable message giving more details about the status of the account.
     * 
     */
    private String statusMessage;
    /**
     * @return The unique universal identifier for the current user.
     * 
     */
    private String uuid;

    private GetAccountResult() {}
    /**
     * @return The total number of droplets current user or team may have active at one time.
     * 
     */
    public Integer dropletLimit() {
        return this.dropletLimit;
    }
    /**
     * @return The email address used by the current user to register for DigitalOcean.
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return If true, the user has verified their account via email. False otherwise.
     * 
     */
    public Boolean emailVerified() {
        return this.emailVerified;
    }
    /**
     * @return The total number of floating IPs the current user or team may have.
     * 
     */
    public Integer floatingIpLimit() {
        return this.floatingIpLimit;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return This value is one of &#34;active&#34;, &#34;warning&#34; or &#34;locked&#34;.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A human-readable message giving more details about the status of the account.
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return The unique universal identifier for the current user.
     * 
     */
    public String uuid() {
        return this.uuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccountResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer dropletLimit;
        private String email;
        private Boolean emailVerified;
        private Integer floatingIpLimit;
        private String id;
        private String status;
        private String statusMessage;
        private String uuid;
        public Builder() {}
        public Builder(GetAccountResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dropletLimit = defaults.dropletLimit;
    	      this.email = defaults.email;
    	      this.emailVerified = defaults.emailVerified;
    	      this.floatingIpLimit = defaults.floatingIpLimit;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.uuid = defaults.uuid;
        }

        @CustomType.Setter
        public Builder dropletLimit(Integer dropletLimit) {
            if (dropletLimit == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "dropletLimit");
            }
            this.dropletLimit = dropletLimit;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder emailVerified(Boolean emailVerified) {
            if (emailVerified == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "emailVerified");
            }
            this.emailVerified = emailVerified;
            return this;
        }
        @CustomType.Setter
        public Builder floatingIpLimit(Integer floatingIpLimit) {
            if (floatingIpLimit == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "floatingIpLimit");
            }
            this.floatingIpLimit = floatingIpLimit;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            if (statusMessage == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "statusMessage");
            }
            this.statusMessage = statusMessage;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("GetAccountResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        public GetAccountResult build() {
            final var _resultValue = new GetAccountResult();
            _resultValue.dropletLimit = dropletLimit;
            _resultValue.email = email;
            _resultValue.emailVerified = emailVerified;
            _resultValue.floatingIpLimit = floatingIpLimit;
            _resultValue.id = id;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.uuid = uuid;
            return _resultValue;
        }
    }
}
