// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsAgent;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsFilter;
import com.pulumi.digitalocean.outputs.GetGenaiAgentsSort;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetGenaiAgentsResult {
    private List<GetGenaiAgentsAgent> agents;
    private @Nullable List<GetGenaiAgentsFilter> filters;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private @Nullable Boolean onlyDeployed;
    private @Nullable List<GetGenaiAgentsSort> sorts;

    private GetGenaiAgentsResult() {}
    public List<GetGenaiAgentsAgent> agents() {
        return this.agents;
    }
    public List<GetGenaiAgentsFilter> filters() {
        return this.filters == null ? List.of() : this.filters;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Optional<Boolean> onlyDeployed() {
        return Optional.ofNullable(this.onlyDeployed);
    }
    public List<GetGenaiAgentsSort> sorts() {
        return this.sorts == null ? List.of() : this.sorts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetGenaiAgentsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetGenaiAgentsAgent> agents;
        private @Nullable List<GetGenaiAgentsFilter> filters;
        private String id;
        private @Nullable Boolean onlyDeployed;
        private @Nullable List<GetGenaiAgentsSort> sorts;
        public Builder() {}
        public Builder(GetGenaiAgentsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agents = defaults.agents;
    	      this.filters = defaults.filters;
    	      this.id = defaults.id;
    	      this.onlyDeployed = defaults.onlyDeployed;
    	      this.sorts = defaults.sorts;
        }

        @CustomType.Setter
        public Builder agents(List<GetGenaiAgentsAgent> agents) {
            if (agents == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsResult", "agents");
            }
            this.agents = agents;
            return this;
        }
        public Builder agents(GetGenaiAgentsAgent... agents) {
            return agents(List.of(agents));
        }
        @CustomType.Setter
        public Builder filters(@Nullable List<GetGenaiAgentsFilter> filters) {

            this.filters = filters;
            return this;
        }
        public Builder filters(GetGenaiAgentsFilter... filters) {
            return filters(List.of(filters));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetGenaiAgentsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder onlyDeployed(@Nullable Boolean onlyDeployed) {

            this.onlyDeployed = onlyDeployed;
            return this;
        }
        @CustomType.Setter
        public Builder sorts(@Nullable List<GetGenaiAgentsSort> sorts) {

            this.sorts = sorts;
            return this;
        }
        public Builder sorts(GetGenaiAgentsSort... sorts) {
            return sorts(List.of(sorts));
        }
        public GetGenaiAgentsResult build() {
            final var _resultValue = new GetGenaiAgentsResult();
            _resultValue.agents = agents;
            _resultValue.filters = filters;
            _resultValue.id = id;
            _resultValue.onlyDeployed = onlyDeployed;
            _resultValue.sorts = sorts;
            return _resultValue;
        }
    }
}
