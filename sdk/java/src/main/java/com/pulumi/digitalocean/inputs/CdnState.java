// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CdnState extends com.pulumi.resources.ResourceArgs {

    public static final CdnState Empty = new CdnState();

    /**
     * **Deprecated** The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return **Deprecated** The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
     * 
     * @deprecated
     * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
     * 
     */
    @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * The unique name of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return The unique name of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * The date and time when the CDN Endpoint was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time when the CDN Endpoint was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The fully qualified domain name (FQDN) of the custom subdomain used with the CDN Endpoint.
     * 
     */
    @Import(name="customDomain")
    private @Nullable Output<String> customDomain;

    /**
     * @return The fully qualified domain name (FQDN) of the custom subdomain used with the CDN Endpoint.
     * 
     */
    public Optional<Output<String>> customDomain() {
        return Optional.ofNullable(this.customDomain);
    }

    /**
     * The fully qualified domain name (FQDN) from which the CDN-backed content is served.
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The fully qualified domain name (FQDN) from which the CDN-backed content is served.
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The fully qualified domain name, (FQDN) for a Space.
     * 
     */
    @Import(name="origin")
    private @Nullable Output<String> origin;

    /**
     * @return The fully qualified domain name, (FQDN) for a Space.
     * 
     */
    public Optional<Output<String>> origin() {
        return Optional.ofNullable(this.origin);
    }

    /**
     * The time to live for the CDN Endpoint, in seconds. Default is 3600 seconds.
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The time to live for the CDN Endpoint, in seconds. Default is 3600 seconds.
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private CdnState() {}

    private CdnState(CdnState $) {
        this.certificateId = $.certificateId;
        this.certificateName = $.certificateName;
        this.createdAt = $.createdAt;
        this.customDomain = $.customDomain;
        this.endpoint = $.endpoint;
        this.origin = $.origin;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CdnState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CdnState $;

        public Builder() {
            $ = new CdnState();
        }

        public Builder(CdnState defaults) {
            $ = new CdnState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId **Deprecated** The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
         * 
         * @return builder
         * 
         * @deprecated
         * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId **Deprecated** The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
         * 
         * @return builder
         * 
         * @deprecated
         * Certificate IDs may change, for example when a Let&#39;s Encrypt certificate is auto-renewed. Please specify &#39;certificate_name&#39; instead.
         * 
         */
        @Deprecated /* Certificate IDs may change, for example when a Let's Encrypt certificate is auto-renewed. Please specify 'certificate_name' instead. */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateName The unique name of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName The unique name of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param createdAt The date and time when the CDN Endpoint was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time when the CDN Endpoint was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param customDomain The fully qualified domain name (FQDN) of the custom subdomain used with the CDN Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(@Nullable Output<String> customDomain) {
            $.customDomain = customDomain;
            return this;
        }

        /**
         * @param customDomain The fully qualified domain name (FQDN) of the custom subdomain used with the CDN Endpoint.
         * 
         * @return builder
         * 
         */
        public Builder customDomain(String customDomain) {
            return customDomain(Output.of(customDomain));
        }

        /**
         * @param endpoint The fully qualified domain name (FQDN) from which the CDN-backed content is served.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The fully qualified domain name (FQDN) from which the CDN-backed content is served.
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param origin The fully qualified domain name, (FQDN) for a Space.
         * 
         * @return builder
         * 
         */
        public Builder origin(@Nullable Output<String> origin) {
            $.origin = origin;
            return this;
        }

        /**
         * @param origin The fully qualified domain name, (FQDN) for a Space.
         * 
         * @return builder
         * 
         */
        public Builder origin(String origin) {
            return origin(Output.of(origin));
        }

        /**
         * @param ttl The time to live for the CDN Endpoint, in seconds. Default is 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The time to live for the CDN Endpoint, in seconds. Default is 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public CdnState build() {
            return $;
        }
    }

}
