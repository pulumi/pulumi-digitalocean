// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectsProject {
    /**
     * @return The date and time when the project was created, (ISO8601)
     * 
     */
    private String createdAt;
    /**
     * @return The description of the project
     * 
     */
    private String description;
    /**
     * @return The environment of the project&#39;s resources. The possible values are: `Development`, `Staging`, `Production`.
     * 
     */
    private String environment;
    /**
     * @return The ID of the project
     * 
     */
    private String id;
    private Boolean isDefault;
    /**
     * @return The name of the project
     * 
     */
    private String name;
    /**
     * @return The ID of the project owner
     * 
     */
    private Integer ownerId;
    /**
     * @return The unique universal identifier of the project owner
     * 
     */
    private String ownerUuid;
    /**
     * @return The purpose of the project (Default: &#34;Web Application&#34;)
     * 
     */
    private String purpose;
    /**
     * @return A set of uniform resource names (URNs) for the resources associated with the project
     * 
     */
    private List<String> resources;
    /**
     * @return The date and time when the project was last updated, (ISO8601)
     * 
     */
    private String updatedAt;

    private GetProjectsProject() {}
    /**
     * @return The date and time when the project was created, (ISO8601)
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The description of the project
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The environment of the project&#39;s resources. The possible values are: `Development`, `Staging`, `Production`.
     * 
     */
    public String environment() {
        return this.environment;
    }
    /**
     * @return The ID of the project
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return The name of the project
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The ID of the project owner
     * 
     */
    public Integer ownerId() {
        return this.ownerId;
    }
    /**
     * @return The unique universal identifier of the project owner
     * 
     */
    public String ownerUuid() {
        return this.ownerUuid;
    }
    /**
     * @return The purpose of the project (Default: &#34;Web Application&#34;)
     * 
     */
    public String purpose() {
        return this.purpose;
    }
    /**
     * @return A set of uniform resource names (URNs) for the resources associated with the project
     * 
     */
    public List<String> resources() {
        return this.resources;
    }
    /**
     * @return The date and time when the project was last updated, (ISO8601)
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectsProject defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String description;
        private String environment;
        private String id;
        private Boolean isDefault;
        private String name;
        private Integer ownerId;
        private String ownerUuid;
        private String purpose;
        private List<String> resources;
        private String updatedAt;
        public Builder() {}
        public Builder(GetProjectsProject defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.environment = defaults.environment;
    	      this.id = defaults.id;
    	      this.isDefault = defaults.isDefault;
    	      this.name = defaults.name;
    	      this.ownerId = defaults.ownerId;
    	      this.ownerUuid = defaults.ownerUuid;
    	      this.purpose = defaults.purpose;
    	      this.resources = defaults.resources;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder environment(String environment) {
            this.environment = Objects.requireNonNull(environment);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            this.isDefault = Objects.requireNonNull(isDefault);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(Integer ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId);
            return this;
        }
        @CustomType.Setter
        public Builder ownerUuid(String ownerUuid) {
            this.ownerUuid = Objects.requireNonNull(ownerUuid);
            return this;
        }
        @CustomType.Setter
        public Builder purpose(String purpose) {
            this.purpose = Objects.requireNonNull(purpose);
            return this;
        }
        @CustomType.Setter
        public Builder resources(List<String> resources) {
            this.resources = Objects.requireNonNull(resources);
            return this;
        }
        public Builder resources(String... resources) {
            return resources(List.of(resources));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetProjectsProject build() {
            final var _resultValue = new GetProjectsProject();
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.environment = environment;
            _resultValue.id = id;
            _resultValue.isDefault = isDefault;
            _resultValue.name = name;
            _resultValue.ownerId = ownerId;
            _resultValue.ownerUuid = ownerUuid;
            _resultValue.purpose = purpose;
            _resultValue.resources = resources;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
