// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryState Empty = new ContainerRegistryState();

    /**
     * The date and time when the registry was created
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The date and time when the registry was created
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The URL endpoint of the container registry. Ex: `registry.digitalocean.com/my_registry`
     * 
     */
    @Import(name="endpoint")
    private @Nullable Output<String> endpoint;

    /**
     * @return The URL endpoint of the container registry. Ex: `registry.digitalocean.com/my_registry`
     * 
     */
    public Optional<Output<String>> endpoint() {
        return Optional.ofNullable(this.endpoint);
    }

    /**
     * The name of the container_registry
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the container_registry
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The domain of the container registry. Ex: `registry.digitalocean.com`
     * 
     */
    @Import(name="serverUrl")
    private @Nullable Output<String> serverUrl;

    /**
     * @return The domain of the container registry. Ex: `registry.digitalocean.com`
     * 
     */
    public Optional<Output<String>> serverUrl() {
        return Optional.ofNullable(this.serverUrl);
    }

    /**
     * The amount of storage used in the registry in bytes.
     * 
     */
    @Import(name="storageUsageBytes")
    private @Nullable Output<Integer> storageUsageBytes;

    /**
     * @return The amount of storage used in the registry in bytes.
     * 
     */
    public Optional<Output<Integer>> storageUsageBytes() {
        return Optional.ofNullable(this.storageUsageBytes);
    }

    /**
     * The slug identifier for the subscription tier to use (`starter`, `basic`, or `professional`)
     * 
     */
    @Import(name="subscriptionTierSlug")
    private @Nullable Output<String> subscriptionTierSlug;

    /**
     * @return The slug identifier for the subscription tier to use (`starter`, `basic`, or `professional`)
     * 
     */
    public Optional<Output<String>> subscriptionTierSlug() {
        return Optional.ofNullable(this.subscriptionTierSlug);
    }

    private ContainerRegistryState() {}

    private ContainerRegistryState(ContainerRegistryState $) {
        this.createdAt = $.createdAt;
        this.endpoint = $.endpoint;
        this.name = $.name;
        this.region = $.region;
        this.serverUrl = $.serverUrl;
        this.storageUsageBytes = $.storageUsageBytes;
        this.subscriptionTierSlug = $.subscriptionTierSlug;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryState $;

        public Builder() {
            $ = new ContainerRegistryState();
        }

        public Builder(ContainerRegistryState defaults) {
            $ = new ContainerRegistryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The date and time when the registry was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The date and time when the registry was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param endpoint The URL endpoint of the container registry. Ex: `registry.digitalocean.com/my_registry`
         * 
         * @return builder
         * 
         */
        public Builder endpoint(@Nullable Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        /**
         * @param endpoint The URL endpoint of the container registry. Ex: `registry.digitalocean.com/my_registry`
         * 
         * @return builder
         * 
         */
        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        /**
         * @param name The name of the container_registry
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the container_registry
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The slug identifier of for region where registry data will be stored. When not provided, a region will be selected automatically.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serverUrl The domain of the container registry. Ex: `registry.digitalocean.com`
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(@Nullable Output<String> serverUrl) {
            $.serverUrl = serverUrl;
            return this;
        }

        /**
         * @param serverUrl The domain of the container registry. Ex: `registry.digitalocean.com`
         * 
         * @return builder
         * 
         */
        public Builder serverUrl(String serverUrl) {
            return serverUrl(Output.of(serverUrl));
        }

        /**
         * @param storageUsageBytes The amount of storage used in the registry in bytes.
         * 
         * @return builder
         * 
         */
        public Builder storageUsageBytes(@Nullable Output<Integer> storageUsageBytes) {
            $.storageUsageBytes = storageUsageBytes;
            return this;
        }

        /**
         * @param storageUsageBytes The amount of storage used in the registry in bytes.
         * 
         * @return builder
         * 
         */
        public Builder storageUsageBytes(Integer storageUsageBytes) {
            return storageUsageBytes(Output.of(storageUsageBytes));
        }

        /**
         * @param subscriptionTierSlug The slug identifier for the subscription tier to use (`starter`, `basic`, or `professional`)
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTierSlug(@Nullable Output<String> subscriptionTierSlug) {
            $.subscriptionTierSlug = subscriptionTierSlug;
            return this;
        }

        /**
         * @param subscriptionTierSlug The slug identifier for the subscription tier to use (`starter`, `basic`, or `professional`)
         * 
         * @return builder
         * 
         */
        public Builder subscriptionTierSlug(String subscriptionTierSlug) {
            return subscriptionTierSlug(Output.of(subscriptionTierSlug));
        }

        public ContainerRegistryState build() {
            return $;
        }
    }

}
