// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.AppSpecAlertArgs;
import com.pulumi.digitalocean.inputs.AppSpecDatabaseArgs;
import com.pulumi.digitalocean.inputs.AppSpecDomainNameArgs;
import com.pulumi.digitalocean.inputs.AppSpecEnvArgs;
import com.pulumi.digitalocean.inputs.AppSpecFunctionArgs;
import com.pulumi.digitalocean.inputs.AppSpecIngressArgs;
import com.pulumi.digitalocean.inputs.AppSpecJobArgs;
import com.pulumi.digitalocean.inputs.AppSpecServiceArgs;
import com.pulumi.digitalocean.inputs.AppSpecStaticSiteArgs;
import com.pulumi.digitalocean.inputs.AppSpecWorkerArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AppSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final AppSpecArgs Empty = new AppSpecArgs();

    /**
     * Describes an alert policy for the component.
     * 
     */
    @Import(name="alerts")
    private @Nullable Output<List<AppSpecAlertArgs>> alerts;

    /**
     * @return Describes an alert policy for the component.
     * 
     */
    public Optional<Output<List<AppSpecAlertArgs>>> alerts() {
        return Optional.ofNullable(this.alerts);
    }

    @Import(name="databases")
    private @Nullable Output<List<AppSpecDatabaseArgs>> databases;

    public Optional<Output<List<AppSpecDatabaseArgs>>> databases() {
        return Optional.ofNullable(this.databases);
    }

    /**
     * Describes a domain where the application will be made available.
     * 
     */
    @Import(name="domainNames")
    private @Nullable Output<List<AppSpecDomainNameArgs>> domainNames;

    /**
     * @return Describes a domain where the application will be made available.
     * 
     */
    public Optional<Output<List<AppSpecDomainNameArgs>>> domainNames() {
        return Optional.ofNullable(this.domainNames);
    }

    /**
     * @deprecated
     * This attribute has been replaced by `domain` which supports additional functionality.
     * 
     */
    @Deprecated /* This attribute has been replaced by `domain` which supports additional functionality. */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @deprecated
     * This attribute has been replaced by `domain` which supports additional functionality.
     * 
     */
    @Deprecated /* This attribute has been replaced by `domain` which supports additional functionality. */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Describes an environment variable made available to an app competent.
     * 
     */
    @Import(name="envs")
    private @Nullable Output<List<AppSpecEnvArgs>> envs;

    /**
     * @return Describes an environment variable made available to an app competent.
     * 
     */
    public Optional<Output<List<AppSpecEnvArgs>>> envs() {
        return Optional.ofNullable(this.envs);
    }

    @Import(name="functions")
    private @Nullable Output<List<AppSpecFunctionArgs>> functions;

    public Optional<Output<List<AppSpecFunctionArgs>>> functions() {
        return Optional.ofNullable(this.functions);
    }

    /**
     * Specification for component routing, rewrites, and redirects.
     * 
     */
    @Import(name="ingress")
    private @Nullable Output<AppSpecIngressArgs> ingress;

    /**
     * @return Specification for component routing, rewrites, and redirects.
     * 
     */
    public Optional<Output<AppSpecIngressArgs>> ingress() {
        return Optional.ofNullable(this.ingress);
    }

    @Import(name="jobs")
    private @Nullable Output<List<AppSpecJobArgs>> jobs;

    public Optional<Output<List<AppSpecJobArgs>>> jobs() {
        return Optional.ofNullable(this.jobs);
    }

    /**
     * The name of the component.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the component.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The slug for the DigitalOcean data center region hosting the app.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The slug for the DigitalOcean data center region hosting the app.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="services")
    private @Nullable Output<List<AppSpecServiceArgs>> services;

    public Optional<Output<List<AppSpecServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    @Import(name="staticSites")
    private @Nullable Output<List<AppSpecStaticSiteArgs>> staticSites;

    public Optional<Output<List<AppSpecStaticSiteArgs>>> staticSites() {
        return Optional.ofNullable(this.staticSites);
    }

    @Import(name="workers")
    private @Nullable Output<List<AppSpecWorkerArgs>> workers;

    public Optional<Output<List<AppSpecWorkerArgs>>> workers() {
        return Optional.ofNullable(this.workers);
    }

    private AppSpecArgs() {}

    private AppSpecArgs(AppSpecArgs $) {
        this.alerts = $.alerts;
        this.databases = $.databases;
        this.domainNames = $.domainNames;
        this.domains = $.domains;
        this.envs = $.envs;
        this.functions = $.functions;
        this.ingress = $.ingress;
        this.jobs = $.jobs;
        this.name = $.name;
        this.region = $.region;
        this.services = $.services;
        this.staticSites = $.staticSites;
        this.workers = $.workers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AppSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AppSpecArgs $;

        public Builder() {
            $ = new AppSpecArgs();
        }

        public Builder(AppSpecArgs defaults) {
            $ = new AppSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alerts Describes an alert policy for the component.
         * 
         * @return builder
         * 
         */
        public Builder alerts(@Nullable Output<List<AppSpecAlertArgs>> alerts) {
            $.alerts = alerts;
            return this;
        }

        /**
         * @param alerts Describes an alert policy for the component.
         * 
         * @return builder
         * 
         */
        public Builder alerts(List<AppSpecAlertArgs> alerts) {
            return alerts(Output.of(alerts));
        }

        /**
         * @param alerts Describes an alert policy for the component.
         * 
         * @return builder
         * 
         */
        public Builder alerts(AppSpecAlertArgs... alerts) {
            return alerts(List.of(alerts));
        }

        public Builder databases(@Nullable Output<List<AppSpecDatabaseArgs>> databases) {
            $.databases = databases;
            return this;
        }

        public Builder databases(List<AppSpecDatabaseArgs> databases) {
            return databases(Output.of(databases));
        }

        public Builder databases(AppSpecDatabaseArgs... databases) {
            return databases(List.of(databases));
        }

        /**
         * @param domainNames Describes a domain where the application will be made available.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(@Nullable Output<List<AppSpecDomainNameArgs>> domainNames) {
            $.domainNames = domainNames;
            return this;
        }

        /**
         * @param domainNames Describes a domain where the application will be made available.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(List<AppSpecDomainNameArgs> domainNames) {
            return domainNames(Output.of(domainNames));
        }

        /**
         * @param domainNames Describes a domain where the application will be made available.
         * 
         * @return builder
         * 
         */
        public Builder domainNames(AppSpecDomainNameArgs... domainNames) {
            return domainNames(List.of(domainNames));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `domain` which supports additional functionality.
         * 
         */
        @Deprecated /* This attribute has been replaced by `domain` which supports additional functionality. */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `domain` which supports additional functionality.
         * 
         */
        @Deprecated /* This attribute has been replaced by `domain` which supports additional functionality. */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This attribute has been replaced by `domain` which supports additional functionality.
         * 
         */
        @Deprecated /* This attribute has been replaced by `domain` which supports additional functionality. */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param envs Describes an environment variable made available to an app competent.
         * 
         * @return builder
         * 
         */
        public Builder envs(@Nullable Output<List<AppSpecEnvArgs>> envs) {
            $.envs = envs;
            return this;
        }

        /**
         * @param envs Describes an environment variable made available to an app competent.
         * 
         * @return builder
         * 
         */
        public Builder envs(List<AppSpecEnvArgs> envs) {
            return envs(Output.of(envs));
        }

        /**
         * @param envs Describes an environment variable made available to an app competent.
         * 
         * @return builder
         * 
         */
        public Builder envs(AppSpecEnvArgs... envs) {
            return envs(List.of(envs));
        }

        public Builder functions(@Nullable Output<List<AppSpecFunctionArgs>> functions) {
            $.functions = functions;
            return this;
        }

        public Builder functions(List<AppSpecFunctionArgs> functions) {
            return functions(Output.of(functions));
        }

        public Builder functions(AppSpecFunctionArgs... functions) {
            return functions(List.of(functions));
        }

        /**
         * @param ingress Specification for component routing, rewrites, and redirects.
         * 
         * @return builder
         * 
         */
        public Builder ingress(@Nullable Output<AppSpecIngressArgs> ingress) {
            $.ingress = ingress;
            return this;
        }

        /**
         * @param ingress Specification for component routing, rewrites, and redirects.
         * 
         * @return builder
         * 
         */
        public Builder ingress(AppSpecIngressArgs ingress) {
            return ingress(Output.of(ingress));
        }

        public Builder jobs(@Nullable Output<List<AppSpecJobArgs>> jobs) {
            $.jobs = jobs;
            return this;
        }

        public Builder jobs(List<AppSpecJobArgs> jobs) {
            return jobs(Output.of(jobs));
        }

        public Builder jobs(AppSpecJobArgs... jobs) {
            return jobs(List.of(jobs));
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the component.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region The slug for the DigitalOcean data center region hosting the app.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The slug for the DigitalOcean data center region hosting the app.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder services(@Nullable Output<List<AppSpecServiceArgs>> services) {
            $.services = services;
            return this;
        }

        public Builder services(List<AppSpecServiceArgs> services) {
            return services(Output.of(services));
        }

        public Builder services(AppSpecServiceArgs... services) {
            return services(List.of(services));
        }

        public Builder staticSites(@Nullable Output<List<AppSpecStaticSiteArgs>> staticSites) {
            $.staticSites = staticSites;
            return this;
        }

        public Builder staticSites(List<AppSpecStaticSiteArgs> staticSites) {
            return staticSites(Output.of(staticSites));
        }

        public Builder staticSites(AppSpecStaticSiteArgs... staticSites) {
            return staticSites(List.of(staticSites));
        }

        public Builder workers(@Nullable Output<List<AppSpecWorkerArgs>> workers) {
            $.workers = workers;
            return this;
        }

        public Builder workers(List<AppSpecWorkerArgs> workers) {
            return workers(Output.of(workers));
        }

        public Builder workers(AppSpecWorkerArgs... workers) {
            return workers(List.of(workers));
        }

        public AppSpecArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
