// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.PartnerAttachmentBgpArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PartnerAttachmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final PartnerAttachmentArgs Empty = new PartnerAttachmentArgs();

    @Import(name="bgp")
    private @Nullable Output<PartnerAttachmentBgpArgs> bgp;

    public Optional<Output<PartnerAttachmentBgpArgs>> bgp() {
        return Optional.ofNullable(this.bgp);
    }

    /**
     * The connection bandwidth in Mbps
     * 
     */
    @Import(name="connectionBandwidthInMbps", required=true)
    private Output<Integer> connectionBandwidthInMbps;

    /**
     * @return The connection bandwidth in Mbps
     * 
     */
    public Output<Integer> connectionBandwidthInMbps() {
        return this.connectionBandwidthInMbps;
    }

    /**
     * The NaaS provider
     * 
     */
    @Import(name="naasProvider", required=true)
    private Output<String> naasProvider;

    /**
     * @return The NaaS provider
     * 
     */
    public Output<String> naasProvider() {
        return this.naasProvider;
    }

    /**
     * The name of the Partner Attachment
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Partner Attachment
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The UUID of the Parent Partner Attachment
     * 
     */
    @Import(name="parentUuid")
    private @Nullable Output<String> parentUuid;

    /**
     * @return The UUID of the Parent Partner Attachment
     * 
     */
    public Optional<Output<String>> parentUuid() {
        return Optional.ofNullable(this.parentUuid);
    }

    /**
     * The redundancy zone for the NaaS
     * 
     */
    @Import(name="redundancyZone")
    private @Nullable Output<String> redundancyZone;

    /**
     * @return The redundancy zone for the NaaS
     * 
     */
    public Optional<Output<String>> redundancyZone() {
        return Optional.ofNullable(this.redundancyZone);
    }

    /**
     * The region where the Partner Attachment will be created
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return The region where the Partner Attachment will be created
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The list of VPC IDs to attach the Partner Attachment to
     * 
     */
    @Import(name="vpcIds", required=true)
    private Output<List<String>> vpcIds;

    /**
     * @return The list of VPC IDs to attach the Partner Attachment to
     * 
     */
    public Output<List<String>> vpcIds() {
        return this.vpcIds;
    }

    private PartnerAttachmentArgs() {}

    private PartnerAttachmentArgs(PartnerAttachmentArgs $) {
        this.bgp = $.bgp;
        this.connectionBandwidthInMbps = $.connectionBandwidthInMbps;
        this.naasProvider = $.naasProvider;
        this.name = $.name;
        this.parentUuid = $.parentUuid;
        this.redundancyZone = $.redundancyZone;
        this.region = $.region;
        this.vpcIds = $.vpcIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PartnerAttachmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PartnerAttachmentArgs $;

        public Builder() {
            $ = new PartnerAttachmentArgs();
        }

        public Builder(PartnerAttachmentArgs defaults) {
            $ = new PartnerAttachmentArgs(Objects.requireNonNull(defaults));
        }

        public Builder bgp(@Nullable Output<PartnerAttachmentBgpArgs> bgp) {
            $.bgp = bgp;
            return this;
        }

        public Builder bgp(PartnerAttachmentBgpArgs bgp) {
            return bgp(Output.of(bgp));
        }

        /**
         * @param connectionBandwidthInMbps The connection bandwidth in Mbps
         * 
         * @return builder
         * 
         */
        public Builder connectionBandwidthInMbps(Output<Integer> connectionBandwidthInMbps) {
            $.connectionBandwidthInMbps = connectionBandwidthInMbps;
            return this;
        }

        /**
         * @param connectionBandwidthInMbps The connection bandwidth in Mbps
         * 
         * @return builder
         * 
         */
        public Builder connectionBandwidthInMbps(Integer connectionBandwidthInMbps) {
            return connectionBandwidthInMbps(Output.of(connectionBandwidthInMbps));
        }

        /**
         * @param naasProvider The NaaS provider
         * 
         * @return builder
         * 
         */
        public Builder naasProvider(Output<String> naasProvider) {
            $.naasProvider = naasProvider;
            return this;
        }

        /**
         * @param naasProvider The NaaS provider
         * 
         * @return builder
         * 
         */
        public Builder naasProvider(String naasProvider) {
            return naasProvider(Output.of(naasProvider));
        }

        /**
         * @param name The name of the Partner Attachment
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Partner Attachment
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param parentUuid The UUID of the Parent Partner Attachment
         * 
         * @return builder
         * 
         */
        public Builder parentUuid(@Nullable Output<String> parentUuid) {
            $.parentUuid = parentUuid;
            return this;
        }

        /**
         * @param parentUuid The UUID of the Parent Partner Attachment
         * 
         * @return builder
         * 
         */
        public Builder parentUuid(String parentUuid) {
            return parentUuid(Output.of(parentUuid));
        }

        /**
         * @param redundancyZone The redundancy zone for the NaaS
         * 
         * @return builder
         * 
         */
        public Builder redundancyZone(@Nullable Output<String> redundancyZone) {
            $.redundancyZone = redundancyZone;
            return this;
        }

        /**
         * @param redundancyZone The redundancy zone for the NaaS
         * 
         * @return builder
         * 
         */
        public Builder redundancyZone(String redundancyZone) {
            return redundancyZone(Output.of(redundancyZone));
        }

        /**
         * @param region The region where the Partner Attachment will be created
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region where the Partner Attachment will be created
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param vpcIds The list of VPC IDs to attach the Partner Attachment to
         * 
         * @return builder
         * 
         */
        public Builder vpcIds(Output<List<String>> vpcIds) {
            $.vpcIds = vpcIds;
            return this;
        }

        /**
         * @param vpcIds The list of VPC IDs to attach the Partner Attachment to
         * 
         * @return builder
         * 
         */
        public Builder vpcIds(List<String> vpcIds) {
            return vpcIds(Output.of(vpcIds));
        }

        /**
         * @param vpcIds The list of VPC IDs to attach the Partner Attachment to
         * 
         * @return builder
         * 
         */
        public Builder vpcIds(String... vpcIds) {
            return vpcIds(List.of(vpcIds));
        }

        public PartnerAttachmentArgs build() {
            if ($.connectionBandwidthInMbps == null) {
                throw new MissingRequiredPropertyException("PartnerAttachmentArgs", "connectionBandwidthInMbps");
            }
            if ($.naasProvider == null) {
                throw new MissingRequiredPropertyException("PartnerAttachmentArgs", "naasProvider");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("PartnerAttachmentArgs", "region");
            }
            if ($.vpcIds == null) {
                throw new MissingRequiredPropertyException("PartnerAttachmentArgs", "vpcIds");
            }
            return $;
        }
    }

}
