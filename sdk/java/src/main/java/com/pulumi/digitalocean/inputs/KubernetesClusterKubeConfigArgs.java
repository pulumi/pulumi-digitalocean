// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class KubernetesClusterKubeConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final KubernetesClusterKubeConfigArgs Empty = new KubernetesClusterKubeConfigArgs();

    /**
     * The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
     * 
     */
    @Import(name="clientCertificate")
    private @Nullable Output<String> clientCertificate;

    /**
     * @return The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
     * 
     */
    public Optional<Output<String>> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * The base64 encoded public certificate for the cluster&#39;s certificate authority.
     * 
     */
    @Import(name="clusterCaCertificate")
    private @Nullable Output<String> clusterCaCertificate;

    /**
     * @return The base64 encoded public certificate for the cluster&#39;s certificate authority.
     * 
     */
    public Optional<Output<String>> clusterCaCertificate() {
        return Optional.ofNullable(this.clusterCaCertificate);
    }

    /**
     * The date and time when the credentials will expire and need to be regenerated.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return The date and time when the credentials will expire and need to be regenerated.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The URL of the API server on the Kubernetes master node.
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return The URL of the API server on the Kubernetes master node.
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * The full contents of the Kubernetes cluster&#39;s kubeconfig file.
     * 
     */
    @Import(name="rawConfig")
    private @Nullable Output<String> rawConfig;

    /**
     * @return The full contents of the Kubernetes cluster&#39;s kubeconfig file.
     * 
     */
    public Optional<Output<String>> rawConfig() {
        return Optional.ofNullable(this.rawConfig);
    }

    /**
     * The DigitalOcean API access token used by clients to access the cluster.
     * 
     */
    @Import(name="token")
    private @Nullable Output<String> token;

    /**
     * @return The DigitalOcean API access token used by clients to access the cluster.
     * 
     */
    public Optional<Output<String>> token() {
        return Optional.ofNullable(this.token);
    }

    private KubernetesClusterKubeConfigArgs() {}

    private KubernetesClusterKubeConfigArgs(KubernetesClusterKubeConfigArgs $) {
        this.clientCertificate = $.clientCertificate;
        this.clientKey = $.clientKey;
        this.clusterCaCertificate = $.clusterCaCertificate;
        this.expiresAt = $.expiresAt;
        this.host = $.host;
        this.rawConfig = $.rawConfig;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(KubernetesClusterKubeConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private KubernetesClusterKubeConfigArgs $;

        public Builder() {
            $ = new KubernetesClusterKubeConfigArgs();
        }

        public Builder(KubernetesClusterKubeConfigArgs defaults) {
            $ = new KubernetesClusterKubeConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificate The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(@Nullable Output<String> clientCertificate) {
            $.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * @param clientCertificate The base64 encoded public certificate used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificate(String clientCertificate) {
            return clientCertificate(Output.of(clientCertificate));
        }

        /**
         * @param clientKey The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey The base64 encoded private key used by clients to access the cluster. Only available if token authentication is not supported on your cluster.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clusterCaCertificate The base64 encoded public certificate for the cluster&#39;s certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(@Nullable Output<String> clusterCaCertificate) {
            $.clusterCaCertificate = clusterCaCertificate;
            return this;
        }

        /**
         * @param clusterCaCertificate The base64 encoded public certificate for the cluster&#39;s certificate authority.
         * 
         * @return builder
         * 
         */
        public Builder clusterCaCertificate(String clusterCaCertificate) {
            return clusterCaCertificate(Output.of(clusterCaCertificate));
        }

        /**
         * @param expiresAt The date and time when the credentials will expire and need to be regenerated.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt The date and time when the credentials will expire and need to be regenerated.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param host The URL of the API server on the Kubernetes master node.
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The URL of the API server on the Kubernetes master node.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param rawConfig The full contents of the Kubernetes cluster&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder rawConfig(@Nullable Output<String> rawConfig) {
            $.rawConfig = rawConfig;
            return this;
        }

        /**
         * @param rawConfig The full contents of the Kubernetes cluster&#39;s kubeconfig file.
         * 
         * @return builder
         * 
         */
        public Builder rawConfig(String rawConfig) {
            return rawConfig(Output.of(rawConfig));
        }

        /**
         * @param token The DigitalOcean API access token used by clients to access the cluster.
         * 
         * @return builder
         * 
         */
        public Builder token(@Nullable Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The DigitalOcean API access token used by clients to access the cluster.
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public KubernetesClusterKubeConfigArgs build() {
            return $;
        }
    }

}
