// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.GetGenaiAgentTemplateModelAgreement;
import com.pulumi.digitalocean.inputs.GetGenaiAgentTemplateModelVersion;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetGenaiAgentTemplateModel extends com.pulumi.resources.InvokeArgs {

    public static final GetGenaiAgentTemplateModel Empty = new GetGenaiAgentTemplateModel();

    /**
     * Agreement information for the model
     * 
     */
    @Import(name="agreements")
    private @Nullable List<GetGenaiAgentTemplateModelAgreement> agreements;

    /**
     * @return Agreement information for the model
     * 
     */
    public Optional<List<GetGenaiAgentTemplateModelAgreement>> agreements() {
        return Optional.ofNullable(this.agreements);
    }

    /**
     * Created At timestamp for the Knowledge Base
     * 
     */
    @Import(name="createdAt", required=true)
    private String createdAt;

    /**
     * @return Created At timestamp for the Knowledge Base
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }

    /**
     * Inference name of the model
     * 
     */
    @Import(name="inferenceName")
    private @Nullable String inferenceName;

    /**
     * @return Inference name of the model
     * 
     */
    public Optional<String> inferenceName() {
        return Optional.ofNullable(this.inferenceName);
    }

    /**
     * Infernce version of the model
     * 
     */
    @Import(name="inferenceVersion")
    private @Nullable String inferenceVersion;

    /**
     * @return Infernce version of the model
     * 
     */
    public Optional<String> inferenceVersion() {
        return Optional.ofNullable(this.inferenceVersion);
    }

    /**
     * Indicates if the Model Base is foundational
     * 
     */
    @Import(name="isFoundational")
    private @Nullable Boolean isFoundational;

    /**
     * @return Indicates if the Model Base is foundational
     * 
     */
    public Optional<Boolean> isFoundational() {
        return Optional.ofNullable(this.isFoundational);
    }

    /**
     * Name of the Knowledge Base
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Name of the Knowledge Base
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Parent UUID of the Model
     * 
     */
    @Import(name="parentUuid")
    private @Nullable String parentUuid;

    /**
     * @return Parent UUID of the Model
     * 
     */
    public Optional<String> parentUuid() {
        return Optional.ofNullable(this.parentUuid);
    }

    /**
     * Provider of the Model
     * 
     */
    @Import(name="provider")
    private @Nullable String provider;

    /**
     * @return Provider of the Model
     * 
     */
    public Optional<String> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * Timestamp when the Knowledge Base was updated
     * 
     */
    @Import(name="updatedAt", required=true)
    private String updatedAt;

    /**
     * @return Timestamp when the Knowledge Base was updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    /**
     * Indicates if the Model upload is complete
     * 
     */
    @Import(name="uploadComplete")
    private @Nullable Boolean uploadComplete;

    /**
     * @return Indicates if the Model upload is complete
     * 
     */
    public Optional<Boolean> uploadComplete() {
        return Optional.ofNullable(this.uploadComplete);
    }

    /**
     * URL of the Model
     * 
     */
    @Import(name="url")
    private @Nullable String url;

    /**
     * @return URL of the Model
     * 
     */
    public Optional<String> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * List of Usecases for the Model
     * 
     */
    @Import(name="usecases")
    private @Nullable List<String> usecases;

    /**
     * @return List of Usecases for the Model
     * 
     */
    public Optional<List<String>> usecases() {
        return Optional.ofNullable(this.usecases);
    }

    /**
     * URL of the Model
     * 
     */
    @Import(name="versions")
    private @Nullable List<GetGenaiAgentTemplateModelVersion> versions;

    /**
     * @return URL of the Model
     * 
     */
    public Optional<List<GetGenaiAgentTemplateModelVersion>> versions() {
        return Optional.ofNullable(this.versions);
    }

    private GetGenaiAgentTemplateModel() {}

    private GetGenaiAgentTemplateModel(GetGenaiAgentTemplateModel $) {
        this.agreements = $.agreements;
        this.createdAt = $.createdAt;
        this.inferenceName = $.inferenceName;
        this.inferenceVersion = $.inferenceVersion;
        this.isFoundational = $.isFoundational;
        this.name = $.name;
        this.parentUuid = $.parentUuid;
        this.provider = $.provider;
        this.updatedAt = $.updatedAt;
        this.uploadComplete = $.uploadComplete;
        this.url = $.url;
        this.usecases = $.usecases;
        this.versions = $.versions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetGenaiAgentTemplateModel defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetGenaiAgentTemplateModel $;

        public Builder() {
            $ = new GetGenaiAgentTemplateModel();
        }

        public Builder(GetGenaiAgentTemplateModel defaults) {
            $ = new GetGenaiAgentTemplateModel(Objects.requireNonNull(defaults));
        }

        /**
         * @param agreements Agreement information for the model
         * 
         * @return builder
         * 
         */
        public Builder agreements(@Nullable List<GetGenaiAgentTemplateModelAgreement> agreements) {
            $.agreements = agreements;
            return this;
        }

        /**
         * @param agreements Agreement information for the model
         * 
         * @return builder
         * 
         */
        public Builder agreements(GetGenaiAgentTemplateModelAgreement... agreements) {
            return agreements(List.of(agreements));
        }

        /**
         * @param createdAt Created At timestamp for the Knowledge Base
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param inferenceName Inference name of the model
         * 
         * @return builder
         * 
         */
        public Builder inferenceName(@Nullable String inferenceName) {
            $.inferenceName = inferenceName;
            return this;
        }

        /**
         * @param inferenceVersion Infernce version of the model
         * 
         * @return builder
         * 
         */
        public Builder inferenceVersion(@Nullable String inferenceVersion) {
            $.inferenceVersion = inferenceVersion;
            return this;
        }

        /**
         * @param isFoundational Indicates if the Model Base is foundational
         * 
         * @return builder
         * 
         */
        public Builder isFoundational(@Nullable Boolean isFoundational) {
            $.isFoundational = isFoundational;
            return this;
        }

        /**
         * @param name Name of the Knowledge Base
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param parentUuid Parent UUID of the Model
         * 
         * @return builder
         * 
         */
        public Builder parentUuid(@Nullable String parentUuid) {
            $.parentUuid = parentUuid;
            return this;
        }

        /**
         * @param provider Provider of the Model
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable String provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param updatedAt Timestamp when the Knowledge Base was updated
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param uploadComplete Indicates if the Model upload is complete
         * 
         * @return builder
         * 
         */
        public Builder uploadComplete(@Nullable Boolean uploadComplete) {
            $.uploadComplete = uploadComplete;
            return this;
        }

        /**
         * @param url URL of the Model
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable String url) {
            $.url = url;
            return this;
        }

        /**
         * @param usecases List of Usecases for the Model
         * 
         * @return builder
         * 
         */
        public Builder usecases(@Nullable List<String> usecases) {
            $.usecases = usecases;
            return this;
        }

        /**
         * @param usecases List of Usecases for the Model
         * 
         * @return builder
         * 
         */
        public Builder usecases(String... usecases) {
            return usecases(List.of(usecases));
        }

        /**
         * @param versions URL of the Model
         * 
         * @return builder
         * 
         */
        public Builder versions(@Nullable List<GetGenaiAgentTemplateModelVersion> versions) {
            $.versions = versions;
            return this;
        }

        /**
         * @param versions URL of the Model
         * 
         * @return builder
         * 
         */
        public Builder versions(GetGenaiAgentTemplateModelVersion... versions) {
            return versions(List.of(versions));
        }

        public GetGenaiAgentTemplateModel build() {
            if ($.createdAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateModel", "createdAt");
            }
            if ($.updatedAt == null) {
                throw new MissingRequiredPropertyException("GetGenaiAgentTemplateModel", "updatedAt");
            }
            return $;
        }
    }

}
