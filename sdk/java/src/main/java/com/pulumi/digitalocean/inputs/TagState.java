// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TagState extends com.pulumi.resources.ResourceArgs {

    public static final TagState Empty = new TagState();

    /**
     * A count of the database clusters that the tag is applied to.
     * 
     */
    @Import(name="databasesCount")
    private @Nullable Output<Integer> databasesCount;

    /**
     * @return A count of the database clusters that the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> databasesCount() {
        return Optional.ofNullable(this.databasesCount);
    }

    /**
     * A count of the Droplets the tag is applied to.
     * 
     */
    @Import(name="dropletsCount")
    private @Nullable Output<Integer> dropletsCount;

    /**
     * @return A count of the Droplets the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> dropletsCount() {
        return Optional.ofNullable(this.dropletsCount);
    }

    /**
     * A count of the images that the tag is applied to.
     * 
     */
    @Import(name="imagesCount")
    private @Nullable Output<Integer> imagesCount;

    /**
     * @return A count of the images that the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> imagesCount() {
        return Optional.ofNullable(this.imagesCount);
    }

    /**
     * The name of the tag
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the tag
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A count of the total number of resources that the tag is applied to.
     * 
     */
    @Import(name="totalResourceCount")
    private @Nullable Output<Integer> totalResourceCount;

    /**
     * @return A count of the total number of resources that the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> totalResourceCount() {
        return Optional.ofNullable(this.totalResourceCount);
    }

    /**
     * A count of the volume snapshots that the tag is applied to.
     * 
     */
    @Import(name="volumeSnapshotsCount")
    private @Nullable Output<Integer> volumeSnapshotsCount;

    /**
     * @return A count of the volume snapshots that the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> volumeSnapshotsCount() {
        return Optional.ofNullable(this.volumeSnapshotsCount);
    }

    /**
     * A count of the volumes that the tag is applied to.
     * 
     */
    @Import(name="volumesCount")
    private @Nullable Output<Integer> volumesCount;

    /**
     * @return A count of the volumes that the tag is applied to.
     * 
     */
    public Optional<Output<Integer>> volumesCount() {
        return Optional.ofNullable(this.volumesCount);
    }

    private TagState() {}

    private TagState(TagState $) {
        this.databasesCount = $.databasesCount;
        this.dropletsCount = $.dropletsCount;
        this.imagesCount = $.imagesCount;
        this.name = $.name;
        this.totalResourceCount = $.totalResourceCount;
        this.volumeSnapshotsCount = $.volumeSnapshotsCount;
        this.volumesCount = $.volumesCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TagState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TagState $;

        public Builder() {
            $ = new TagState();
        }

        public Builder(TagState defaults) {
            $ = new TagState(Objects.requireNonNull(defaults));
        }

        /**
         * @param databasesCount A count of the database clusters that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder databasesCount(@Nullable Output<Integer> databasesCount) {
            $.databasesCount = databasesCount;
            return this;
        }

        /**
         * @param databasesCount A count of the database clusters that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder databasesCount(Integer databasesCount) {
            return databasesCount(Output.of(databasesCount));
        }

        /**
         * @param dropletsCount A count of the Droplets the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dropletsCount(@Nullable Output<Integer> dropletsCount) {
            $.dropletsCount = dropletsCount;
            return this;
        }

        /**
         * @param dropletsCount A count of the Droplets the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder dropletsCount(Integer dropletsCount) {
            return dropletsCount(Output.of(dropletsCount));
        }

        /**
         * @param imagesCount A count of the images that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder imagesCount(@Nullable Output<Integer> imagesCount) {
            $.imagesCount = imagesCount;
            return this;
        }

        /**
         * @param imagesCount A count of the images that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder imagesCount(Integer imagesCount) {
            return imagesCount(Output.of(imagesCount));
        }

        /**
         * @param name The name of the tag
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the tag
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param totalResourceCount A count of the total number of resources that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder totalResourceCount(@Nullable Output<Integer> totalResourceCount) {
            $.totalResourceCount = totalResourceCount;
            return this;
        }

        /**
         * @param totalResourceCount A count of the total number of resources that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder totalResourceCount(Integer totalResourceCount) {
            return totalResourceCount(Output.of(totalResourceCount));
        }

        /**
         * @param volumeSnapshotsCount A count of the volume snapshots that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder volumeSnapshotsCount(@Nullable Output<Integer> volumeSnapshotsCount) {
            $.volumeSnapshotsCount = volumeSnapshotsCount;
            return this;
        }

        /**
         * @param volumeSnapshotsCount A count of the volume snapshots that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder volumeSnapshotsCount(Integer volumeSnapshotsCount) {
            return volumeSnapshotsCount(Output.of(volumeSnapshotsCount));
        }

        /**
         * @param volumesCount A count of the volumes that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder volumesCount(@Nullable Output<Integer> volumesCount) {
            $.volumesCount = volumesCount;
            return this;
        }

        /**
         * @param volumesCount A count of the volumes that the tag is applied to.
         * 
         * @return builder
         * 
         */
        public Builder volumesCount(Integer volumesCount) {
            return volumesCount(Output.of(volumesCount));
        }

        public TagState build() {
            return $;
        }
    }

}
