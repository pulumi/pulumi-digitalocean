// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.digitalocean.outputs.GetDatabaseUserSetting;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseUserResult {
    private String clusterId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The authentication method of the MySQL user. The value will be `mysql_native_password` or `caching_sha2_password`.
     * 
     */
    private String mysqlAuthPlugin;
    private String name;
    /**
     * @return The password of the database user. This will not be set for MongoDB users.
     * 
     */
    private String password;
    /**
     * @return The role of the database user. The value will be either `primary` or `normal`.
     * 
     */
    private String role;
    private List<GetDatabaseUserSetting> settings;

    private GetDatabaseUserResult() {}
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The authentication method of the MySQL user. The value will be `mysql_native_password` or `caching_sha2_password`.
     * 
     */
    public String mysqlAuthPlugin() {
        return this.mysqlAuthPlugin;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return The password of the database user. This will not be set for MongoDB users.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The role of the database user. The value will be either `primary` or `normal`.
     * 
     */
    public String role() {
        return this.role;
    }
    public List<GetDatabaseUserSetting> settings() {
        return this.settings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String id;
        private String mysqlAuthPlugin;
        private String name;
        private String password;
        private String role;
        private List<GetDatabaseUserSetting> settings;
        public Builder() {}
        public Builder(GetDatabaseUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.id = defaults.id;
    	      this.mysqlAuthPlugin = defaults.mysqlAuthPlugin;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.role = defaults.role;
    	      this.settings = defaults.settings;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder mysqlAuthPlugin(String mysqlAuthPlugin) {
            this.mysqlAuthPlugin = Objects.requireNonNull(mysqlAuthPlugin);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            this.role = Objects.requireNonNull(role);
            return this;
        }
        @CustomType.Setter
        public Builder settings(List<GetDatabaseUserSetting> settings) {
            this.settings = Objects.requireNonNull(settings);
            return this;
        }
        public Builder settings(GetDatabaseUserSetting... settings) {
            return settings(List.of(settings));
        }
        public GetDatabaseUserResult build() {
            final var _resultValue = new GetDatabaseUserResult();
            _resultValue.clusterId = clusterId;
            _resultValue.id = id;
            _resultValue.mysqlAuthPlugin = mysqlAuthPlugin;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.role = role;
            _resultValue.settings = settings;
            return _resultValue;
        }
    }
}
