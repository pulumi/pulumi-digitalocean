// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseOpensearchConfigState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseOpensearchConfigState Empty = new DatabaseOpensearchConfigState();

    /**
     * Specifies whether ISM is enabled or not. Default: `true`
     * 
     */
    @Import(name="actionAutoCreateIndexEnabled")
    private @Nullable Output<Boolean> actionAutoCreateIndexEnabled;

    /**
     * @return Specifies whether ISM is enabled or not. Default: `true`
     * 
     */
    public Optional<Output<Boolean>> actionAutoCreateIndexEnabled() {
        return Optional.ofNullable(this.actionAutoCreateIndexEnabled);
    }

    /**
     * Specifies whether to require explicit index names when deleting indices.
     * 
     */
    @Import(name="actionDestructiveRequiresName")
    private @Nullable Output<Boolean> actionDestructiveRequiresName;

    /**
     * @return Specifies whether to require explicit index names when deleting indices.
     * 
     */
    public Optional<Output<Boolean>> actionDestructiveRequiresName() {
        return Optional.ofNullable(this.actionDestructiveRequiresName);
    }

    /**
     * The ID of the target Opensearch cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the target Opensearch cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Maximum number of shards allowed per data node.
     * 
     */
    @Import(name="clusterMaxShardsPerNode")
    private @Nullable Output<Integer> clusterMaxShardsPerNode;

    /**
     * @return Maximum number of shards allowed per data node.
     * 
     */
    public Optional<Output<Integer>> clusterMaxShardsPerNode() {
        return Optional.ofNullable(this.clusterMaxShardsPerNode);
    }

    /**
     * Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
     * 
     */
    @Import(name="clusterRoutingAllocationNodeConcurrentRecoveries")
    private @Nullable Output<Integer> clusterRoutingAllocationNodeConcurrentRecoveries;

    /**
     * @return Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
     * 
     */
    public Optional<Output<Integer>> clusterRoutingAllocationNodeConcurrentRecoveries() {
        return Optional.ofNullable(this.clusterRoutingAllocationNodeConcurrentRecoveries);
    }

    /**
     * Specifies whether to allow security audit logging. Default: `false`
     * 
     */
    @Import(name="enableSecurityAudit")
    private @Nullable Output<Boolean> enableSecurityAudit;

    /**
     * @return Specifies whether to allow security audit logging. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> enableSecurityAudit() {
        return Optional.ofNullable(this.enableSecurityAudit);
    }

    /**
     * Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
     * 
     */
    @Import(name="httpMaxContentLengthBytes")
    private @Nullable Output<Integer> httpMaxContentLengthBytes;

    /**
     * @return Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
     * 
     */
    public Optional<Output<Integer>> httpMaxContentLengthBytes() {
        return Optional.ofNullable(this.httpMaxContentLengthBytes);
    }

    /**
     * Maximum size of allowed headers, in bytes. Default: `8192`
     * 
     */
    @Import(name="httpMaxHeaderSizeBytes")
    private @Nullable Output<Integer> httpMaxHeaderSizeBytes;

    /**
     * @return Maximum size of allowed headers, in bytes. Default: `8192`
     * 
     */
    public Optional<Output<Integer>> httpMaxHeaderSizeBytes() {
        return Optional.ofNullable(this.httpMaxHeaderSizeBytes);
    }

    /**
     * Maximum length of an HTTP URL, in bytes. Default: `4096`
     * 
     */
    @Import(name="httpMaxInitialLineLengthBytes")
    private @Nullable Output<Integer> httpMaxInitialLineLengthBytes;

    /**
     * @return Maximum length of an HTTP URL, in bytes. Default: `4096`
     * 
     */
    public Optional<Output<Integer>> httpMaxInitialLineLengthBytes() {
        return Optional.ofNullable(this.httpMaxInitialLineLengthBytes);
    }

    /**
     * Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
     * 
     */
    @Import(name="indicesFielddataCacheSizePercentage")
    private @Nullable Output<Integer> indicesFielddataCacheSizePercentage;

    /**
     * @return Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
     * 
     */
    public Optional<Output<Integer>> indicesFielddataCacheSizePercentage() {
        return Optional.ofNullable(this.indicesFielddataCacheSizePercentage);
    }

    /**
     * Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
     * 
     */
    @Import(name="indicesMemoryIndexBufferSizePercentage")
    private @Nullable Output<Integer> indicesMemoryIndexBufferSizePercentage;

    /**
     * @return Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
     * 
     */
    public Optional<Output<Integer>> indicesMemoryIndexBufferSizePercentage() {
        return Optional.ofNullable(this.indicesMemoryIndexBufferSizePercentage);
    }

    /**
     * Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
     * 
     */
    @Import(name="indicesMemoryMaxIndexBufferSizeMb")
    private @Nullable Output<Integer> indicesMemoryMaxIndexBufferSizeMb;

    /**
     * @return Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
     * 
     */
    public Optional<Output<Integer>> indicesMemoryMaxIndexBufferSizeMb() {
        return Optional.ofNullable(this.indicesMemoryMaxIndexBufferSizeMb);
    }

    /**
     * Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
     * 
     */
    @Import(name="indicesMemoryMinIndexBufferSizeMb")
    private @Nullable Output<Integer> indicesMemoryMinIndexBufferSizeMb;

    /**
     * @return Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
     * 
     */
    public Optional<Output<Integer>> indicesMemoryMinIndexBufferSizeMb() {
        return Optional.ofNullable(this.indicesMemoryMinIndexBufferSizeMb);
    }

    /**
     * Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
     * 
     */
    @Import(name="indicesQueriesCacheSizePercentage")
    private @Nullable Output<Integer> indicesQueriesCacheSizePercentage;

    /**
     * @return Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
     * 
     */
    public Optional<Output<Integer>> indicesQueriesCacheSizePercentage() {
        return Optional.ofNullable(this.indicesQueriesCacheSizePercentage);
    }

    /**
     * Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
     * 
     */
    @Import(name="indicesQueryBoolMaxClauseCount")
    private @Nullable Output<Integer> indicesQueryBoolMaxClauseCount;

    /**
     * @return Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
     * 
     */
    public Optional<Output<Integer>> indicesQueryBoolMaxClauseCount() {
        return Optional.ofNullable(this.indicesQueryBoolMaxClauseCount);
    }

    /**
     * Maximum number of file chunks sent in parallel for each recovery. Default: `2`
     * 
     */
    @Import(name="indicesRecoveryMaxConcurrentFileChunks")
    private @Nullable Output<Integer> indicesRecoveryMaxConcurrentFileChunks;

    /**
     * @return Maximum number of file chunks sent in parallel for each recovery. Default: `2`
     * 
     */
    public Optional<Output<Integer>> indicesRecoveryMaxConcurrentFileChunks() {
        return Optional.ofNullable(this.indicesRecoveryMaxConcurrentFileChunks);
    }

    /**
     * Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
     * 
     */
    @Import(name="indicesRecoveryMaxMbPerSec")
    private @Nullable Output<Integer> indicesRecoveryMaxMbPerSec;

    /**
     * @return Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
     * 
     */
    public Optional<Output<Integer>> indicesRecoveryMaxMbPerSec() {
        return Optional.ofNullable(this.indicesRecoveryMaxMbPerSec);
    }

    /**
     * Specifies whether ISM is enabled or not. Default: `true`
     * 
     */
    @Import(name="ismEnabled")
    private @Nullable Output<Boolean> ismEnabled;

    /**
     * @return Specifies whether ISM is enabled or not. Default: `true`
     * 
     */
    public Optional<Output<Boolean>> ismEnabled() {
        return Optional.ofNullable(this.ismEnabled);
    }

    /**
     * Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
     * 
     */
    @Import(name="ismHistoryEnabled")
    private @Nullable Output<Boolean> ismHistoryEnabled;

    /**
     * @return Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
     * 
     */
    public Optional<Output<Boolean>> ismHistoryEnabled() {
        return Optional.ofNullable(this.ismHistoryEnabled);
    }

    /**
     * Maximum age before rolling over the audit history index, in hours. Default: `24`
     * 
     */
    @Import(name="ismHistoryMaxAgeHours")
    private @Nullable Output<Integer> ismHistoryMaxAgeHours;

    /**
     * @return Maximum age before rolling over the audit history index, in hours. Default: `24`
     * 
     */
    public Optional<Output<Integer>> ismHistoryMaxAgeHours() {
        return Optional.ofNullable(this.ismHistoryMaxAgeHours);
    }

    /**
     * Maximum number of documents before rolling over the audit history index. Default: `2500000`
     * 
     */
    @Import(name="ismHistoryMaxDocs")
    private @Nullable Output<Integer> ismHistoryMaxDocs;

    /**
     * @return Maximum number of documents before rolling over the audit history index. Default: `2500000`
     * 
     */
    public Optional<Output<Integer>> ismHistoryMaxDocs() {
        return Optional.ofNullable(this.ismHistoryMaxDocs);
    }

    /**
     * The time between rollover checks for the audit history index, in hours. Default: `8`
     * 
     */
    @Import(name="ismHistoryRolloverCheckPeriodHours")
    private @Nullable Output<Integer> ismHistoryRolloverCheckPeriodHours;

    /**
     * @return The time between rollover checks for the audit history index, in hours. Default: `8`
     * 
     */
    public Optional<Output<Integer>> ismHistoryRolloverCheckPeriodHours() {
        return Optional.ofNullable(this.ismHistoryRolloverCheckPeriodHours);
    }

    /**
     * Length of time long audit history indices are kept, in days. Default: `30`
     * 
     */
    @Import(name="ismHistoryRolloverRetentionPeriodDays")
    private @Nullable Output<Integer> ismHistoryRolloverRetentionPeriodDays;

    /**
     * @return Length of time long audit history indices are kept, in days. Default: `30`
     * 
     */
    public Optional<Output<Integer>> ismHistoryRolloverRetentionPeriodDays() {
        return Optional.ofNullable(this.ismHistoryRolloverRetentionPeriodDays);
    }

    /**
     * Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
     * 
     */
    @Import(name="overrideMainResponseVersion")
    private @Nullable Output<Boolean> overrideMainResponseVersion;

    /**
     * @return Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> overrideMainResponseVersion() {
        return Optional.ofNullable(this.overrideMainResponseVersion);
    }

    /**
     * Enable or disable filtering of alerting by backend roles. Default: `false`
     * 
     */
    @Import(name="pluginsAlertingFilterByBackendRolesEnabled")
    private @Nullable Output<Boolean> pluginsAlertingFilterByBackendRolesEnabled;

    /**
     * @return Enable or disable filtering of alerting by backend roles. Default: `false`
     * 
     */
    public Optional<Output<Boolean>> pluginsAlertingFilterByBackendRolesEnabled() {
        return Optional.ofNullable(this.pluginsAlertingFilterByBackendRolesEnabled);
    }

    /**
     * Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
     * 
     */
    @Import(name="reindexRemoteWhitelists")
    private @Nullable Output<List<String>> reindexRemoteWhitelists;

    /**
     * @return Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
     * 
     */
    public Optional<Output<List<String>>> reindexRemoteWhitelists() {
        return Optional.ofNullable(this.reindexRemoteWhitelists);
    }

    /**
     * Limits the number of inline script compilations within a period of time. Default is `use-context`
     * 
     */
    @Import(name="scriptMaxCompilationsRate")
    private @Nullable Output<String> scriptMaxCompilationsRate;

    /**
     * @return Limits the number of inline script compilations within a period of time. Default is `use-context`
     * 
     */
    public Optional<Output<String>> scriptMaxCompilationsRate() {
        return Optional.ofNullable(this.scriptMaxCompilationsRate);
    }

    /**
     * Maximum number of aggregation buckets allowed in a single response. Default: `10000`
     * 
     */
    @Import(name="searchMaxBuckets")
    private @Nullable Output<Integer> searchMaxBuckets;

    /**
     * @return Maximum number of aggregation buckets allowed in a single response. Default: `10000`
     * 
     */
    public Optional<Output<Integer>> searchMaxBuckets() {
        return Optional.ofNullable(this.searchMaxBuckets);
    }

    /**
     * Size of queue for operations in the analyze thread pool.
     * 
     */
    @Import(name="threadPoolAnalyzeQueueSize")
    private @Nullable Output<Integer> threadPoolAnalyzeQueueSize;

    /**
     * @return Size of queue for operations in the analyze thread pool.
     * 
     */
    public Optional<Output<Integer>> threadPoolAnalyzeQueueSize() {
        return Optional.ofNullable(this.threadPoolAnalyzeQueueSize);
    }

    /**
     * Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolAnalyzeSize")
    private @Nullable Output<Integer> threadPoolAnalyzeSize;

    /**
     * @return Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolAnalyzeSize() {
        return Optional.ofNullable(this.threadPoolAnalyzeSize);
    }

    /**
     * Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolForceMergeSize")
    private @Nullable Output<Integer> threadPoolForceMergeSize;

    /**
     * @return Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolForceMergeSize() {
        return Optional.ofNullable(this.threadPoolForceMergeSize);
    }

    /**
     * Size of queue for operations in the get thread pool.
     * 
     */
    @Import(name="threadPoolGetQueueSize")
    private @Nullable Output<Integer> threadPoolGetQueueSize;

    /**
     * @return Size of queue for operations in the get thread pool.
     * 
     */
    public Optional<Output<Integer>> threadPoolGetQueueSize() {
        return Optional.ofNullable(this.threadPoolGetQueueSize);
    }

    /**
     * Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolGetSize")
    private @Nullable Output<Integer> threadPoolGetSize;

    /**
     * @return Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolGetSize() {
        return Optional.ofNullable(this.threadPoolGetSize);
    }

    /**
     * Size of queue for operations in the search thread pool.
     * 
     */
    @Import(name="threadPoolSearchQueueSize")
    private @Nullable Output<Integer> threadPoolSearchQueueSize;

    /**
     * @return Size of queue for operations in the search thread pool.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchQueueSize() {
        return Optional.ofNullable(this.threadPoolSearchQueueSize);
    }

    /**
     * Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolSearchSize")
    private @Nullable Output<Integer> threadPoolSearchSize;

    /**
     * @return Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchSize() {
        return Optional.ofNullable(this.threadPoolSearchSize);
    }

    /**
     * Size of queue for operations in the search throttled thread pool.
     * 
     */
    @Import(name="threadPoolSearchThrottledQueueSize")
    private @Nullable Output<Integer> threadPoolSearchThrottledQueueSize;

    /**
     * @return Size of queue for operations in the search throttled thread pool.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchThrottledQueueSize() {
        return Optional.ofNullable(this.threadPoolSearchThrottledQueueSize);
    }

    /**
     * Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolSearchThrottledSize")
    private @Nullable Output<Integer> threadPoolSearchThrottledSize;

    /**
     * @return Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolSearchThrottledSize() {
        return Optional.ofNullable(this.threadPoolSearchThrottledSize);
    }

    /**
     * Size of queue for operations in the write thread pool.
     * 
     */
    @Import(name="threadPoolWriteQueueSize")
    private @Nullable Output<Integer> threadPoolWriteQueueSize;

    /**
     * @return Size of queue for operations in the write thread pool.
     * 
     */
    public Optional<Output<Integer>> threadPoolWriteQueueSize() {
        return Optional.ofNullable(this.threadPoolWriteQueueSize);
    }

    /**
     * Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    @Import(name="threadPoolWriteSize")
    private @Nullable Output<Integer> threadPoolWriteSize;

    /**
     * @return Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
     * 
     */
    public Optional<Output<Integer>> threadPoolWriteSize() {
        return Optional.ofNullable(this.threadPoolWriteSize);
    }

    private DatabaseOpensearchConfigState() {}

    private DatabaseOpensearchConfigState(DatabaseOpensearchConfigState $) {
        this.actionAutoCreateIndexEnabled = $.actionAutoCreateIndexEnabled;
        this.actionDestructiveRequiresName = $.actionDestructiveRequiresName;
        this.clusterId = $.clusterId;
        this.clusterMaxShardsPerNode = $.clusterMaxShardsPerNode;
        this.clusterRoutingAllocationNodeConcurrentRecoveries = $.clusterRoutingAllocationNodeConcurrentRecoveries;
        this.enableSecurityAudit = $.enableSecurityAudit;
        this.httpMaxContentLengthBytes = $.httpMaxContentLengthBytes;
        this.httpMaxHeaderSizeBytes = $.httpMaxHeaderSizeBytes;
        this.httpMaxInitialLineLengthBytes = $.httpMaxInitialLineLengthBytes;
        this.indicesFielddataCacheSizePercentage = $.indicesFielddataCacheSizePercentage;
        this.indicesMemoryIndexBufferSizePercentage = $.indicesMemoryIndexBufferSizePercentage;
        this.indicesMemoryMaxIndexBufferSizeMb = $.indicesMemoryMaxIndexBufferSizeMb;
        this.indicesMemoryMinIndexBufferSizeMb = $.indicesMemoryMinIndexBufferSizeMb;
        this.indicesQueriesCacheSizePercentage = $.indicesQueriesCacheSizePercentage;
        this.indicesQueryBoolMaxClauseCount = $.indicesQueryBoolMaxClauseCount;
        this.indicesRecoveryMaxConcurrentFileChunks = $.indicesRecoveryMaxConcurrentFileChunks;
        this.indicesRecoveryMaxMbPerSec = $.indicesRecoveryMaxMbPerSec;
        this.ismEnabled = $.ismEnabled;
        this.ismHistoryEnabled = $.ismHistoryEnabled;
        this.ismHistoryMaxAgeHours = $.ismHistoryMaxAgeHours;
        this.ismHistoryMaxDocs = $.ismHistoryMaxDocs;
        this.ismHistoryRolloverCheckPeriodHours = $.ismHistoryRolloverCheckPeriodHours;
        this.ismHistoryRolloverRetentionPeriodDays = $.ismHistoryRolloverRetentionPeriodDays;
        this.overrideMainResponseVersion = $.overrideMainResponseVersion;
        this.pluginsAlertingFilterByBackendRolesEnabled = $.pluginsAlertingFilterByBackendRolesEnabled;
        this.reindexRemoteWhitelists = $.reindexRemoteWhitelists;
        this.scriptMaxCompilationsRate = $.scriptMaxCompilationsRate;
        this.searchMaxBuckets = $.searchMaxBuckets;
        this.threadPoolAnalyzeQueueSize = $.threadPoolAnalyzeQueueSize;
        this.threadPoolAnalyzeSize = $.threadPoolAnalyzeSize;
        this.threadPoolForceMergeSize = $.threadPoolForceMergeSize;
        this.threadPoolGetQueueSize = $.threadPoolGetQueueSize;
        this.threadPoolGetSize = $.threadPoolGetSize;
        this.threadPoolSearchQueueSize = $.threadPoolSearchQueueSize;
        this.threadPoolSearchSize = $.threadPoolSearchSize;
        this.threadPoolSearchThrottledQueueSize = $.threadPoolSearchThrottledQueueSize;
        this.threadPoolSearchThrottledSize = $.threadPoolSearchThrottledSize;
        this.threadPoolWriteQueueSize = $.threadPoolWriteQueueSize;
        this.threadPoolWriteSize = $.threadPoolWriteSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseOpensearchConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseOpensearchConfigState $;

        public Builder() {
            $ = new DatabaseOpensearchConfigState();
        }

        public Builder(DatabaseOpensearchConfigState defaults) {
            $ = new DatabaseOpensearchConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionAutoCreateIndexEnabled Specifies whether ISM is enabled or not. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder actionAutoCreateIndexEnabled(@Nullable Output<Boolean> actionAutoCreateIndexEnabled) {
            $.actionAutoCreateIndexEnabled = actionAutoCreateIndexEnabled;
            return this;
        }

        /**
         * @param actionAutoCreateIndexEnabled Specifies whether ISM is enabled or not. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder actionAutoCreateIndexEnabled(Boolean actionAutoCreateIndexEnabled) {
            return actionAutoCreateIndexEnabled(Output.of(actionAutoCreateIndexEnabled));
        }

        /**
         * @param actionDestructiveRequiresName Specifies whether to require explicit index names when deleting indices.
         * 
         * @return builder
         * 
         */
        public Builder actionDestructiveRequiresName(@Nullable Output<Boolean> actionDestructiveRequiresName) {
            $.actionDestructiveRequiresName = actionDestructiveRequiresName;
            return this;
        }

        /**
         * @param actionDestructiveRequiresName Specifies whether to require explicit index names when deleting indices.
         * 
         * @return builder
         * 
         */
        public Builder actionDestructiveRequiresName(Boolean actionDestructiveRequiresName) {
            return actionDestructiveRequiresName(Output.of(actionDestructiveRequiresName));
        }

        /**
         * @param clusterId The ID of the target Opensearch cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target Opensearch cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param clusterMaxShardsPerNode Maximum number of shards allowed per data node.
         * 
         * @return builder
         * 
         */
        public Builder clusterMaxShardsPerNode(@Nullable Output<Integer> clusterMaxShardsPerNode) {
            $.clusterMaxShardsPerNode = clusterMaxShardsPerNode;
            return this;
        }

        /**
         * @param clusterMaxShardsPerNode Maximum number of shards allowed per data node.
         * 
         * @return builder
         * 
         */
        public Builder clusterMaxShardsPerNode(Integer clusterMaxShardsPerNode) {
            return clusterMaxShardsPerNode(Output.of(clusterMaxShardsPerNode));
        }

        /**
         * @param clusterRoutingAllocationNodeConcurrentRecoveries Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationNodeConcurrentRecoveries(@Nullable Output<Integer> clusterRoutingAllocationNodeConcurrentRecoveries) {
            $.clusterRoutingAllocationNodeConcurrentRecoveries = clusterRoutingAllocationNodeConcurrentRecoveries;
            return this;
        }

        /**
         * @param clusterRoutingAllocationNodeConcurrentRecoveries Maximum concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen per node. Default: `2`
         * 
         * @return builder
         * 
         */
        public Builder clusterRoutingAllocationNodeConcurrentRecoveries(Integer clusterRoutingAllocationNodeConcurrentRecoveries) {
            return clusterRoutingAllocationNodeConcurrentRecoveries(Output.of(clusterRoutingAllocationNodeConcurrentRecoveries));
        }

        /**
         * @param enableSecurityAudit Specifies whether to allow security audit logging. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableSecurityAudit(@Nullable Output<Boolean> enableSecurityAudit) {
            $.enableSecurityAudit = enableSecurityAudit;
            return this;
        }

        /**
         * @param enableSecurityAudit Specifies whether to allow security audit logging. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableSecurityAudit(Boolean enableSecurityAudit) {
            return enableSecurityAudit(Output.of(enableSecurityAudit));
        }

        /**
         * @param httpMaxContentLengthBytes Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxContentLengthBytes(@Nullable Output<Integer> httpMaxContentLengthBytes) {
            $.httpMaxContentLengthBytes = httpMaxContentLengthBytes;
            return this;
        }

        /**
         * @param httpMaxContentLengthBytes Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes. Default: `100000000`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxContentLengthBytes(Integer httpMaxContentLengthBytes) {
            return httpMaxContentLengthBytes(Output.of(httpMaxContentLengthBytes));
        }

        /**
         * @param httpMaxHeaderSizeBytes Maximum size of allowed headers, in bytes. Default: `8192`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxHeaderSizeBytes(@Nullable Output<Integer> httpMaxHeaderSizeBytes) {
            $.httpMaxHeaderSizeBytes = httpMaxHeaderSizeBytes;
            return this;
        }

        /**
         * @param httpMaxHeaderSizeBytes Maximum size of allowed headers, in bytes. Default: `8192`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxHeaderSizeBytes(Integer httpMaxHeaderSizeBytes) {
            return httpMaxHeaderSizeBytes(Output.of(httpMaxHeaderSizeBytes));
        }

        /**
         * @param httpMaxInitialLineLengthBytes Maximum length of an HTTP URL, in bytes. Default: `4096`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxInitialLineLengthBytes(@Nullable Output<Integer> httpMaxInitialLineLengthBytes) {
            $.httpMaxInitialLineLengthBytes = httpMaxInitialLineLengthBytes;
            return this;
        }

        /**
         * @param httpMaxInitialLineLengthBytes Maximum length of an HTTP URL, in bytes. Default: `4096`
         * 
         * @return builder
         * 
         */
        public Builder httpMaxInitialLineLengthBytes(Integer httpMaxInitialLineLengthBytes) {
            return httpMaxInitialLineLengthBytes(Output.of(httpMaxInitialLineLengthBytes));
        }

        /**
         * @param indicesFielddataCacheSizePercentage Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
         * 
         * @return builder
         * 
         */
        public Builder indicesFielddataCacheSizePercentage(@Nullable Output<Integer> indicesFielddataCacheSizePercentage) {
            $.indicesFielddataCacheSizePercentage = indicesFielddataCacheSizePercentage;
            return this;
        }

        /**
         * @param indicesFielddataCacheSizePercentage Maximum amount of heap memory used for field data cache, expressed as a percentage. Decreasing the value too much will increase overhead of loading field data. Increasing the value too much will decrease amount of heap available for other operations.
         * 
         * @return builder
         * 
         */
        public Builder indicesFielddataCacheSizePercentage(Integer indicesFielddataCacheSizePercentage) {
            return indicesFielddataCacheSizePercentage(Output.of(indicesFielddataCacheSizePercentage));
        }

        /**
         * @param indicesMemoryIndexBufferSizePercentage Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryIndexBufferSizePercentage(@Nullable Output<Integer> indicesMemoryIndexBufferSizePercentage) {
            $.indicesMemoryIndexBufferSizePercentage = indicesMemoryIndexBufferSizePercentage;
            return this;
        }

        /**
         * @param indicesMemoryIndexBufferSizePercentage Total amount of heap used for indexing buffer before writing segments to disk, expressed as a percentage. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance. Default: `10`
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryIndexBufferSizePercentage(Integer indicesMemoryIndexBufferSizePercentage) {
            return indicesMemoryIndexBufferSizePercentage(Output.of(indicesMemoryIndexBufferSizePercentage));
        }

        /**
         * @param indicesMemoryMaxIndexBufferSizeMb Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMaxIndexBufferSizeMb(@Nullable Output<Integer> indicesMemoryMaxIndexBufferSizeMb) {
            $.indicesMemoryMaxIndexBufferSizeMb = indicesMemoryMaxIndexBufferSizeMb;
            return this;
        }

        /**
         * @param indicesMemoryMaxIndexBufferSizeMb Maximum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. The default is unbounded.
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMaxIndexBufferSizeMb(Integer indicesMemoryMaxIndexBufferSizeMb) {
            return indicesMemoryMaxIndexBufferSizeMb(Output.of(indicesMemoryMaxIndexBufferSizeMb));
        }

        /**
         * @param indicesMemoryMinIndexBufferSizeMb Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMinIndexBufferSizeMb(@Nullable Output<Integer> indicesMemoryMinIndexBufferSizeMb) {
            $.indicesMemoryMinIndexBufferSizeMb = indicesMemoryMinIndexBufferSizeMb;
            return this;
        }

        /**
         * @param indicesMemoryMinIndexBufferSizeMb Minimum amount of heap used for indexing buffer before writing segments to disk, in mb. Works in conjunction with indices_memory_index_buffer_size_percentage, each being enforced. Default: `48`
         * 
         * @return builder
         * 
         */
        public Builder indicesMemoryMinIndexBufferSizeMb(Integer indicesMemoryMinIndexBufferSizeMb) {
            return indicesMemoryMinIndexBufferSizeMb(Output.of(indicesMemoryMinIndexBufferSizeMb));
        }

        /**
         * @param indicesQueriesCacheSizePercentage Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
         * 
         * @return builder
         * 
         */
        public Builder indicesQueriesCacheSizePercentage(@Nullable Output<Integer> indicesQueriesCacheSizePercentage) {
            $.indicesQueriesCacheSizePercentage = indicesQueriesCacheSizePercentage;
            return this;
        }

        /**
         * @param indicesQueriesCacheSizePercentage Maximum amount of heap used for query cache. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other functionality. Default: `10`
         * 
         * @return builder
         * 
         */
        public Builder indicesQueriesCacheSizePercentage(Integer indicesQueriesCacheSizePercentage) {
            return indicesQueriesCacheSizePercentage(Output.of(indicesQueriesCacheSizePercentage));
        }

        /**
         * @param indicesQueryBoolMaxClauseCount Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
         * 
         * @return builder
         * 
         */
        public Builder indicesQueryBoolMaxClauseCount(@Nullable Output<Integer> indicesQueryBoolMaxClauseCount) {
            $.indicesQueryBoolMaxClauseCount = indicesQueryBoolMaxClauseCount;
            return this;
        }

        /**
         * @param indicesQueryBoolMaxClauseCount Maximum number of clauses Lucene BooleanQuery can have. Only increase it if necessary, as it may cause performance issues. Default: `1024`
         * 
         * @return builder
         * 
         */
        public Builder indicesQueryBoolMaxClauseCount(Integer indicesQueryBoolMaxClauseCount) {
            return indicesQueryBoolMaxClauseCount(Output.of(indicesQueryBoolMaxClauseCount));
        }

        /**
         * @param indicesRecoveryMaxConcurrentFileChunks Maximum number of file chunks sent in parallel for each recovery. Default: `2`
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxConcurrentFileChunks(@Nullable Output<Integer> indicesRecoveryMaxConcurrentFileChunks) {
            $.indicesRecoveryMaxConcurrentFileChunks = indicesRecoveryMaxConcurrentFileChunks;
            return this;
        }

        /**
         * @param indicesRecoveryMaxConcurrentFileChunks Maximum number of file chunks sent in parallel for each recovery. Default: `2`
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxConcurrentFileChunks(Integer indicesRecoveryMaxConcurrentFileChunks) {
            return indicesRecoveryMaxConcurrentFileChunks(Output.of(indicesRecoveryMaxConcurrentFileChunks));
        }

        /**
         * @param indicesRecoveryMaxMbPerSec Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxMbPerSec(@Nullable Output<Integer> indicesRecoveryMaxMbPerSec) {
            $.indicesRecoveryMaxMbPerSec = indicesRecoveryMaxMbPerSec;
            return this;
        }

        /**
         * @param indicesRecoveryMaxMbPerSec Limits total inbound and outbound recovery traffic for each node, expressed in mb per second. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Default: `40`
         * 
         * @return builder
         * 
         */
        public Builder indicesRecoveryMaxMbPerSec(Integer indicesRecoveryMaxMbPerSec) {
            return indicesRecoveryMaxMbPerSec(Output.of(indicesRecoveryMaxMbPerSec));
        }

        /**
         * @param ismEnabled Specifies whether ISM is enabled or not. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder ismEnabled(@Nullable Output<Boolean> ismEnabled) {
            $.ismEnabled = ismEnabled;
            return this;
        }

        /**
         * @param ismEnabled Specifies whether ISM is enabled or not. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder ismEnabled(Boolean ismEnabled) {
            return ismEnabled(Output.of(ismEnabled));
        }

        /**
         * @param ismHistoryEnabled Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryEnabled(@Nullable Output<Boolean> ismHistoryEnabled) {
            $.ismHistoryEnabled = ismHistoryEnabled;
            return this;
        }

        /**
         * @param ismHistoryEnabled Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. Default: `true`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryEnabled(Boolean ismHistoryEnabled) {
            return ismHistoryEnabled(Output.of(ismHistoryEnabled));
        }

        /**
         * @param ismHistoryMaxAgeHours Maximum age before rolling over the audit history index, in hours. Default: `24`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxAgeHours(@Nullable Output<Integer> ismHistoryMaxAgeHours) {
            $.ismHistoryMaxAgeHours = ismHistoryMaxAgeHours;
            return this;
        }

        /**
         * @param ismHistoryMaxAgeHours Maximum age before rolling over the audit history index, in hours. Default: `24`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxAgeHours(Integer ismHistoryMaxAgeHours) {
            return ismHistoryMaxAgeHours(Output.of(ismHistoryMaxAgeHours));
        }

        /**
         * @param ismHistoryMaxDocs Maximum number of documents before rolling over the audit history index. Default: `2500000`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxDocs(@Nullable Output<Integer> ismHistoryMaxDocs) {
            $.ismHistoryMaxDocs = ismHistoryMaxDocs;
            return this;
        }

        /**
         * @param ismHistoryMaxDocs Maximum number of documents before rolling over the audit history index. Default: `2500000`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryMaxDocs(Integer ismHistoryMaxDocs) {
            return ismHistoryMaxDocs(Output.of(ismHistoryMaxDocs));
        }

        /**
         * @param ismHistoryRolloverCheckPeriodHours The time between rollover checks for the audit history index, in hours. Default: `8`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverCheckPeriodHours(@Nullable Output<Integer> ismHistoryRolloverCheckPeriodHours) {
            $.ismHistoryRolloverCheckPeriodHours = ismHistoryRolloverCheckPeriodHours;
            return this;
        }

        /**
         * @param ismHistoryRolloverCheckPeriodHours The time between rollover checks for the audit history index, in hours. Default: `8`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverCheckPeriodHours(Integer ismHistoryRolloverCheckPeriodHours) {
            return ismHistoryRolloverCheckPeriodHours(Output.of(ismHistoryRolloverCheckPeriodHours));
        }

        /**
         * @param ismHistoryRolloverRetentionPeriodDays Length of time long audit history indices are kept, in days. Default: `30`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverRetentionPeriodDays(@Nullable Output<Integer> ismHistoryRolloverRetentionPeriodDays) {
            $.ismHistoryRolloverRetentionPeriodDays = ismHistoryRolloverRetentionPeriodDays;
            return this;
        }

        /**
         * @param ismHistoryRolloverRetentionPeriodDays Length of time long audit history indices are kept, in days. Default: `30`
         * 
         * @return builder
         * 
         */
        public Builder ismHistoryRolloverRetentionPeriodDays(Integer ismHistoryRolloverRetentionPeriodDays) {
            return ismHistoryRolloverRetentionPeriodDays(Output.of(ismHistoryRolloverRetentionPeriodDays));
        }

        /**
         * @param overrideMainResponseVersion Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder overrideMainResponseVersion(@Nullable Output<Boolean> overrideMainResponseVersion) {
            $.overrideMainResponseVersion = overrideMainResponseVersion;
            return this;
        }

        /**
         * @param overrideMainResponseVersion Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder overrideMainResponseVersion(Boolean overrideMainResponseVersion) {
            return overrideMainResponseVersion(Output.of(overrideMainResponseVersion));
        }

        /**
         * @param pluginsAlertingFilterByBackendRolesEnabled Enable or disable filtering of alerting by backend roles. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder pluginsAlertingFilterByBackendRolesEnabled(@Nullable Output<Boolean> pluginsAlertingFilterByBackendRolesEnabled) {
            $.pluginsAlertingFilterByBackendRolesEnabled = pluginsAlertingFilterByBackendRolesEnabled;
            return this;
        }

        /**
         * @param pluginsAlertingFilterByBackendRolesEnabled Enable or disable filtering of alerting by backend roles. Default: `false`
         * 
         * @return builder
         * 
         */
        public Builder pluginsAlertingFilterByBackendRolesEnabled(Boolean pluginsAlertingFilterByBackendRolesEnabled) {
            return pluginsAlertingFilterByBackendRolesEnabled(Output.of(pluginsAlertingFilterByBackendRolesEnabled));
        }

        /**
         * @param reindexRemoteWhitelists Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(@Nullable Output<List<String>> reindexRemoteWhitelists) {
            $.reindexRemoteWhitelists = reindexRemoteWhitelists;
            return this;
        }

        /**
         * @param reindexRemoteWhitelists Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(List<String> reindexRemoteWhitelists) {
            return reindexRemoteWhitelists(Output.of(reindexRemoteWhitelists));
        }

        /**
         * @param reindexRemoteWhitelists Allowlist of remote IP addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.
         * 
         * @return builder
         * 
         */
        public Builder reindexRemoteWhitelists(String... reindexRemoteWhitelists) {
            return reindexRemoteWhitelists(List.of(reindexRemoteWhitelists));
        }

        /**
         * @param scriptMaxCompilationsRate Limits the number of inline script compilations within a period of time. Default is `use-context`
         * 
         * @return builder
         * 
         */
        public Builder scriptMaxCompilationsRate(@Nullable Output<String> scriptMaxCompilationsRate) {
            $.scriptMaxCompilationsRate = scriptMaxCompilationsRate;
            return this;
        }

        /**
         * @param scriptMaxCompilationsRate Limits the number of inline script compilations within a period of time. Default is `use-context`
         * 
         * @return builder
         * 
         */
        public Builder scriptMaxCompilationsRate(String scriptMaxCompilationsRate) {
            return scriptMaxCompilationsRate(Output.of(scriptMaxCompilationsRate));
        }

        /**
         * @param searchMaxBuckets Maximum number of aggregation buckets allowed in a single response. Default: `10000`
         * 
         * @return builder
         * 
         */
        public Builder searchMaxBuckets(@Nullable Output<Integer> searchMaxBuckets) {
            $.searchMaxBuckets = searchMaxBuckets;
            return this;
        }

        /**
         * @param searchMaxBuckets Maximum number of aggregation buckets allowed in a single response. Default: `10000`
         * 
         * @return builder
         * 
         */
        public Builder searchMaxBuckets(Integer searchMaxBuckets) {
            return searchMaxBuckets(Output.of(searchMaxBuckets));
        }

        /**
         * @param threadPoolAnalyzeQueueSize Size of queue for operations in the analyze thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeQueueSize(@Nullable Output<Integer> threadPoolAnalyzeQueueSize) {
            $.threadPoolAnalyzeQueueSize = threadPoolAnalyzeQueueSize;
            return this;
        }

        /**
         * @param threadPoolAnalyzeQueueSize Size of queue for operations in the analyze thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeQueueSize(Integer threadPoolAnalyzeQueueSize) {
            return threadPoolAnalyzeQueueSize(Output.of(threadPoolAnalyzeQueueSize));
        }

        /**
         * @param threadPoolAnalyzeSize Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeSize(@Nullable Output<Integer> threadPoolAnalyzeSize) {
            $.threadPoolAnalyzeSize = threadPoolAnalyzeSize;
            return this;
        }

        /**
         * @param threadPoolAnalyzeSize Number of workers in the analyze operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolAnalyzeSize(Integer threadPoolAnalyzeSize) {
            return threadPoolAnalyzeSize(Output.of(threadPoolAnalyzeSize));
        }

        /**
         * @param threadPoolForceMergeSize Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolForceMergeSize(@Nullable Output<Integer> threadPoolForceMergeSize) {
            $.threadPoolForceMergeSize = threadPoolForceMergeSize;
            return this;
        }

        /**
         * @param threadPoolForceMergeSize Number of workers in the force merge operation thread pool. This pool is used for forcing a merge between shards of one or more indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolForceMergeSize(Integer threadPoolForceMergeSize) {
            return threadPoolForceMergeSize(Output.of(threadPoolForceMergeSize));
        }

        /**
         * @param threadPoolGetQueueSize Size of queue for operations in the get thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetQueueSize(@Nullable Output<Integer> threadPoolGetQueueSize) {
            $.threadPoolGetQueueSize = threadPoolGetQueueSize;
            return this;
        }

        /**
         * @param threadPoolGetQueueSize Size of queue for operations in the get thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetQueueSize(Integer threadPoolGetQueueSize) {
            return threadPoolGetQueueSize(Output.of(threadPoolGetQueueSize));
        }

        /**
         * @param threadPoolGetSize Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetSize(@Nullable Output<Integer> threadPoolGetSize) {
            $.threadPoolGetSize = threadPoolGetSize;
            return this;
        }

        /**
         * @param threadPoolGetSize Number of workers in the get operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolGetSize(Integer threadPoolGetSize) {
            return threadPoolGetSize(Output.of(threadPoolGetSize));
        }

        /**
         * @param threadPoolSearchQueueSize Size of queue for operations in the search thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchQueueSize(@Nullable Output<Integer> threadPoolSearchQueueSize) {
            $.threadPoolSearchQueueSize = threadPoolSearchQueueSize;
            return this;
        }

        /**
         * @param threadPoolSearchQueueSize Size of queue for operations in the search thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchQueueSize(Integer threadPoolSearchQueueSize) {
            return threadPoolSearchQueueSize(Output.of(threadPoolSearchQueueSize));
        }

        /**
         * @param threadPoolSearchSize Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchSize(@Nullable Output<Integer> threadPoolSearchSize) {
            $.threadPoolSearchSize = threadPoolSearchSize;
            return this;
        }

        /**
         * @param threadPoolSearchSize Number of workers in the search operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchSize(Integer threadPoolSearchSize) {
            return threadPoolSearchSize(Output.of(threadPoolSearchSize));
        }

        /**
         * @param threadPoolSearchThrottledQueueSize Size of queue for operations in the search throttled thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledQueueSize(@Nullable Output<Integer> threadPoolSearchThrottledQueueSize) {
            $.threadPoolSearchThrottledQueueSize = threadPoolSearchThrottledQueueSize;
            return this;
        }

        /**
         * @param threadPoolSearchThrottledQueueSize Size of queue for operations in the search throttled thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledQueueSize(Integer threadPoolSearchThrottledQueueSize) {
            return threadPoolSearchThrottledQueueSize(Output.of(threadPoolSearchThrottledQueueSize));
        }

        /**
         * @param threadPoolSearchThrottledSize Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledSize(@Nullable Output<Integer> threadPoolSearchThrottledSize) {
            $.threadPoolSearchThrottledSize = threadPoolSearchThrottledSize;
            return this;
        }

        /**
         * @param threadPoolSearchThrottledSize Number of workers in the search throttled operation thread pool. This pool is used for searching frozen indices. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolSearchThrottledSize(Integer threadPoolSearchThrottledSize) {
            return threadPoolSearchThrottledSize(Output.of(threadPoolSearchThrottledSize));
        }

        /**
         * @param threadPoolWriteQueueSize Size of queue for operations in the write thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteQueueSize(@Nullable Output<Integer> threadPoolWriteQueueSize) {
            $.threadPoolWriteQueueSize = threadPoolWriteQueueSize;
            return this;
        }

        /**
         * @param threadPoolWriteQueueSize Size of queue for operations in the write thread pool.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteQueueSize(Integer threadPoolWriteQueueSize) {
            return threadPoolWriteQueueSize(Output.of(threadPoolWriteQueueSize));
        }

        /**
         * @param threadPoolWriteSize Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteSize(@Nullable Output<Integer> threadPoolWriteSize) {
            $.threadPoolWriteSize = threadPoolWriteSize;
            return this;
        }

        /**
         * @param threadPoolWriteSize Number of workers in the write operation thread pool. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.
         * 
         * @return builder
         * 
         */
        public Builder threadPoolWriteSize(Integer threadPoolWriteSize) {
            return threadPoolWriteSize(Output.of(threadPoolWriteSize));
        }

        public DatabaseOpensearchConfigState build() {
            return $;
        }
    }

}
