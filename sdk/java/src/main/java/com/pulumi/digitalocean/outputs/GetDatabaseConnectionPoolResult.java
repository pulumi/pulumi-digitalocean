// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseConnectionPoolResult {
    private String clusterId;
    /**
     * @return Name of the connection pool&#39;s default database.
     * 
     */
    private String dbName;
    /**
     * @return Connection pool hostname.
     * 
     */
    private String host;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return The transaction mode for the connection pool.
     * 
     */
    private String mode;
    private String name;
    /**
     * @return Password for the connection pool&#39;s default user.
     * 
     */
    private String password;
    /**
     * @return Network port that the connection pool is listening on.
     * 
     */
    private Integer port;
    /**
     * @return Same as `host`, but only accessible from resources within the account and in the same region.
     * 
     */
    private String privateHost;
    /**
     * @return Same as `uri`, but only accessible from resources within the account and in the same region.
     * 
     */
    private String privateUri;
    /**
     * @return Size of the connection pool.
     * 
     */
    private Integer size;
    /**
     * @return The full URI for connecting to the database connection pool.
     * 
     */
    private String uri;
    /**
     * @return Username for the connection pool&#39;s default user.
     * 
     */
    private String user;

    private GetDatabaseConnectionPoolResult() {}
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return Name of the connection pool&#39;s default database.
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return Connection pool hostname.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The transaction mode for the connection pool.
     * 
     */
    public String mode() {
        return this.mode;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Password for the connection pool&#39;s default user.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Network port that the connection pool is listening on.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Same as `host`, but only accessible from resources within the account and in the same region.
     * 
     */
    public String privateHost() {
        return this.privateHost;
    }
    /**
     * @return Same as `uri`, but only accessible from resources within the account and in the same region.
     * 
     */
    public String privateUri() {
        return this.privateUri;
    }
    /**
     * @return Size of the connection pool.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return The full URI for connecting to the database connection pool.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return Username for the connection pool&#39;s default user.
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseConnectionPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String dbName;
        private String host;
        private String id;
        private String mode;
        private String name;
        private String password;
        private Integer port;
        private String privateHost;
        private String privateUri;
        private Integer size;
        private String uri;
        private String user;
        public Builder() {}
        public Builder(GetDatabaseConnectionPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.dbName = defaults.dbName;
    	      this.host = defaults.host;
    	      this.id = defaults.id;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateHost = defaults.privateHost;
    	      this.privateUri = defaults.privateUri;
    	      this.size = defaults.size;
    	      this.uri = defaults.uri;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder privateHost(String privateHost) {
            if (privateHost == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "privateHost");
            }
            this.privateHost = privateHost;
            return this;
        }
        @CustomType.Setter
        public Builder privateUri(String privateUri) {
            if (privateUri == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "privateUri");
            }
            this.privateUri = privateUri;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("GetDatabaseConnectionPoolResult", "user");
            }
            this.user = user;
            return this;
        }
        public GetDatabaseConnectionPoolResult build() {
            final var _resultValue = new GetDatabaseConnectionPoolResult();
            _resultValue.clusterId = clusterId;
            _resultValue.dbName = dbName;
            _resultValue.host = host;
            _resultValue.id = id;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.privateHost = privateHost;
            _resultValue.privateUri = privateUri;
            _resultValue.size = size;
            _resultValue.uri = uri;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
