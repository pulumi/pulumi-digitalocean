// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.digitalocean.inputs.GenaiAgentAgentGuardrailArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentAnthropicApiKeyArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentApiKeyArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentApiKeyInfoArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentChatbotArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentChatbotIdentifierArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentChildAgentArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentDeploymentArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentFunctionArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentKnowledgeBaseArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentModelArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentOpenAiApiKeyArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentParentAgentArgs;
import com.pulumi.digitalocean.inputs.GenaiAgentTemplateArgs;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GenaiAgentArgs extends com.pulumi.resources.ResourceArgs {

    public static final GenaiAgentArgs Empty = new GenaiAgentArgs();

    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     * 
     */
    @Import(name="agentGuardrails")
    private @Nullable Output<List<GenaiAgentAgentGuardrailArgs>> agentGuardrails;

    /**
     * @return AgentGuardrail represents a Guardrail attached to Gen AI Agent
     * 
     */
    public Optional<Output<List<GenaiAgentAgentGuardrailArgs>>> agentGuardrails() {
        return Optional.ofNullable(this.agentGuardrails);
    }

    /**
     * Anthropic API Key information
     * 
     */
    @Import(name="anthropicApiKeys")
    private @Nullable Output<List<GenaiAgentAnthropicApiKeyArgs>> anthropicApiKeys;

    /**
     * @return Anthropic API Key information
     * 
     */
    public Optional<Output<List<GenaiAgentAnthropicApiKeyArgs>>> anthropicApiKeys() {
        return Optional.ofNullable(this.anthropicApiKeys);
    }

    /**
     * Optional Anthropic API key ID to use with Anthropic models
     * 
     */
    @Import(name="anthropicKeyUuid")
    private @Nullable Output<String> anthropicKeyUuid;

    /**
     * @return Optional Anthropic API key ID to use with Anthropic models
     * 
     */
    public Optional<Output<String>> anthropicKeyUuid() {
        return Optional.ofNullable(this.anthropicKeyUuid);
    }

    /**
     * List of API Key Infos
     * 
     */
    @Import(name="apiKeyInfos")
    private @Nullable Output<List<GenaiAgentApiKeyInfoArgs>> apiKeyInfos;

    /**
     * @return List of API Key Infos
     * 
     */
    public Optional<Output<List<GenaiAgentApiKeyInfoArgs>>> apiKeyInfos() {
        return Optional.ofNullable(this.apiKeyInfos);
    }

    /**
     * List of API Keys
     * 
     */
    @Import(name="apiKeys")
    private @Nullable Output<List<GenaiAgentApiKeyArgs>> apiKeys;

    /**
     * @return List of API Keys
     * 
     */
    public Optional<Output<List<GenaiAgentApiKeyArgs>>> apiKeys() {
        return Optional.ofNullable(this.apiKeys);
    }

    /**
     * List of Chatbot Identifiers
     * 
     */
    @Import(name="chatbotIdentifiers")
    private @Nullable Output<List<GenaiAgentChatbotIdentifierArgs>> chatbotIdentifiers;

    /**
     * @return List of Chatbot Identifiers
     * 
     */
    public Optional<Output<List<GenaiAgentChatbotIdentifierArgs>>> chatbotIdentifiers() {
        return Optional.ofNullable(this.chatbotIdentifiers);
    }

    /**
     * ChatBot configuration
     * 
     */
    @Import(name="chatbots")
    private @Nullable Output<List<GenaiAgentChatbotArgs>> chatbots;

    /**
     * @return ChatBot configuration
     * 
     */
    public Optional<Output<List<GenaiAgentChatbotArgs>>> chatbots() {
        return Optional.ofNullable(this.chatbots);
    }

    /**
     * List of child agents
     * 
     */
    @Import(name="childAgents")
    private @Nullable Output<List<GenaiAgentChildAgentArgs>> childAgents;

    /**
     * @return List of child agents
     * 
     */
    public Optional<Output<List<GenaiAgentChildAgentArgs>>> childAgents() {
        return Optional.ofNullable(this.childAgents);
    }

    /**
     * Timestamp when the Agent was created
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp when the Agent was created
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * List of API Key Infos
     * 
     */
    @Import(name="deployments")
    private @Nullable Output<List<GenaiAgentDeploymentArgs>> deployments;

    /**
     * @return List of API Key Infos
     * 
     */
    public Optional<Output<List<GenaiAgentDeploymentArgs>>> deployments() {
        return Optional.ofNullable(this.deployments);
    }

    /**
     * Description for the Agent
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description for the Agent
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of Functions
     * 
     */
    @Import(name="functions")
    private @Nullable Output<List<GenaiAgentFunctionArgs>> functions;

    /**
     * @return List of Functions
     * 
     */
    public Optional<Output<List<GenaiAgentFunctionArgs>>> functions() {
        return Optional.ofNullable(this.functions);
    }

    /**
     * If case condition
     * 
     */
    @Import(name="ifCase")
    private @Nullable Output<String> ifCase;

    /**
     * @return If case condition
     * 
     */
    public Optional<Output<String>> ifCase() {
        return Optional.ofNullable(this.ifCase);
    }

    /**
     * Instruction for the Agent
     * 
     */
    @Import(name="instruction", required=true)
    private Output<String> instruction;

    /**
     * @return Instruction for the Agent
     * 
     */
    public Output<String> instruction() {
        return this.instruction;
    }

    /**
     * K value
     * 
     */
    @Import(name="k")
    private @Nullable Output<Integer> k;

    /**
     * @return K value
     * 
     */
    public Optional<Output<Integer>> k() {
        return Optional.ofNullable(this.k);
    }

    /**
     * Ids of the knowledge base(s) to attach to the agent
     * 
     */
    @Import(name="knowledgeBaseUuids")
    private @Nullable Output<List<String>> knowledgeBaseUuids;

    /**
     * @return Ids of the knowledge base(s) to attach to the agent
     * 
     */
    public Optional<Output<List<String>>> knowledgeBaseUuids() {
        return Optional.ofNullable(this.knowledgeBaseUuids);
    }

    /**
     * List of Knowledge Bases
     * 
     */
    @Import(name="knowledgeBases")
    private @Nullable Output<List<GenaiAgentKnowledgeBaseArgs>> knowledgeBases;

    /**
     * @return List of Knowledge Bases
     * 
     */
    public Optional<Output<List<GenaiAgentKnowledgeBaseArgs>>> knowledgeBases() {
        return Optional.ofNullable(this.knowledgeBases);
    }

    /**
     * Maximum tokens allowed
     * 
     */
    @Import(name="maxTokens")
    private @Nullable Output<Integer> maxTokens;

    /**
     * @return Maximum tokens allowed
     * 
     */
    public Optional<Output<Integer>> maxTokens() {
        return Optional.ofNullable(this.maxTokens);
    }

    /**
     * Model UUID of the Agent
     * 
     */
    @Import(name="modelUuid", required=true)
    private Output<String> modelUuid;

    /**
     * @return Model UUID of the Agent
     * 
     */
    public Output<String> modelUuid() {
        return this.modelUuid;
    }

    /**
     * Model of the Agent
     * 
     */
    @Import(name="models")
    private @Nullable Output<List<GenaiAgentModelArgs>> models;

    /**
     * @return Model of the Agent
     * 
     */
    public Optional<Output<List<GenaiAgentModelArgs>>> models() {
        return Optional.ofNullable(this.models);
    }

    /**
     * Name of the Agent
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Agent
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * OpenAI API Key information
     * 
     */
    @Import(name="openAiApiKeys")
    private @Nullable Output<List<GenaiAgentOpenAiApiKeyArgs>> openAiApiKeys;

    /**
     * @return OpenAI API Key information
     * 
     */
    public Optional<Output<List<GenaiAgentOpenAiApiKeyArgs>>> openAiApiKeys() {
        return Optional.ofNullable(this.openAiApiKeys);
    }

    /**
     * Optional OpenAI API key ID to use with OpenAI models
     * 
     */
    @Import(name="openAiKeyUuid")
    private @Nullable Output<String> openAiKeyUuid;

    /**
     * @return Optional OpenAI API key ID to use with OpenAI models
     * 
     */
    public Optional<Output<String>> openAiKeyUuid() {
        return Optional.ofNullable(this.openAiKeyUuid);
    }

    /**
     * List of child agents
     * 
     */
    @Import(name="parentAgents")
    private @Nullable Output<List<GenaiAgentParentAgentArgs>> parentAgents;

    /**
     * @return List of child agents
     * 
     */
    public Optional<Output<List<GenaiAgentParentAgentArgs>>> parentAgents() {
        return Optional.ofNullable(this.parentAgents);
    }

    /**
     * Project ID of the Agent
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project ID of the Agent
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Indicates if the agent should provide citations in responses
     * 
     */
    @Import(name="provideCitations")
    private @Nullable Output<Boolean> provideCitations;

    /**
     * @return Indicates if the agent should provide citations in responses
     * 
     */
    public Optional<Output<Boolean>> provideCitations() {
        return Optional.ofNullable(this.provideCitations);
    }

    /**
     * Region where the Agent is deployed
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region where the Agent is deployed
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * Retrieval method used
     * 
     */
    @Import(name="retrievalMethod")
    private @Nullable Output<String> retrievalMethod;

    /**
     * @return Retrieval method used
     * 
     */
    public Optional<Output<String>> retrievalMethod() {
        return Optional.ofNullable(this.retrievalMethod);
    }

    /**
     * User who created the route
     * 
     */
    @Import(name="routeCreatedBy")
    private @Nullable Output<String> routeCreatedBy;

    /**
     * @return User who created the route
     * 
     */
    public Optional<Output<String>> routeCreatedBy() {
        return Optional.ofNullable(this.routeCreatedBy);
    }

    /**
     * Route name
     * 
     */
    @Import(name="routeName")
    private @Nullable Output<String> routeName;

    /**
     * @return Route name
     * 
     */
    public Optional<Output<String>> routeName() {
        return Optional.ofNullable(this.routeName);
    }

    /**
     * Route UUID
     * 
     */
    @Import(name="routeUuid")
    private @Nullable Output<String> routeUuid;

    /**
     * @return Route UUID
     * 
     */
    public Optional<Output<String>> routeUuid() {
        return Optional.ofNullable(this.routeUuid);
    }

    /**
     * List of Tags
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<String>> tags;

    /**
     * @return List of Tags
     * 
     */
    public Optional<Output<List<String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Agent temperature setting
     * 
     */
    @Import(name="temperature")
    private @Nullable Output<Double> temperature;

    /**
     * @return Agent temperature setting
     * 
     */
    public Optional<Output<Double>> temperature() {
        return Optional.ofNullable(this.temperature);
    }

    /**
     * Agent Template
     * 
     */
    @Import(name="templates")
    private @Nullable Output<List<GenaiAgentTemplateArgs>> templates;

    /**
     * @return Agent Template
     * 
     */
    public Optional<Output<List<GenaiAgentTemplateArgs>>> templates() {
        return Optional.ofNullable(this.templates);
    }

    /**
     * Top P sampling parameter
     * 
     */
    @Import(name="topP")
    private @Nullable Output<Double> topP;

    /**
     * @return Top P sampling parameter
     * 
     */
    public Optional<Output<Double>> topP() {
        return Optional.ofNullable(this.topP);
    }

    /**
     * URL for the Agent
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL for the Agent
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * User ID linked with the Agent
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return User ID linked with the Agent
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private GenaiAgentArgs() {}

    private GenaiAgentArgs(GenaiAgentArgs $) {
        this.agentGuardrails = $.agentGuardrails;
        this.anthropicApiKeys = $.anthropicApiKeys;
        this.anthropicKeyUuid = $.anthropicKeyUuid;
        this.apiKeyInfos = $.apiKeyInfos;
        this.apiKeys = $.apiKeys;
        this.chatbotIdentifiers = $.chatbotIdentifiers;
        this.chatbots = $.chatbots;
        this.childAgents = $.childAgents;
        this.createdAt = $.createdAt;
        this.deployments = $.deployments;
        this.description = $.description;
        this.functions = $.functions;
        this.ifCase = $.ifCase;
        this.instruction = $.instruction;
        this.k = $.k;
        this.knowledgeBaseUuids = $.knowledgeBaseUuids;
        this.knowledgeBases = $.knowledgeBases;
        this.maxTokens = $.maxTokens;
        this.modelUuid = $.modelUuid;
        this.models = $.models;
        this.name = $.name;
        this.openAiApiKeys = $.openAiApiKeys;
        this.openAiKeyUuid = $.openAiKeyUuid;
        this.parentAgents = $.parentAgents;
        this.projectId = $.projectId;
        this.provideCitations = $.provideCitations;
        this.region = $.region;
        this.retrievalMethod = $.retrievalMethod;
        this.routeCreatedBy = $.routeCreatedBy;
        this.routeName = $.routeName;
        this.routeUuid = $.routeUuid;
        this.tags = $.tags;
        this.temperature = $.temperature;
        this.templates = $.templates;
        this.topP = $.topP;
        this.url = $.url;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GenaiAgentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GenaiAgentArgs $;

        public Builder() {
            $ = new GenaiAgentArgs();
        }

        public Builder(GenaiAgentArgs defaults) {
            $ = new GenaiAgentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentGuardrails AgentGuardrail represents a Guardrail attached to Gen AI Agent
         * 
         * @return builder
         * 
         */
        public Builder agentGuardrails(@Nullable Output<List<GenaiAgentAgentGuardrailArgs>> agentGuardrails) {
            $.agentGuardrails = agentGuardrails;
            return this;
        }

        /**
         * @param agentGuardrails AgentGuardrail represents a Guardrail attached to Gen AI Agent
         * 
         * @return builder
         * 
         */
        public Builder agentGuardrails(List<GenaiAgentAgentGuardrailArgs> agentGuardrails) {
            return agentGuardrails(Output.of(agentGuardrails));
        }

        /**
         * @param agentGuardrails AgentGuardrail represents a Guardrail attached to Gen AI Agent
         * 
         * @return builder
         * 
         */
        public Builder agentGuardrails(GenaiAgentAgentGuardrailArgs... agentGuardrails) {
            return agentGuardrails(List.of(agentGuardrails));
        }

        /**
         * @param anthropicApiKeys Anthropic API Key information
         * 
         * @return builder
         * 
         */
        public Builder anthropicApiKeys(@Nullable Output<List<GenaiAgentAnthropicApiKeyArgs>> anthropicApiKeys) {
            $.anthropicApiKeys = anthropicApiKeys;
            return this;
        }

        /**
         * @param anthropicApiKeys Anthropic API Key information
         * 
         * @return builder
         * 
         */
        public Builder anthropicApiKeys(List<GenaiAgentAnthropicApiKeyArgs> anthropicApiKeys) {
            return anthropicApiKeys(Output.of(anthropicApiKeys));
        }

        /**
         * @param anthropicApiKeys Anthropic API Key information
         * 
         * @return builder
         * 
         */
        public Builder anthropicApiKeys(GenaiAgentAnthropicApiKeyArgs... anthropicApiKeys) {
            return anthropicApiKeys(List.of(anthropicApiKeys));
        }

        /**
         * @param anthropicKeyUuid Optional Anthropic API key ID to use with Anthropic models
         * 
         * @return builder
         * 
         */
        public Builder anthropicKeyUuid(@Nullable Output<String> anthropicKeyUuid) {
            $.anthropicKeyUuid = anthropicKeyUuid;
            return this;
        }

        /**
         * @param anthropicKeyUuid Optional Anthropic API key ID to use with Anthropic models
         * 
         * @return builder
         * 
         */
        public Builder anthropicKeyUuid(String anthropicKeyUuid) {
            return anthropicKeyUuid(Output.of(anthropicKeyUuid));
        }

        /**
         * @param apiKeyInfos List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder apiKeyInfos(@Nullable Output<List<GenaiAgentApiKeyInfoArgs>> apiKeyInfos) {
            $.apiKeyInfos = apiKeyInfos;
            return this;
        }

        /**
         * @param apiKeyInfos List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder apiKeyInfos(List<GenaiAgentApiKeyInfoArgs> apiKeyInfos) {
            return apiKeyInfos(Output.of(apiKeyInfos));
        }

        /**
         * @param apiKeyInfos List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder apiKeyInfos(GenaiAgentApiKeyInfoArgs... apiKeyInfos) {
            return apiKeyInfos(List.of(apiKeyInfos));
        }

        /**
         * @param apiKeys List of API Keys
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(@Nullable Output<List<GenaiAgentApiKeyArgs>> apiKeys) {
            $.apiKeys = apiKeys;
            return this;
        }

        /**
         * @param apiKeys List of API Keys
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(List<GenaiAgentApiKeyArgs> apiKeys) {
            return apiKeys(Output.of(apiKeys));
        }

        /**
         * @param apiKeys List of API Keys
         * 
         * @return builder
         * 
         */
        public Builder apiKeys(GenaiAgentApiKeyArgs... apiKeys) {
            return apiKeys(List.of(apiKeys));
        }

        /**
         * @param chatbotIdentifiers List of Chatbot Identifiers
         * 
         * @return builder
         * 
         */
        public Builder chatbotIdentifiers(@Nullable Output<List<GenaiAgentChatbotIdentifierArgs>> chatbotIdentifiers) {
            $.chatbotIdentifiers = chatbotIdentifiers;
            return this;
        }

        /**
         * @param chatbotIdentifiers List of Chatbot Identifiers
         * 
         * @return builder
         * 
         */
        public Builder chatbotIdentifiers(List<GenaiAgentChatbotIdentifierArgs> chatbotIdentifiers) {
            return chatbotIdentifiers(Output.of(chatbotIdentifiers));
        }

        /**
         * @param chatbotIdentifiers List of Chatbot Identifiers
         * 
         * @return builder
         * 
         */
        public Builder chatbotIdentifiers(GenaiAgentChatbotIdentifierArgs... chatbotIdentifiers) {
            return chatbotIdentifiers(List.of(chatbotIdentifiers));
        }

        /**
         * @param chatbots ChatBot configuration
         * 
         * @return builder
         * 
         */
        public Builder chatbots(@Nullable Output<List<GenaiAgentChatbotArgs>> chatbots) {
            $.chatbots = chatbots;
            return this;
        }

        /**
         * @param chatbots ChatBot configuration
         * 
         * @return builder
         * 
         */
        public Builder chatbots(List<GenaiAgentChatbotArgs> chatbots) {
            return chatbots(Output.of(chatbots));
        }

        /**
         * @param chatbots ChatBot configuration
         * 
         * @return builder
         * 
         */
        public Builder chatbots(GenaiAgentChatbotArgs... chatbots) {
            return chatbots(List.of(chatbots));
        }

        /**
         * @param childAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder childAgents(@Nullable Output<List<GenaiAgentChildAgentArgs>> childAgents) {
            $.childAgents = childAgents;
            return this;
        }

        /**
         * @param childAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder childAgents(List<GenaiAgentChildAgentArgs> childAgents) {
            return childAgents(Output.of(childAgents));
        }

        /**
         * @param childAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder childAgents(GenaiAgentChildAgentArgs... childAgents) {
            return childAgents(List.of(childAgents));
        }

        /**
         * @param createdAt Timestamp when the Agent was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp when the Agent was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param deployments List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder deployments(@Nullable Output<List<GenaiAgentDeploymentArgs>> deployments) {
            $.deployments = deployments;
            return this;
        }

        /**
         * @param deployments List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder deployments(List<GenaiAgentDeploymentArgs> deployments) {
            return deployments(Output.of(deployments));
        }

        /**
         * @param deployments List of API Key Infos
         * 
         * @return builder
         * 
         */
        public Builder deployments(GenaiAgentDeploymentArgs... deployments) {
            return deployments(List.of(deployments));
        }

        /**
         * @param description Description for the Agent
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description for the Agent
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param functions List of Functions
         * 
         * @return builder
         * 
         */
        public Builder functions(@Nullable Output<List<GenaiAgentFunctionArgs>> functions) {
            $.functions = functions;
            return this;
        }

        /**
         * @param functions List of Functions
         * 
         * @return builder
         * 
         */
        public Builder functions(List<GenaiAgentFunctionArgs> functions) {
            return functions(Output.of(functions));
        }

        /**
         * @param functions List of Functions
         * 
         * @return builder
         * 
         */
        public Builder functions(GenaiAgentFunctionArgs... functions) {
            return functions(List.of(functions));
        }

        /**
         * @param ifCase If case condition
         * 
         * @return builder
         * 
         */
        public Builder ifCase(@Nullable Output<String> ifCase) {
            $.ifCase = ifCase;
            return this;
        }

        /**
         * @param ifCase If case condition
         * 
         * @return builder
         * 
         */
        public Builder ifCase(String ifCase) {
            return ifCase(Output.of(ifCase));
        }

        /**
         * @param instruction Instruction for the Agent
         * 
         * @return builder
         * 
         */
        public Builder instruction(Output<String> instruction) {
            $.instruction = instruction;
            return this;
        }

        /**
         * @param instruction Instruction for the Agent
         * 
         * @return builder
         * 
         */
        public Builder instruction(String instruction) {
            return instruction(Output.of(instruction));
        }

        /**
         * @param k K value
         * 
         * @return builder
         * 
         */
        public Builder k(@Nullable Output<Integer> k) {
            $.k = k;
            return this;
        }

        /**
         * @param k K value
         * 
         * @return builder
         * 
         */
        public Builder k(Integer k) {
            return k(Output.of(k));
        }

        /**
         * @param knowledgeBaseUuids Ids of the knowledge base(s) to attach to the agent
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseUuids(@Nullable Output<List<String>> knowledgeBaseUuids) {
            $.knowledgeBaseUuids = knowledgeBaseUuids;
            return this;
        }

        /**
         * @param knowledgeBaseUuids Ids of the knowledge base(s) to attach to the agent
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseUuids(List<String> knowledgeBaseUuids) {
            return knowledgeBaseUuids(Output.of(knowledgeBaseUuids));
        }

        /**
         * @param knowledgeBaseUuids Ids of the knowledge base(s) to attach to the agent
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBaseUuids(String... knowledgeBaseUuids) {
            return knowledgeBaseUuids(List.of(knowledgeBaseUuids));
        }

        /**
         * @param knowledgeBases List of Knowledge Bases
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBases(@Nullable Output<List<GenaiAgentKnowledgeBaseArgs>> knowledgeBases) {
            $.knowledgeBases = knowledgeBases;
            return this;
        }

        /**
         * @param knowledgeBases List of Knowledge Bases
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBases(List<GenaiAgentKnowledgeBaseArgs> knowledgeBases) {
            return knowledgeBases(Output.of(knowledgeBases));
        }

        /**
         * @param knowledgeBases List of Knowledge Bases
         * 
         * @return builder
         * 
         */
        public Builder knowledgeBases(GenaiAgentKnowledgeBaseArgs... knowledgeBases) {
            return knowledgeBases(List.of(knowledgeBases));
        }

        /**
         * @param maxTokens Maximum tokens allowed
         * 
         * @return builder
         * 
         */
        public Builder maxTokens(@Nullable Output<Integer> maxTokens) {
            $.maxTokens = maxTokens;
            return this;
        }

        /**
         * @param maxTokens Maximum tokens allowed
         * 
         * @return builder
         * 
         */
        public Builder maxTokens(Integer maxTokens) {
            return maxTokens(Output.of(maxTokens));
        }

        /**
         * @param modelUuid Model UUID of the Agent
         * 
         * @return builder
         * 
         */
        public Builder modelUuid(Output<String> modelUuid) {
            $.modelUuid = modelUuid;
            return this;
        }

        /**
         * @param modelUuid Model UUID of the Agent
         * 
         * @return builder
         * 
         */
        public Builder modelUuid(String modelUuid) {
            return modelUuid(Output.of(modelUuid));
        }

        /**
         * @param models Model of the Agent
         * 
         * @return builder
         * 
         */
        public Builder models(@Nullable Output<List<GenaiAgentModelArgs>> models) {
            $.models = models;
            return this;
        }

        /**
         * @param models Model of the Agent
         * 
         * @return builder
         * 
         */
        public Builder models(List<GenaiAgentModelArgs> models) {
            return models(Output.of(models));
        }

        /**
         * @param models Model of the Agent
         * 
         * @return builder
         * 
         */
        public Builder models(GenaiAgentModelArgs... models) {
            return models(List.of(models));
        }

        /**
         * @param name Name of the Agent
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Agent
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param openAiApiKeys OpenAI API Key information
         * 
         * @return builder
         * 
         */
        public Builder openAiApiKeys(@Nullable Output<List<GenaiAgentOpenAiApiKeyArgs>> openAiApiKeys) {
            $.openAiApiKeys = openAiApiKeys;
            return this;
        }

        /**
         * @param openAiApiKeys OpenAI API Key information
         * 
         * @return builder
         * 
         */
        public Builder openAiApiKeys(List<GenaiAgentOpenAiApiKeyArgs> openAiApiKeys) {
            return openAiApiKeys(Output.of(openAiApiKeys));
        }

        /**
         * @param openAiApiKeys OpenAI API Key information
         * 
         * @return builder
         * 
         */
        public Builder openAiApiKeys(GenaiAgentOpenAiApiKeyArgs... openAiApiKeys) {
            return openAiApiKeys(List.of(openAiApiKeys));
        }

        /**
         * @param openAiKeyUuid Optional OpenAI API key ID to use with OpenAI models
         * 
         * @return builder
         * 
         */
        public Builder openAiKeyUuid(@Nullable Output<String> openAiKeyUuid) {
            $.openAiKeyUuid = openAiKeyUuid;
            return this;
        }

        /**
         * @param openAiKeyUuid Optional OpenAI API key ID to use with OpenAI models
         * 
         * @return builder
         * 
         */
        public Builder openAiKeyUuid(String openAiKeyUuid) {
            return openAiKeyUuid(Output.of(openAiKeyUuid));
        }

        /**
         * @param parentAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder parentAgents(@Nullable Output<List<GenaiAgentParentAgentArgs>> parentAgents) {
            $.parentAgents = parentAgents;
            return this;
        }

        /**
         * @param parentAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder parentAgents(List<GenaiAgentParentAgentArgs> parentAgents) {
            return parentAgents(Output.of(parentAgents));
        }

        /**
         * @param parentAgents List of child agents
         * 
         * @return builder
         * 
         */
        public Builder parentAgents(GenaiAgentParentAgentArgs... parentAgents) {
            return parentAgents(List.of(parentAgents));
        }

        /**
         * @param projectId Project ID of the Agent
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID of the Agent
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param provideCitations Indicates if the agent should provide citations in responses
         * 
         * @return builder
         * 
         */
        public Builder provideCitations(@Nullable Output<Boolean> provideCitations) {
            $.provideCitations = provideCitations;
            return this;
        }

        /**
         * @param provideCitations Indicates if the agent should provide citations in responses
         * 
         * @return builder
         * 
         */
        public Builder provideCitations(Boolean provideCitations) {
            return provideCitations(Output.of(provideCitations));
        }

        /**
         * @param region Region where the Agent is deployed
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region where the Agent is deployed
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param retrievalMethod Retrieval method used
         * 
         * @return builder
         * 
         */
        public Builder retrievalMethod(@Nullable Output<String> retrievalMethod) {
            $.retrievalMethod = retrievalMethod;
            return this;
        }

        /**
         * @param retrievalMethod Retrieval method used
         * 
         * @return builder
         * 
         */
        public Builder retrievalMethod(String retrievalMethod) {
            return retrievalMethod(Output.of(retrievalMethod));
        }

        /**
         * @param routeCreatedBy User who created the route
         * 
         * @return builder
         * 
         */
        public Builder routeCreatedBy(@Nullable Output<String> routeCreatedBy) {
            $.routeCreatedBy = routeCreatedBy;
            return this;
        }

        /**
         * @param routeCreatedBy User who created the route
         * 
         * @return builder
         * 
         */
        public Builder routeCreatedBy(String routeCreatedBy) {
            return routeCreatedBy(Output.of(routeCreatedBy));
        }

        /**
         * @param routeName Route name
         * 
         * @return builder
         * 
         */
        public Builder routeName(@Nullable Output<String> routeName) {
            $.routeName = routeName;
            return this;
        }

        /**
         * @param routeName Route name
         * 
         * @return builder
         * 
         */
        public Builder routeName(String routeName) {
            return routeName(Output.of(routeName));
        }

        /**
         * @param routeUuid Route UUID
         * 
         * @return builder
         * 
         */
        public Builder routeUuid(@Nullable Output<String> routeUuid) {
            $.routeUuid = routeUuid;
            return this;
        }

        /**
         * @param routeUuid Route UUID
         * 
         * @return builder
         * 
         */
        public Builder routeUuid(String routeUuid) {
            return routeUuid(Output.of(routeUuid));
        }

        /**
         * @param tags List of Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags List of Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(List<String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags List of Tags
         * 
         * @return builder
         * 
         */
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param temperature Agent temperature setting
         * 
         * @return builder
         * 
         */
        public Builder temperature(@Nullable Output<Double> temperature) {
            $.temperature = temperature;
            return this;
        }

        /**
         * @param temperature Agent temperature setting
         * 
         * @return builder
         * 
         */
        public Builder temperature(Double temperature) {
            return temperature(Output.of(temperature));
        }

        /**
         * @param templates Agent Template
         * 
         * @return builder
         * 
         */
        public Builder templates(@Nullable Output<List<GenaiAgentTemplateArgs>> templates) {
            $.templates = templates;
            return this;
        }

        /**
         * @param templates Agent Template
         * 
         * @return builder
         * 
         */
        public Builder templates(List<GenaiAgentTemplateArgs> templates) {
            return templates(Output.of(templates));
        }

        /**
         * @param templates Agent Template
         * 
         * @return builder
         * 
         */
        public Builder templates(GenaiAgentTemplateArgs... templates) {
            return templates(List.of(templates));
        }

        /**
         * @param topP Top P sampling parameter
         * 
         * @return builder
         * 
         */
        public Builder topP(@Nullable Output<Double> topP) {
            $.topP = topP;
            return this;
        }

        /**
         * @param topP Top P sampling parameter
         * 
         * @return builder
         * 
         */
        public Builder topP(Double topP) {
            return topP(Output.of(topP));
        }

        /**
         * @param url URL for the Agent
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL for the Agent
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param userId User ID linked with the Agent
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId User ID linked with the Agent
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public GenaiAgentArgs build() {
            if ($.instruction == null) {
                throw new MissingRequiredPropertyException("GenaiAgentArgs", "instruction");
            }
            if ($.modelUuid == null) {
                throw new MissingRequiredPropertyException("GenaiAgentArgs", "modelUuid");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GenaiAgentArgs", "projectId");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GenaiAgentArgs", "region");
            }
            return $;
        }
    }

}
