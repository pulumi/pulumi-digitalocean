// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DatabaseOnlineMigrationSource {
    /**
     * @return The name of the default database
     * 
     */
    private String dbName;
    /**
     * @return The FQDN pointing to the database cluster&#39;s current primary node.
     * 
     */
    private String host;
    /**
     * @return A randomly generated password for the default user.
     * 
     */
    private String password;
    /**
     * @return The port on which the database cluster is listening.
     * 
     */
    private Integer port;
    /**
     * @return The default user for the database.
     * 
     */
    private String username;

    private DatabaseOnlineMigrationSource() {}
    /**
     * @return The name of the default database
     * 
     */
    public String dbName() {
        return this.dbName;
    }
    /**
     * @return The FQDN pointing to the database cluster&#39;s current primary node.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return A randomly generated password for the default user.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return The port on which the database cluster is listening.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return The default user for the database.
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DatabaseOnlineMigrationSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dbName;
        private String host;
        private String password;
        private Integer port;
        private String username;
        public Builder() {}
        public Builder(DatabaseOnlineMigrationSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dbName = defaults.dbName;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder dbName(String dbName) {
            if (dbName == null) {
              throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSource", "dbName");
            }
            this.dbName = dbName;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSource", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSource", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSource", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("DatabaseOnlineMigrationSource", "username");
            }
            this.username = username;
            return this;
        }
        public DatabaseOnlineMigrationSource build() {
            final var _resultValue = new DatabaseOnlineMigrationSource();
            _resultValue.dbName = dbName;
            _resultValue.host = host;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
