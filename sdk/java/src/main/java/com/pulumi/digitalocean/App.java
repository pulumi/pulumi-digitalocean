// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.digitalocean.AppArgs;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.inputs.AppState;
import com.pulumi.digitalocean.outputs.AppDedicatedIp;
import com.pulumi.digitalocean.outputs.AppSpec;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a DigitalOcean App resource.
 * 
 * ## Example Usage
 * 
 * To create an app, provide a [DigitalOcean app spec](https://docs.digitalocean.com/products/app-platform/reference/app-spec/) specifying the app&#39;s components.
 * 
 * ### Basic Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.App;
 * import com.pulumi.digitalocean.AppArgs;
 * import com.pulumi.digitalocean.inputs.AppSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var golang_sample = new App("golang-sample", AppArgs.builder()
 *             .spec(AppSpecArgs.builder()
 *                 .name("golang-sample")
 *                 .region("ams")
 *                 .services(AppSpecServiceArgs.builder()
 *                     .name("go-service")
 *                     .environmentSlug("go")
 *                     .instanceCount(1)
 *                     .instanceSizeSlug("professional-xs")
 *                     .git(AppSpecServiceGitArgs.builder()
 *                         .repoCloneUrl("https://github.com/digitalocean/sample-golang.git")
 *                         .branch("main")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Static Site Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.App;
 * import com.pulumi.digitalocean.AppArgs;
 * import com.pulumi.digitalocean.inputs.AppSpecArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var static_site_example = new App("static-site-example", AppArgs.builder()
 *             .spec(AppSpecArgs.builder()
 *                 .name("static-site-example")
 *                 .region("ams")
 *                 .staticSites(AppSpecStaticSiteArgs.builder()
 *                     .name("sample-jekyll")
 *                     .buildCommand("bundle exec jekyll build -d ./public")
 *                     .outputDir("/public")
 *                     .git(AppSpecStaticSiteGitArgs.builder()
 *                         .repoCloneUrl("https://github.com/digitalocean/sample-jekyll.git")
 *                         .branch("main")
 *                         .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ### Multiple Components Example
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.App;
 * import com.pulumi.digitalocean.AppArgs;
 * import com.pulumi.digitalocean.inputs.AppSpecArgs;
 * import com.pulumi.digitalocean.inputs.AppSpecIngressArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var mono_repo_example = new App("mono-repo-example", AppArgs.builder()
 *             .spec(AppSpecArgs.builder()
 *                 .name("mono-repo-example")
 *                 .region("ams")
 *                 .domains(Map.of("name", "foo.example.com"))
 *                 .alerts(AppSpecAlertArgs.builder()
 *                     .rule("DEPLOYMENT_FAILED")
 *                     .build())
 *                 .services(AppSpecServiceArgs.builder()
 *                     .name("api")
 *                     .environmentSlug("go")
 *                     .instanceCount(2)
 *                     .instanceSizeSlug("professional-xs")
 *                     .github(AppSpecServiceGithubArgs.builder()
 *                         .branch("main")
 *                         .deployOnPush(true)
 *                         .repo("username/repo")
 *                         .build())
 *                     .sourceDir("api/")
 *                     .httpPort(3000)
 *                     .alerts(AppSpecServiceAlertArgs.builder()
 *                         .value(75)
 *                         .operator("GREATER_THAN")
 *                         .window("TEN_MINUTES")
 *                         .rule("CPU_UTILIZATION")
 *                         .build())
 *                     .logDestinations(AppSpecServiceLogDestinationArgs.builder()
 *                         .name("MyLogs")
 *                         .papertrail(AppSpecServiceLogDestinationPapertrailArgs.builder()
 *                             .endpoint("syslog+tls://example.com:12345")
 *                             .build())
 *                         .build())
 *                     .runCommand("bin/api")
 *                     .build())
 *                 .staticSites(AppSpecStaticSiteArgs.builder()
 *                     .name("web")
 *                     .buildCommand("npm run build")
 *                     .github(AppSpecStaticSiteGithubArgs.builder()
 *                         .branch("main")
 *                         .deployOnPush(true)
 *                         .repo("username/repo")
 *                         .build())
 *                     .build())
 *                 .databases(AppSpecDatabaseArgs.builder()
 *                     .name("starter-db")
 *                     .engine("PG")
 *                     .production(false)
 *                     .build())
 *                 .ingress(AppSpecIngressArgs.builder()
 *                     .rules(                    
 *                         AppSpecIngressRuleArgs.builder()
 *                             .component(AppSpecIngressRuleComponentArgs.builder()
 *                                 .name("api")
 *                                 .build())
 *                             .match(AppSpecIngressRuleMatchArgs.builder()
 *                                 .path(AppSpecIngressRuleMatchPathArgs.builder()
 *                                     .prefix("/api")
 *                                     .build())
 *                                 .build())
 *                             .build(),
 *                         AppSpecIngressRuleArgs.builder()
 *                             .component(AppSpecIngressRuleComponentArgs.builder()
 *                                 .name("web")
 *                                 .build())
 *                             .match(AppSpecIngressRuleMatchArgs.builder()
 *                                 .path(AppSpecIngressRuleMatchPathArgs.builder()
 *                                     .prefix("/")
 *                                     .build())
 *                                 .build())
 *                             .build())
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * An app can be imported using its `id`, e.g.
 * 
 * ```sh
 * $ pulumi import digitalocean:index/app:App myapp fb06ad00-351f-45c8-b5eb-13523c438661
 * ```
 * 
 */
@ResourceType(type="digitalocean:index/app:App")
public class App extends com.pulumi.resources.CustomResource {
    /**
     * The ID the app&#39;s currently active deployment.
     * 
     */
    @Export(name="activeDeploymentId", refs={String.class}, tree="[0]")
    private Output<String> activeDeploymentId;

    /**
     * @return The ID the app&#39;s currently active deployment.
     * 
     */
    public Output<String> activeDeploymentId() {
        return this.activeDeploymentId;
    }
    /**
     * The uniform resource identifier for the app.
     * 
     */
    @Export(name="appUrn", refs={String.class}, tree="[0]")
    private Output<String> appUrn;

    /**
     * @return The uniform resource identifier for the app.
     * 
     */
    public Output<String> appUrn() {
        return this.appUrn;
    }
    /**
     * The date and time of when the app was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return The date and time of when the app was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * The dedicated egress IP addresses associated with the app.
     * 
     */
    @Export(name="dedicatedIps", refs={List.class,AppDedicatedIp.class}, tree="[0,1]")
    private Output<List<AppDedicatedIp>> dedicatedIps;

    /**
     * @return The dedicated egress IP addresses associated with the app.
     * 
     */
    public Output<List<AppDedicatedIp>> dedicatedIps() {
        return this.dedicatedIps;
    }
    /**
     * The default URL to access the app.
     * 
     */
    @Export(name="defaultIngress", refs={String.class}, tree="[0]")
    private Output<String> defaultIngress;

    /**
     * @return The default URL to access the app.
     * 
     */
    public Output<String> defaultIngress() {
        return this.defaultIngress;
    }
    /**
     * The live URL of the app.
     * 
     */
    @Export(name="liveUrl", refs={String.class}, tree="[0]")
    private Output<String> liveUrl;

    /**
     * @return The live URL of the app.
     * 
     */
    public Output<String> liveUrl() {
        return this.liveUrl;
    }
    /**
     * The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The ID of the project that the app is assigned to.
     * 
     * A spec can contain multiple components.
     * 
     * A `service` can contain:
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * A DigitalOcean App spec describing the app.
     * 
     */
    @Export(name="spec", refs={AppSpec.class}, tree="[0]")
    private Output</* @Nullable */ AppSpec> spec;

    /**
     * @return A DigitalOcean App spec describing the app.
     * 
     */
    public Output<Optional<AppSpec>> spec() {
        return Codegen.optional(this.spec);
    }
    /**
     * The date and time of when the app was last updated.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return The date and time of when the app was last updated.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public App(String name) {
        this(name, AppArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public App(String name, @Nullable AppArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public App(String name, @Nullable AppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/app:App", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private App(String name, Output<String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/app:App", name, state, makeResourceOptions(options, id));
    }

    private static AppArgs makeArgs(@Nullable AppArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AppArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static App get(String name, Output<String> id, @Nullable AppState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new App(name, id, state, options);
    }
}
