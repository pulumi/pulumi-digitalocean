// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDropletsDroplet {
    /**
     * @return Whether backups are enabled.
     * 
     */
    private Boolean backups;
    private String createdAt;
    /**
     * @return The size of the Droplet&#39;s disk in GB.
     * 
     */
    private Integer disk;
    /**
     * @return The ID of the Droplet.
     * 
     */
    private Integer id;
    /**
     * @return The Droplet image ID or slug.
     * 
     */
    private String image;
    /**
     * @return The Droplet&#39;s public IPv4 address
     * 
     */
    private String ipv4Address;
    /**
     * @return The Droplet&#39;s private IPv4 address
     * 
     */
    private String ipv4AddressPrivate;
    /**
     * @return Whether IPv6 is enabled.
     * 
     */
    private Boolean ipv6;
    /**
     * @return The Droplet&#39;s public IPv6 address
     * 
     */
    private String ipv6Address;
    /**
     * @return The Droplet&#39;s private IPv6 address
     * 
     */
    private String ipv6AddressPrivate;
    /**
     * @return Whether the Droplet is locked.
     * 
     */
    private Boolean locked;
    /**
     * @return The amount of the Droplet&#39;s memory in MB.
     * 
     */
    private Integer memory;
    /**
     * @return Whether monitoring agent is installed.
     * 
     */
    private Boolean monitoring;
    private String name;
    /**
     * @return Droplet hourly price.
     * 
     */
    private Double priceHourly;
    /**
     * @return Droplet monthly price.
     * 
     */
    private Double priceMonthly;
    /**
     * @return Whether private networks are enabled.
     * 
     */
    private Boolean privateNetworking;
    /**
     * @return The region the Droplet is running in.
     * 
     */
    private String region;
    /**
     * @return The unique slug that identifies the type of Droplet.
     * 
     */
    private String size;
    /**
     * @return The status of the Droplet.
     * 
     */
    private String status;
    /**
     * @return A list of the tags associated to the Droplet.
     * 
     */
    private List<String> tags;
    /**
     * @return The uniform resource name of the Droplet
     * 
     */
    private String urn;
    /**
     * @return The number of the Droplet&#39;s virtual CPUs.
     * 
     */
    private Integer vcpus;
    /**
     * @return List of the IDs of each volumes attached to the Droplet.
     * 
     */
    private List<String> volumeIds;
    /**
     * @return The ID of the VPC where the Droplet is located.
     * 
     */
    private String vpcUuid;

    private GetDropletsDroplet() {}
    /**
     * @return Whether backups are enabled.
     * 
     */
    public Boolean backups() {
        return this.backups;
    }
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return The size of the Droplet&#39;s disk in GB.
     * 
     */
    public Integer disk() {
        return this.disk;
    }
    /**
     * @return The ID of the Droplet.
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return The Droplet image ID or slug.
     * 
     */
    public String image() {
        return this.image;
    }
    /**
     * @return The Droplet&#39;s public IPv4 address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return The Droplet&#39;s private IPv4 address
     * 
     */
    public String ipv4AddressPrivate() {
        return this.ipv4AddressPrivate;
    }
    /**
     * @return Whether IPv6 is enabled.
     * 
     */
    public Boolean ipv6() {
        return this.ipv6;
    }
    /**
     * @return The Droplet&#39;s public IPv6 address
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return The Droplet&#39;s private IPv6 address
     * 
     */
    public String ipv6AddressPrivate() {
        return this.ipv6AddressPrivate;
    }
    /**
     * @return Whether the Droplet is locked.
     * 
     */
    public Boolean locked() {
        return this.locked;
    }
    /**
     * @return The amount of the Droplet&#39;s memory in MB.
     * 
     */
    public Integer memory() {
        return this.memory;
    }
    /**
     * @return Whether monitoring agent is installed.
     * 
     */
    public Boolean monitoring() {
        return this.monitoring;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Droplet hourly price.
     * 
     */
    public Double priceHourly() {
        return this.priceHourly;
    }
    /**
     * @return Droplet monthly price.
     * 
     */
    public Double priceMonthly() {
        return this.priceMonthly;
    }
    /**
     * @return Whether private networks are enabled.
     * 
     */
    public Boolean privateNetworking() {
        return this.privateNetworking;
    }
    /**
     * @return The region the Droplet is running in.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The unique slug that identifies the type of Droplet.
     * 
     */
    public String size() {
        return this.size;
    }
    /**
     * @return The status of the Droplet.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return A list of the tags associated to the Droplet.
     * 
     */
    public List<String> tags() {
        return this.tags;
    }
    /**
     * @return The uniform resource name of the Droplet
     * 
     */
    public String urn() {
        return this.urn;
    }
    /**
     * @return The number of the Droplet&#39;s virtual CPUs.
     * 
     */
    public Integer vcpus() {
        return this.vcpus;
    }
    /**
     * @return List of the IDs of each volumes attached to the Droplet.
     * 
     */
    public List<String> volumeIds() {
        return this.volumeIds;
    }
    /**
     * @return The ID of the VPC where the Droplet is located.
     * 
     */
    public String vpcUuid() {
        return this.vpcUuid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDropletsDroplet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean backups;
        private String createdAt;
        private Integer disk;
        private Integer id;
        private String image;
        private String ipv4Address;
        private String ipv4AddressPrivate;
        private Boolean ipv6;
        private String ipv6Address;
        private String ipv6AddressPrivate;
        private Boolean locked;
        private Integer memory;
        private Boolean monitoring;
        private String name;
        private Double priceHourly;
        private Double priceMonthly;
        private Boolean privateNetworking;
        private String region;
        private String size;
        private String status;
        private List<String> tags;
        private String urn;
        private Integer vcpus;
        private List<String> volumeIds;
        private String vpcUuid;
        public Builder() {}
        public Builder(GetDropletsDroplet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backups = defaults.backups;
    	      this.createdAt = defaults.createdAt;
    	      this.disk = defaults.disk;
    	      this.id = defaults.id;
    	      this.image = defaults.image;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressPrivate = defaults.ipv4AddressPrivate;
    	      this.ipv6 = defaults.ipv6;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressPrivate = defaults.ipv6AddressPrivate;
    	      this.locked = defaults.locked;
    	      this.memory = defaults.memory;
    	      this.monitoring = defaults.monitoring;
    	      this.name = defaults.name;
    	      this.priceHourly = defaults.priceHourly;
    	      this.priceMonthly = defaults.priceMonthly;
    	      this.privateNetworking = defaults.privateNetworking;
    	      this.region = defaults.region;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.urn = defaults.urn;
    	      this.vcpus = defaults.vcpus;
    	      this.volumeIds = defaults.volumeIds;
    	      this.vpcUuid = defaults.vpcUuid;
        }

        @CustomType.Setter
        public Builder backups(Boolean backups) {
            if (backups == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "backups");
            }
            this.backups = backups;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder disk(Integer disk) {
            if (disk == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "disk");
            }
            this.disk = disk;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder image(String image) {
            if (image == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "image");
            }
            this.image = image;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressPrivate(String ipv4AddressPrivate) {
            if (ipv4AddressPrivate == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "ipv4AddressPrivate");
            }
            this.ipv4AddressPrivate = ipv4AddressPrivate;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6(Boolean ipv6) {
            if (ipv6 == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "ipv6");
            }
            this.ipv6 = ipv6;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressPrivate(String ipv6AddressPrivate) {
            if (ipv6AddressPrivate == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "ipv6AddressPrivate");
            }
            this.ipv6AddressPrivate = ipv6AddressPrivate;
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            if (locked == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "locked");
            }
            this.locked = locked;
            return this;
        }
        @CustomType.Setter
        public Builder memory(Integer memory) {
            if (memory == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "memory");
            }
            this.memory = memory;
            return this;
        }
        @CustomType.Setter
        public Builder monitoring(Boolean monitoring) {
            if (monitoring == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "monitoring");
            }
            this.monitoring = monitoring;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priceHourly(Double priceHourly) {
            if (priceHourly == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "priceHourly");
            }
            this.priceHourly = priceHourly;
            return this;
        }
        @CustomType.Setter
        public Builder priceMonthly(Double priceMonthly) {
            if (priceMonthly == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "priceMonthly");
            }
            this.priceMonthly = priceMonthly;
            return this;
        }
        @CustomType.Setter
        public Builder privateNetworking(Boolean privateNetworking) {
            if (privateNetworking == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "privateNetworking");
            }
            this.privateNetworking = privateNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder size(String size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder urn(String urn) {
            if (urn == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "urn");
            }
            this.urn = urn;
            return this;
        }
        @CustomType.Setter
        public Builder vcpus(Integer vcpus) {
            if (vcpus == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "vcpus");
            }
            this.vcpus = vcpus;
            return this;
        }
        @CustomType.Setter
        public Builder volumeIds(List<String> volumeIds) {
            if (volumeIds == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "volumeIds");
            }
            this.volumeIds = volumeIds;
            return this;
        }
        public Builder volumeIds(String... volumeIds) {
            return volumeIds(List.of(volumeIds));
        }
        @CustomType.Setter
        public Builder vpcUuid(String vpcUuid) {
            if (vpcUuid == null) {
              throw new MissingRequiredPropertyException("GetDropletsDroplet", "vpcUuid");
            }
            this.vpcUuid = vpcUuid;
            return this;
        }
        public GetDropletsDroplet build() {
            final var _resultValue = new GetDropletsDroplet();
            _resultValue.backups = backups;
            _resultValue.createdAt = createdAt;
            _resultValue.disk = disk;
            _resultValue.id = id;
            _resultValue.image = image;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressPrivate = ipv4AddressPrivate;
            _resultValue.ipv6 = ipv6;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressPrivate = ipv6AddressPrivate;
            _resultValue.locked = locked;
            _resultValue.memory = memory;
            _resultValue.monitoring = monitoring;
            _resultValue.name = name;
            _resultValue.priceHourly = priceHourly;
            _resultValue.priceMonthly = priceMonthly;
            _resultValue.privateNetworking = privateNetworking;
            _resultValue.region = region;
            _resultValue.size = size;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.urn = urn;
            _resultValue.vcpus = vcpus;
            _resultValue.volumeIds = volumeIds;
            _resultValue.vpcUuid = vpcUuid;
            return _resultValue;
        }
    }
}
