// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.digitalocean.Utilities;
import com.pulumi.digitalocean.VolumeArgs;
import com.pulumi.digitalocean.inputs.VolumeState;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a DigitalOcean Block Storage volume which can be attached to a Droplet in order to provide expanded storage.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.Volume;
 * import com.pulumi.digitalocean.VolumeArgs;
 * import com.pulumi.digitalocean.Droplet;
 * import com.pulumi.digitalocean.DropletArgs;
 * import com.pulumi.digitalocean.VolumeAttachment;
 * import com.pulumi.digitalocean.VolumeAttachmentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var foobarVolume = new Volume(&#34;foobarVolume&#34;, VolumeArgs.builder()        
 *             .region(&#34;nyc1&#34;)
 *             .size(100)
 *             .initialFilesystemType(&#34;ext4&#34;)
 *             .description(&#34;an example volume&#34;)
 *             .build());
 * 
 *         var foobarDroplet = new Droplet(&#34;foobarDroplet&#34;, DropletArgs.builder()        
 *             .size(&#34;s-1vcpu-1gb&#34;)
 *             .image(&#34;ubuntu-18-04-x64&#34;)
 *             .region(&#34;nyc1&#34;)
 *             .build());
 * 
 *         var foobarVolumeAttachment = new VolumeAttachment(&#34;foobarVolumeAttachment&#34;, VolumeAttachmentArgs.builder()        
 *             .dropletId(foobarDroplet.id())
 *             .volumeId(foobarVolume.id())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * You can also create a volume from an existing snapshot.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.digitalocean.DigitaloceanFunctions;
 * import com.pulumi.digitalocean.inputs.GetVolumeSnapshotArgs;
 * import com.pulumi.digitalocean.Volume;
 * import com.pulumi.digitalocean.VolumeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var foobarVolumeSnapshot = DigitaloceanFunctions.getVolumeSnapshot(GetVolumeSnapshotArgs.builder()
 *             .name(&#34;baz&#34;)
 *             .build());
 * 
 *         var foobarVolume = new Volume(&#34;foobarVolume&#34;, VolumeArgs.builder()        
 *             .region(&#34;lon1&#34;)
 *             .size(foobarVolumeSnapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.minDiskSize()))
 *             .snapshotId(foobarVolumeSnapshot.applyValue(getVolumeSnapshotResult -&gt; getVolumeSnapshotResult.id()))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Volumes can be imported using the `volume id`, e.g.
 * 
 * ```sh
 *  $ pulumi import digitalocean:index/volume:Volume volume 506f78a4-e098-11e5-ad9f-000f53306ae1
 * ```
 * 
 */
@ResourceType(type="digitalocean:index/volume:Volume")
public class Volume extends com.pulumi.resources.CustomResource {
    /**
     * A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A free-form text field up to a limit of 1024 bytes to describe a block storage volume.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * A list of associated droplet ids.
     * 
     */
    @Export(name="dropletIds", refs={List.class,Integer.class}, tree="[0,1]")
    private Output<List<Integer>> dropletIds;

    /**
     * @return A list of associated droplet ids.
     * 
     */
    public Output<List<Integer>> dropletIds() {
        return this.dropletIds;
    }
    /**
     * Filesystem label for the block storage volume.
     * 
     */
    @Export(name="filesystemLabel", refs={String.class}, tree="[0]")
    private Output<String> filesystemLabel;

    /**
     * @return Filesystem label for the block storage volume.
     * 
     */
    public Output<String> filesystemLabel() {
        return this.filesystemLabel;
    }
    /**
     * Filesystem type (`xfs` or `ext4`) for the block storage volume.
     * 
     * @deprecated
     * This fields functionality has been replaced by `initial_filesystem_type`. The property will still remain as a computed attribute representing the current volumes filesystem type.
     * 
     */
    @Deprecated /* This fields functionality has been replaced by `initial_filesystem_type`. The property will still remain as a computed attribute representing the current volumes filesystem type. */
    @Export(name="filesystemType", refs={String.class}, tree="[0]")
    private Output<String> filesystemType;

    /**
     * @return Filesystem type (`xfs` or `ext4`) for the block storage volume.
     * 
     */
    public Output<String> filesystemType() {
        return this.filesystemType;
    }
    /**
     * Initial filesystem label for the block storage volume.
     * 
     */
    @Export(name="initialFilesystemLabel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> initialFilesystemLabel;

    /**
     * @return Initial filesystem label for the block storage volume.
     * 
     */
    public Output<Optional<String>> initialFilesystemLabel() {
        return Codegen.optional(this.initialFilesystemLabel);
    }
    /**
     * Initial filesystem type (`xfs` or `ext4`) for the block storage volume.
     * 
     */
    @Export(name="initialFilesystemType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> initialFilesystemType;

    /**
     * @return Initial filesystem type (`xfs` or `ext4`) for the block storage volume.
     * 
     */
    public Output<Optional<String>> initialFilesystemType() {
        return Codegen.optional(this.initialFilesystemType);
    }
    /**
     * A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and &#34;-&#34;, up to a limit of 64 characters. The name must begin with a letter.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A name for the block storage volume. Must be lowercase and be composed only of numbers, letters and &#34;-&#34;, up to a limit of 64 characters. The name must begin with a letter.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The region that the block storage volume will be created in.
     * 
     */
    @Export(name="region", refs={String.class}, tree="[0]")
    private Output<String> region;

    /**
     * @return The region that the block storage volume will be created in.
     * 
     */
    public Output<String> region() {
        return this.region;
    }
    /**
     * The size of the block storage volume in GiB. If updated, can only be expanded.
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return The size of the block storage volume in GiB. If updated, can only be expanded.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * The ID of an existing volume snapshot from which the new volume will be created. If supplied, the region and size will be limitied on creation to that of the referenced snapshot
     * 
     */
    @Export(name="snapshotId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> snapshotId;

    /**
     * @return The ID of an existing volume snapshot from which the new volume will be created. If supplied, the region and size will be limitied on creation to that of the referenced snapshot
     * 
     */
    public Output<Optional<String>> snapshotId() {
        return Codegen.optional(this.snapshotId);
    }
    /**
     * A list of the tags to be applied to this Volume.
     * 
     */
    @Export(name="tags", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> tags;

    /**
     * @return A list of the tags to be applied to this Volume.
     * 
     */
    public Output<Optional<List<String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * The uniform resource name for the volume.
     * 
     */
    @Export(name="volumeUrn", refs={String.class}, tree="[0]")
    private Output<String> volumeUrn;

    /**
     * @return The uniform resource name for the volume.
     * 
     */
    public Output<String> volumeUrn() {
        return this.volumeUrn;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Volume(String name) {
        this(name, VolumeArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Volume(String name, VolumeArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Volume(String name, VolumeArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/volume:Volume", name, args == null ? VolumeArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Volume(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("digitalocean:index/volume:Volume", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Volume get(String name, Output<String> id, @Nullable VolumeState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Volume(name, id, state, options);
    }
}
