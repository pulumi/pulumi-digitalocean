// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.digitalocean.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseKafkaSchemaRegistryState extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseKafkaSchemaRegistryState Empty = new DatabaseKafkaSchemaRegistryState();

    /**
     * The ID of the target Kafka cluster.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The ID of the target Kafka cluster.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * The schema definition as a string.
     * 
     */
    @Import(name="schema")
    private @Nullable Output<String> schema;

    /**
     * @return The schema definition as a string.
     * 
     */
    public Optional<Output<String>> schema() {
        return Optional.ofNullable(this.schema);
    }

    /**
     * The schema type. Available values are: avro, json, or protobuf.
     * 
     */
    @Import(name="schemaType")
    private @Nullable Output<String> schemaType;

    /**
     * @return The schema type. Available values are: avro, json, or protobuf.
     * 
     */
    public Optional<Output<String>> schemaType() {
        return Optional.ofNullable(this.schemaType);
    }

    /**
     * The name of the schema subject.
     * 
     */
    @Import(name="subjectName")
    private @Nullable Output<String> subjectName;

    /**
     * @return The name of the schema subject.
     * 
     */
    public Optional<Output<String>> subjectName() {
        return Optional.ofNullable(this.subjectName);
    }

    private DatabaseKafkaSchemaRegistryState() {}

    private DatabaseKafkaSchemaRegistryState(DatabaseKafkaSchemaRegistryState $) {
        this.clusterId = $.clusterId;
        this.schema = $.schema;
        this.schemaType = $.schemaType;
        this.subjectName = $.subjectName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseKafkaSchemaRegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseKafkaSchemaRegistryState $;

        public Builder() {
            $ = new DatabaseKafkaSchemaRegistryState();
        }

        public Builder(DatabaseKafkaSchemaRegistryState defaults) {
            $ = new DatabaseKafkaSchemaRegistryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId The ID of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The ID of the target Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param schema The schema definition as a string.
         * 
         * @return builder
         * 
         */
        public Builder schema(@Nullable Output<String> schema) {
            $.schema = schema;
            return this;
        }

        /**
         * @param schema The schema definition as a string.
         * 
         * @return builder
         * 
         */
        public Builder schema(String schema) {
            return schema(Output.of(schema));
        }

        /**
         * @param schemaType The schema type. Available values are: avro, json, or protobuf.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(@Nullable Output<String> schemaType) {
            $.schemaType = schemaType;
            return this;
        }

        /**
         * @param schemaType The schema type. Available values are: avro, json, or protobuf.
         * 
         * @return builder
         * 
         */
        public Builder schemaType(String schemaType) {
            return schemaType(Output.of(schemaType));
        }

        /**
         * @param subjectName The name of the schema subject.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(@Nullable Output<String> subjectName) {
            $.subjectName = subjectName;
            return this;
        }

        /**
         * @param subjectName The name of the schema subject.
         * 
         * @return builder
         * 
         */
        public Builder subjectName(String subjectName) {
            return subjectName(Output.of(subjectName));
        }

        public DatabaseKafkaSchemaRegistryState build() {
            return $;
        }
    }

}
