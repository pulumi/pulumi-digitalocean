// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource for assigning an existing DigitalOcean Floating IP to a Droplet. This
// makes it easy to provision floating IP addresses that are not tied to the lifecycle of your
// Droplet.
type FloatingIpAssignment struct {
	s *pulumi.ResourceState
}

// NewFloatingIpAssignment registers a new resource with the given unique name, arguments, and options.
func NewFloatingIpAssignment(ctx *pulumi.Context,
	name string, args *FloatingIpAssignmentArgs, opts ...pulumi.ResourceOpt) (*FloatingIpAssignment, error) {
	if args == nil || args.DropletId == nil {
		return nil, errors.New("missing required argument 'DropletId'")
	}
	if args == nil || args.IpAddress == nil {
		return nil, errors.New("missing required argument 'IpAddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dropletId"] = nil
		inputs["ipAddress"] = nil
	} else {
		inputs["dropletId"] = args.DropletId
		inputs["ipAddress"] = args.IpAddress
	}
	s, err := ctx.RegisterResource("digitalocean:index/floatingIpAssignment:FloatingIpAssignment", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIpAssignment{s: s}, nil
}

// GetFloatingIpAssignment gets an existing FloatingIpAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIpAssignment(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FloatingIpAssignmentState, opts ...pulumi.ResourceOpt) (*FloatingIpAssignment, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dropletId"] = state.DropletId
		inputs["ipAddress"] = state.IpAddress
	}
	s, err := ctx.ReadResource("digitalocean:index/floatingIpAssignment:FloatingIpAssignment", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIpAssignment{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FloatingIpAssignment) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FloatingIpAssignment) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of Droplet that the Floating IP will be assigned to.
func (r *FloatingIpAssignment) DropletId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["dropletId"])
}

// The Floating IP to assign to the Droplet.
func (r *FloatingIpAssignment) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

// Input properties used for looking up and filtering FloatingIpAssignment resources.
type FloatingIpAssignmentState struct {
	// The ID of Droplet that the Floating IP will be assigned to.
	DropletId interface{}
	// The Floating IP to assign to the Droplet.
	IpAddress interface{}
}

// The set of arguments for constructing a FloatingIpAssignment resource.
type FloatingIpAssignmentArgs struct {
	// The ID of Droplet that the Floating IP will be assigned to.
	DropletId interface{}
	// The Floating IP to assign to the Droplet.
	IpAddress interface{}
}
