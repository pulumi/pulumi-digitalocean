// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a virtual resource that can be used to change advanced configuration
// options for a DigitalOcean managed MongoDB database cluster.
//
// > **Note** MongoDB configurations are only removed from state when destroyed. The remote configuration is not unset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabaseCluster, err := digitalocean.NewDatabaseCluster(ctx, "example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-mongodb-cluster"),
//				Engine:    pulumi.String("mongodb"),
//				Version:   pulumi.String("7"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC3),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabaseMongodbConfig(ctx, "example", &digitalocean.DatabaseMongodbConfigArgs{
//				ClusterId:                       exampleDatabaseCluster.ID(),
//				DefaultReadConcern:              pulumi.String("majority"),
//				DefaultWriteConcern:             pulumi.String("majority"),
//				TransactionLifetimeLimitSeconds: pulumi.Int(100),
//				SlowOpThresholdMs:               pulumi.Int(100),
//				Verbosity:                       pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A MongoDB database cluster's configuration can be imported using the `id` the parent cluster, e.g.
//
// ```sh
// $ pulumi import digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig example 4b62829a-9c42-465b-aaa3-84051048e712
// ```
type DatabaseMongodbConfig struct {
	pulumi.CustomResourceState

	// The ID of the target MongoDB cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
	DefaultReadConcern pulumi.StringOutput `pulumi:"defaultReadConcern"`
	// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
	DefaultWriteConcern pulumi.StringOutput `pulumi:"defaultWriteConcern"`
	// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThresholdMs pulumi.IntOutput `pulumi:"slowOpThresholdMs"`
	// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
	TransactionLifetimeLimitSeconds pulumi.IntOutput `pulumi:"transactionLifetimeLimitSeconds"`
	// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
	Verbosity pulumi.IntOutput `pulumi:"verbosity"`
}

// NewDatabaseMongodbConfig registers a new resource with the given unique name, arguments, and options.
func NewDatabaseMongodbConfig(ctx *pulumi.Context,
	name string, args *DatabaseMongodbConfigArgs, opts ...pulumi.ResourceOption) (*DatabaseMongodbConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseMongodbConfig
	err := ctx.RegisterResource("digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseMongodbConfig gets an existing DatabaseMongodbConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseMongodbConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseMongodbConfigState, opts ...pulumi.ResourceOption) (*DatabaseMongodbConfig, error) {
	var resource DatabaseMongodbConfig
	err := ctx.ReadResource("digitalocean:index/databaseMongodbConfig:DatabaseMongodbConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseMongodbConfig resources.
type databaseMongodbConfigState struct {
	// The ID of the target MongoDB cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
	DefaultReadConcern *string `pulumi:"defaultReadConcern"`
	// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
	DefaultWriteConcern *string `pulumi:"defaultWriteConcern"`
	// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThresholdMs *int `pulumi:"slowOpThresholdMs"`
	// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
	TransactionLifetimeLimitSeconds *int `pulumi:"transactionLifetimeLimitSeconds"`
	// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
	Verbosity *int `pulumi:"verbosity"`
}

type DatabaseMongodbConfigState struct {
	// The ID of the target MongoDB cluster.
	ClusterId pulumi.StringPtrInput
	// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
	DefaultReadConcern pulumi.StringPtrInput
	// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
	DefaultWriteConcern pulumi.StringPtrInput
	// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThresholdMs pulumi.IntPtrInput
	// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
	TransactionLifetimeLimitSeconds pulumi.IntPtrInput
	// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
	Verbosity pulumi.IntPtrInput
}

func (DatabaseMongodbConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMongodbConfigState)(nil)).Elem()
}

type databaseMongodbConfigArgs struct {
	// The ID of the target MongoDB cluster.
	ClusterId string `pulumi:"clusterId"`
	// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
	DefaultReadConcern *string `pulumi:"defaultReadConcern"`
	// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
	DefaultWriteConcern *string `pulumi:"defaultWriteConcern"`
	// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThresholdMs *int `pulumi:"slowOpThresholdMs"`
	// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
	TransactionLifetimeLimitSeconds *int `pulumi:"transactionLifetimeLimitSeconds"`
	// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
	Verbosity *int `pulumi:"verbosity"`
}

// The set of arguments for constructing a DatabaseMongodbConfig resource.
type DatabaseMongodbConfigArgs struct {
	// The ID of the target MongoDB cluster.
	ClusterId pulumi.StringInput
	// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
	DefaultReadConcern pulumi.StringPtrInput
	// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
	DefaultWriteConcern pulumi.StringPtrInput
	// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
	SlowOpThresholdMs pulumi.IntPtrInput
	// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
	TransactionLifetimeLimitSeconds pulumi.IntPtrInput
	// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
	Verbosity pulumi.IntPtrInput
}

func (DatabaseMongodbConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMongodbConfigArgs)(nil)).Elem()
}

type DatabaseMongodbConfigInput interface {
	pulumi.Input

	ToDatabaseMongodbConfigOutput() DatabaseMongodbConfigOutput
	ToDatabaseMongodbConfigOutputWithContext(ctx context.Context) DatabaseMongodbConfigOutput
}

func (*DatabaseMongodbConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMongodbConfig)(nil)).Elem()
}

func (i *DatabaseMongodbConfig) ToDatabaseMongodbConfigOutput() DatabaseMongodbConfigOutput {
	return i.ToDatabaseMongodbConfigOutputWithContext(context.Background())
}

func (i *DatabaseMongodbConfig) ToDatabaseMongodbConfigOutputWithContext(ctx context.Context) DatabaseMongodbConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbConfigOutput)
}

// DatabaseMongodbConfigArrayInput is an input type that accepts DatabaseMongodbConfigArray and DatabaseMongodbConfigArrayOutput values.
// You can construct a concrete instance of `DatabaseMongodbConfigArrayInput` via:
//
//	DatabaseMongodbConfigArray{ DatabaseMongodbConfigArgs{...} }
type DatabaseMongodbConfigArrayInput interface {
	pulumi.Input

	ToDatabaseMongodbConfigArrayOutput() DatabaseMongodbConfigArrayOutput
	ToDatabaseMongodbConfigArrayOutputWithContext(context.Context) DatabaseMongodbConfigArrayOutput
}

type DatabaseMongodbConfigArray []DatabaseMongodbConfigInput

func (DatabaseMongodbConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMongodbConfig)(nil)).Elem()
}

func (i DatabaseMongodbConfigArray) ToDatabaseMongodbConfigArrayOutput() DatabaseMongodbConfigArrayOutput {
	return i.ToDatabaseMongodbConfigArrayOutputWithContext(context.Background())
}

func (i DatabaseMongodbConfigArray) ToDatabaseMongodbConfigArrayOutputWithContext(ctx context.Context) DatabaseMongodbConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbConfigArrayOutput)
}

// DatabaseMongodbConfigMapInput is an input type that accepts DatabaseMongodbConfigMap and DatabaseMongodbConfigMapOutput values.
// You can construct a concrete instance of `DatabaseMongodbConfigMapInput` via:
//
//	DatabaseMongodbConfigMap{ "key": DatabaseMongodbConfigArgs{...} }
type DatabaseMongodbConfigMapInput interface {
	pulumi.Input

	ToDatabaseMongodbConfigMapOutput() DatabaseMongodbConfigMapOutput
	ToDatabaseMongodbConfigMapOutputWithContext(context.Context) DatabaseMongodbConfigMapOutput
}

type DatabaseMongodbConfigMap map[string]DatabaseMongodbConfigInput

func (DatabaseMongodbConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMongodbConfig)(nil)).Elem()
}

func (i DatabaseMongodbConfigMap) ToDatabaseMongodbConfigMapOutput() DatabaseMongodbConfigMapOutput {
	return i.ToDatabaseMongodbConfigMapOutputWithContext(context.Background())
}

func (i DatabaseMongodbConfigMap) ToDatabaseMongodbConfigMapOutputWithContext(ctx context.Context) DatabaseMongodbConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMongodbConfigMapOutput)
}

type DatabaseMongodbConfigOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMongodbConfig)(nil)).Elem()
}

func (o DatabaseMongodbConfigOutput) ToDatabaseMongodbConfigOutput() DatabaseMongodbConfigOutput {
	return o
}

func (o DatabaseMongodbConfigOutput) ToDatabaseMongodbConfigOutputWithContext(ctx context.Context) DatabaseMongodbConfigOutput {
	return o
}

// The ID of the target MongoDB cluster.
func (o DatabaseMongodbConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Specifies the default consistency behavior of reads from the database. Data that is returned from the query with may or may not have been acknowledged by all nodes in the replicaset depending on this value. Learn more [here](https://www.mongodb.com/docs/manual/reference/read-concern/).
func (o DatabaseMongodbConfigOutput) DefaultReadConcern() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.StringOutput { return v.DefaultReadConcern }).(pulumi.StringOutput)
}

// Describes the level of acknowledgment requested from MongoDB for write operations clusters. This field can set to either `majority` or a number`0...n` which will describe the number of nodes that must acknowledge the write operation before it is fully accepted. Setting to `0` will request no acknowledgement of the write operation. Learn more [here](https://www.mongodb.com/docs/manual/reference/write-concern/).
func (o DatabaseMongodbConfigOutput) DefaultWriteConcern() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.StringOutput { return v.DefaultWriteConcern }).(pulumi.StringOutput)
}

// Operations that run for longer than this threshold are considered slow which are then recorded to the diagnostic logs. Higher log levels (verbosity) will record all operations regardless of this threshold on the primary node. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs).
func (o DatabaseMongodbConfigOutput) SlowOpThresholdMs() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.IntOutput { return v.SlowOpThresholdMs }).(pulumi.IntOutput)
}

// Specifies the lifetime of multi-document transactions. Transactions that exceed this limit are considered expired and will be aborted by a periodic cleanup process. The cleanup process runs every `transactionLifetimeLimitSeconds/2 seconds` or at least once every 60 seconds. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.transactionLifetimeLimitSeconds).
func (o DatabaseMongodbConfigOutput) TransactionLifetimeLimitSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.IntOutput { return v.TransactionLifetimeLimitSeconds }).(pulumi.IntOutput)
}

// The log message verbosity level. The verbosity level determines the amount of Informational and Debug messages MongoDB outputs. 0 includes informational messages while 1...5 increases the level to include debug messages. <em>Changing this parameter will lead to a restart of the MongoDB service.</em> Learn more [here](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-systemLog.verbosity).
func (o DatabaseMongodbConfigOutput) Verbosity() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMongodbConfig) pulumi.IntOutput { return v.Verbosity }).(pulumi.IntOutput)
}

type DatabaseMongodbConfigArrayOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMongodbConfig)(nil)).Elem()
}

func (o DatabaseMongodbConfigArrayOutput) ToDatabaseMongodbConfigArrayOutput() DatabaseMongodbConfigArrayOutput {
	return o
}

func (o DatabaseMongodbConfigArrayOutput) ToDatabaseMongodbConfigArrayOutputWithContext(ctx context.Context) DatabaseMongodbConfigArrayOutput {
	return o
}

func (o DatabaseMongodbConfigArrayOutput) Index(i pulumi.IntInput) DatabaseMongodbConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseMongodbConfig {
		return vs[0].([]*DatabaseMongodbConfig)[vs[1].(int)]
	}).(DatabaseMongodbConfigOutput)
}

type DatabaseMongodbConfigMapOutput struct{ *pulumi.OutputState }

func (DatabaseMongodbConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMongodbConfig)(nil)).Elem()
}

func (o DatabaseMongodbConfigMapOutput) ToDatabaseMongodbConfigMapOutput() DatabaseMongodbConfigMapOutput {
	return o
}

func (o DatabaseMongodbConfigMapOutput) ToDatabaseMongodbConfigMapOutputWithContext(ctx context.Context) DatabaseMongodbConfigMapOutput {
	return o
}

func (o DatabaseMongodbConfigMapOutput) MapIndex(k pulumi.StringInput) DatabaseMongodbConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseMongodbConfig {
		return vs[0].(map[string]*DatabaseMongodbConfig)[vs[1].(string)]
	}).(DatabaseMongodbConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbConfigInput)(nil)).Elem(), &DatabaseMongodbConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbConfigArrayInput)(nil)).Elem(), DatabaseMongodbConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMongodbConfigMapInput)(nil)).Elem(), DatabaseMongodbConfigMap{})
	pulumi.RegisterOutputType(DatabaseMongodbConfigOutput{})
	pulumi.RegisterOutputType(DatabaseMongodbConfigArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMongodbConfigMapOutput{})
}
