// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a DigitalOcean App resource.
//
// ## Example Usage
//
// To create an app, provide a [DigitalOcean app spec](https://docs.digitalocean.com/products/app-platform/reference/app-spec/) specifying the app's components.
//
// ## Import
//
// An app can be imported using its `id`, e.g.
//
// ```sh
//
//	$ pulumi import digitalocean:index/app:App myapp fb06ad00-351f-45c8-b5eb-13523c438661
//
// ```
type App struct {
	pulumi.CustomResourceState

	// The ID the app's currently active deployment.
	ActiveDeploymentId pulumi.StringOutput `pulumi:"activeDeploymentId"`
	// The uniform resource identifier for the app.
	AppUrn pulumi.StringOutput `pulumi:"appUrn"`
	// The date and time of when the app was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The default URL to access the app.
	DefaultIngress pulumi.StringOutput `pulumi:"defaultIngress"`
	// The live URL of the app.
	LiveUrl pulumi.StringOutput `pulumi:"liveUrl"`
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrOutput `pulumi:"spec"`
	// The date and time of when the app was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		args = &AppArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource App
	err := ctx.RegisterResource("digitalocean:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("digitalocean:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// The ID the app's currently active deployment.
	ActiveDeploymentId *string `pulumi:"activeDeploymentId"`
	// The uniform resource identifier for the app.
	AppUrn *string `pulumi:"appUrn"`
	// The date and time of when the app was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The default URL to access the app.
	DefaultIngress *string `pulumi:"defaultIngress"`
	// The live URL of the app.
	LiveUrl *string `pulumi:"liveUrl"`
	// A DigitalOcean App spec describing the app.
	Spec *AppSpec `pulumi:"spec"`
	// The date and time of when the app was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AppState struct {
	// The ID the app's currently active deployment.
	ActiveDeploymentId pulumi.StringPtrInput
	// The uniform resource identifier for the app.
	AppUrn pulumi.StringPtrInput
	// The date and time of when the app was created.
	CreatedAt pulumi.StringPtrInput
	// The default URL to access the app.
	DefaultIngress pulumi.StringPtrInput
	// The live URL of the app.
	LiveUrl pulumi.StringPtrInput
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrInput
	// The date and time of when the app was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// A DigitalOcean App spec describing the app.
	Spec *AppSpec `pulumi:"spec"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

func (i *App) ToOutput(ctx context.Context) pulumix.Output[*App] {
	return pulumix.Output[*App]{
		OutputState: i.ToAppOutputWithContext(ctx).OutputState,
	}
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//	AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

func (i AppArray) ToOutput(ctx context.Context) pulumix.Output[[]*App] {
	return pulumix.Output[[]*App]{
		OutputState: i.ToAppArrayOutputWithContext(ctx).OutputState,
	}
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//	AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

func (i AppMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*App] {
	return pulumix.Output[map[string]*App]{
		OutputState: i.ToAppMapOutputWithContext(ctx).OutputState,
	}
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

func (o AppOutput) ToOutput(ctx context.Context) pulumix.Output[*App] {
	return pulumix.Output[*App]{
		OutputState: o.OutputState,
	}
}

// The ID the app's currently active deployment.
func (o AppOutput) ActiveDeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.ActiveDeploymentId }).(pulumi.StringOutput)
}

// The uniform resource identifier for the app.
func (o AppOutput) AppUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.AppUrn }).(pulumi.StringOutput)
}

// The date and time of when the app was created.
func (o AppOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The default URL to access the app.
func (o AppOutput) DefaultIngress() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.DefaultIngress }).(pulumi.StringOutput)
}

// The live URL of the app.
func (o AppOutput) LiveUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.LiveUrl }).(pulumi.StringOutput)
}

// A DigitalOcean App spec describing the app.
func (o AppOutput) Spec() AppSpecPtrOutput {
	return o.ApplyT(func(v *App) AppSpecPtrOutput { return v.Spec }).(AppSpecPtrOutput)
}

// The date and time of when the app was last updated.
func (o AppOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *App) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*App] {
	return pulumix.Output[[]*App]{
		OutputState: o.OutputState,
	}
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*App] {
	return pulumix.Output[map[string]*App]{
		OutputState: o.OutputState,
	}
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
