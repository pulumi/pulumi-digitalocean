// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DigitalOcean App resource.
//
// ## Example Usage
//
// To create an app, provide a [DigitalOcean app spec](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/) specifying the app's components.
// ### Basic Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.NewApp(ctx, "golang-sample", &digitalocean.AppArgs{
// 			Spec: &AppSpecArgs{
// 				Name:   pulumi.String("golang-sample"),
// 				Region: pulumi.String("ams"),
// 				Services: AppSpecServiceArray{
// 					&AppSpecServiceArgs{
// 						EnvironmentSlug: pulumi.String("go"),
// 						Git: &AppSpecServiceGitArgs{
// 							Branch:       pulumi.String("main"),
// 							RepoCloneUrl: pulumi.String("https://github.com/digitalocean/sample-golang.git"),
// 						},
// 						InstanceCount:    pulumi.Int(1),
// 						InstanceSizeSlug: pulumi.String("professional-xs"),
// 						Name:             pulumi.String("go-service"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Static Site Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.NewApp(ctx, "static-ste-example", &digitalocean.AppArgs{
// 			Spec: &AppSpecArgs{
// 				Name:   pulumi.String("static-ste-example"),
// 				Region: pulumi.String("ams"),
// 				StaticSites: AppSpecStaticSiteArray{
// 					&AppSpecStaticSiteArgs{
// 						BuildCommand: pulumi.String("bundle exec jekyll build -d ./public"),
// 						Git: &AppSpecStaticSiteGitArgs{
// 							Branch:       pulumi.String("main"),
// 							RepoCloneUrl: pulumi.String("https://github.com/digitalocean/sample-jekyll.git"),
// 						},
// 						Name:      pulumi.String("sample-jekyll"),
// 						OutputDir: pulumi.String("/public"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Multiple Components Example
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.NewApp(ctx, "mono-repo-example", &digitalocean.AppArgs{
// 			Spec: &AppSpecArgs{
// 				Alerts: AppSpecAlertArray{
// 					&AppSpecAlertArgs{
// 						Rule: pulumi.String("DEPLOYMENT_FAILED"),
// 					},
// 				},
// 				Databases: AppSpecDatabaseArray{
// 					&AppSpecDatabaseArgs{
// 						Engine:     pulumi.String("PG"),
// 						Name:       pulumi.String("starter-db"),
// 						Production: pulumi.Bool(false),
// 					},
// 				},
// 				Domains: pulumi.StringArray{
// 					pulumi.String{
// 						Name: "foo.example.com",
// 					},
// 				},
// 				Name:   pulumi.String("mono-repo-example"),
// 				Region: pulumi.String("ams"),
// 				Services: AppSpecServiceArray{
// 					&AppSpecServiceArgs{
// 						Alert: []map[string]interface{}{
// 							map[string]interface{}{
// 								"operator": "GREATER_THAN",
// 								"rule":     "CPU_UTILIZATION",
// 								"value":    75,
// 								"window":   "TEN_MINUTES",
// 							},
// 						},
// 						EnvironmentSlug: pulumi.String("go"),
// 						Github: &AppSpecServiceGithubArgs{
// 							Branch:       pulumi.String("main"),
// 							DeployOnPush: pulumi.Bool(true),
// 							Repo:         pulumi.String("username/repo"),
// 						},
// 						HttpPort:         pulumi.Int(3000),
// 						InstanceCount:    pulumi.Int(2),
// 						InstanceSizeSlug: pulumi.String("professional-xs"),
// 						LogDestination: []map[string]interface{}{
// 							map[string]interface{}{
// 								"name": "MyLogs",
// 								"papertrail": map[string]interface{}{
// 									"endpoint": "syslog+tls://example.com:12345",
// 								},
// 							},
// 						},
// 						Name: pulumi.String("api"),
// 						Routes: AppSpecServiceRouteArray{
// 							&AppSpecServiceRouteArgs{
// 								Path: pulumi.String("/api"),
// 							},
// 						},
// 						RunCommand: pulumi.String("bin/api"),
// 						SourceDir:  pulumi.String("api/"),
// 					},
// 				},
// 				StaticSites: AppSpecStaticSiteArray{
// 					&AppSpecStaticSiteArgs{
// 						BuildCommand: pulumi.String("npm run build"),
// 						Github: &AppSpecStaticSiteGithubArgs{
// 							Branch:       pulumi.String("main"),
// 							DeployOnPush: pulumi.Bool(true),
// 							Repo:         pulumi.String("username/repo"),
// 						},
// 						Name: pulumi.String("web"),
// 						Routes: AppSpecStaticSiteRouteArray{
// 							&AppSpecStaticSiteRouteArgs{
// 								Path: pulumi.String("/"),
// 							},
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An app can be imported using its `id`, e.g.
//
// ```sh
//  $ pulumi import digitalocean:index/app:App myapp fb06ad00-351f-45c8-b5eb-13523c438661
// ```
type App struct {
	pulumi.CustomResourceState

	// The ID the app's currently active deployment.
	ActiveDeploymentId pulumi.StringOutput `pulumi:"activeDeploymentId"`
	// The date and time of when the app was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The default URL to access the app.
	DefaultIngress pulumi.StringOutput `pulumi:"defaultIngress"`
	// The live URL of the app.
	LiveUrl pulumi.StringOutput `pulumi:"liveUrl"`
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrOutput `pulumi:"spec"`
	// The date and time of when the app was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApp registers a new resource with the given unique name, arguments, and options.
func NewApp(ctx *pulumi.Context,
	name string, args *AppArgs, opts ...pulumi.ResourceOption) (*App, error) {
	if args == nil {
		args = &AppArgs{}
	}

	var resource App
	err := ctx.RegisterResource("digitalocean:index/app:App", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApp gets an existing App resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppState, opts ...pulumi.ResourceOption) (*App, error) {
	var resource App
	err := ctx.ReadResource("digitalocean:index/app:App", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering App resources.
type appState struct {
	// The ID the app's currently active deployment.
	ActiveDeploymentId *string `pulumi:"activeDeploymentId"`
	// The date and time of when the app was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The default URL to access the app.
	DefaultIngress *string `pulumi:"defaultIngress"`
	// The live URL of the app.
	LiveUrl *string `pulumi:"liveUrl"`
	// A DigitalOcean App spec describing the app.
	Spec *AppSpec `pulumi:"spec"`
	// The date and time of when the app was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AppState struct {
	// The ID the app's currently active deployment.
	ActiveDeploymentId pulumi.StringPtrInput
	// The date and time of when the app was created.
	CreatedAt pulumi.StringPtrInput
	// The default URL to access the app.
	DefaultIngress pulumi.StringPtrInput
	// The live URL of the app.
	LiveUrl pulumi.StringPtrInput
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrInput
	// The date and time of when the app was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (AppState) ElementType() reflect.Type {
	return reflect.TypeOf((*appState)(nil)).Elem()
}

type appArgs struct {
	// A DigitalOcean App spec describing the app.
	Spec *AppSpec `pulumi:"spec"`
}

// The set of arguments for constructing a App resource.
type AppArgs struct {
	// A DigitalOcean App spec describing the app.
	Spec AppSpecPtrInput
}

func (AppArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appArgs)(nil)).Elem()
}

type AppInput interface {
	pulumi.Input

	ToAppOutput() AppOutput
	ToAppOutputWithContext(ctx context.Context) AppOutput
}

func (*App) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (i *App) ToAppOutput() AppOutput {
	return i.ToAppOutputWithContext(context.Background())
}

func (i *App) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppOutput)
}

// AppArrayInput is an input type that accepts AppArray and AppArrayOutput values.
// You can construct a concrete instance of `AppArrayInput` via:
//
//          AppArray{ AppArgs{...} }
type AppArrayInput interface {
	pulumi.Input

	ToAppArrayOutput() AppArrayOutput
	ToAppArrayOutputWithContext(context.Context) AppArrayOutput
}

type AppArray []AppInput

func (AppArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (i AppArray) ToAppArrayOutput() AppArrayOutput {
	return i.ToAppArrayOutputWithContext(context.Background())
}

func (i AppArray) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppArrayOutput)
}

// AppMapInput is an input type that accepts AppMap and AppMapOutput values.
// You can construct a concrete instance of `AppMapInput` via:
//
//          AppMap{ "key": AppArgs{...} }
type AppMapInput interface {
	pulumi.Input

	ToAppMapOutput() AppMapOutput
	ToAppMapOutputWithContext(context.Context) AppMapOutput
}

type AppMap map[string]AppInput

func (AppMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (i AppMap) ToAppMapOutput() AppMapOutput {
	return i.ToAppMapOutputWithContext(context.Background())
}

func (i AppMap) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppMapOutput)
}

type AppOutput struct{ *pulumi.OutputState }

func (AppOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**App)(nil)).Elem()
}

func (o AppOutput) ToAppOutput() AppOutput {
	return o
}

func (o AppOutput) ToAppOutputWithContext(ctx context.Context) AppOutput {
	return o
}

type AppArrayOutput struct{ *pulumi.OutputState }

func (AppArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*App)(nil)).Elem()
}

func (o AppArrayOutput) ToAppArrayOutput() AppArrayOutput {
	return o
}

func (o AppArrayOutput) ToAppArrayOutputWithContext(ctx context.Context) AppArrayOutput {
	return o
}

func (o AppArrayOutput) Index(i pulumi.IntInput) AppOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *App {
		return vs[0].([]*App)[vs[1].(int)]
	}).(AppOutput)
}

type AppMapOutput struct{ *pulumi.OutputState }

func (AppMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*App)(nil)).Elem()
}

func (o AppMapOutput) ToAppMapOutput() AppMapOutput {
	return o
}

func (o AppMapOutput) ToAppMapOutputWithContext(ctx context.Context) AppMapOutput {
	return o
}

func (o AppMapOutput) MapIndex(k pulumi.StringInput) AppOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *App {
		return vs[0].(map[string]*App)[vs[1].(string)]
	}).(AppOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppInput)(nil)).Elem(), &App{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppArrayInput)(nil)).Elem(), AppArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppMapInput)(nil)).Elem(), AppMap{})
	pulumi.RegisterOutputType(AppOutput{})
	pulumi.RegisterOutputType(AppArrayOutput{})
	pulumi.RegisterOutputType(AppMapOutput{})
}
