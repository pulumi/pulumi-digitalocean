// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a virtual resource that can be used to change advanced configuration
// options for a DigitalOcean managed PostgreSQL database cluster.
//
// > **Note** PostgreSQL configurations are only removed from state when destroyed. The remote configuration is not unset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabaseCluster, err := digitalocean.NewDatabaseCluster(ctx, "exampleDatabaseCluster", &digitalocean.DatabaseClusterArgs{
//				Engine:    pulumi.String("pg"),
//				Version:   pulumi.String("15"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabasePostgresqlConfig(ctx, "exampleDatabasePostgresqlConfig", &digitalocean.DatabasePostgresqlConfigArgs{
//				ClusterId: exampleDatabaseCluster.ID(),
//				Timezone:  pulumi.String("UTC"),
//				WorkMem:   pulumi.Int(16),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A PostgreSQL database cluster's configuration can be imported using the `id` the parent cluster, e.g.
//
// bash
//
// ```sh
// $ pulumi import digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig example 52556c07-788e-4d41-b8a7-c796432197d1
// ```
type DatabasePostgresqlConfig struct {
	pulumi.CustomResourceState

	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor pulumi.Float64Output `pulumi:"autovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold pulumi.IntOutput `pulumi:"autovacuumAnalyzeThreshold"`
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge pulumi.IntOutput `pulumi:"autovacuumFreezeMaxAge"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers pulumi.IntOutput `pulumi:"autovacuumMaxWorkers"`
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime pulumi.IntOutput `pulumi:"autovacuumNaptime"`
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay pulumi.IntOutput `pulumi:"autovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	AutovacuumVacuumCostLimit pulumi.IntOutput `pulumi:"autovacuumVacuumCostLimit"`
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor pulumi.Float64Output `pulumi:"autovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold pulumi.IntOutput `pulumi:"autovacuumVacuumThreshold"`
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntOutput `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute pulumi.IntOutput `pulumi:"backupMinute"`
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay pulumi.IntOutput `pulumi:"bgwriterDelay"`
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter pulumi.IntOutput `pulumi:"bgwriterFlushAfter"`
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages pulumi.IntOutput `pulumi:"bgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier pulumi.Float64Output `pulumi:"bgwriterLruMultiplier"`
	// The ID of the target PostgreSQL cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout pulumi.IntOutput `pulumi:"deadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
	DefaultToastCompression pulumi.StringOutput `pulumi:"defaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout pulumi.IntOutput `pulumi:"idleInTransactionSessionTimeout"`
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit pulumi.BoolOutput `pulumi:"jit"`
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration pulumi.IntOutput `pulumi:"logAutovacuumMinDuration"`
	// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
	LogErrorVerbosity pulumi.StringOutput `pulumi:"logErrorVerbosity"`
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
	LogLinePrefix pulumi.StringOutput `pulumi:"logLinePrefix"`
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement pulumi.IntOutput `pulumi:"logMinDurationStatement"`
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess pulumi.IntOutput `pulumi:"maxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction pulumi.IntOutput `pulumi:"maxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers pulumi.IntOutput `pulumi:"maxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers pulumi.IntOutput `pulumi:"maxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather pulumi.IntOutput `pulumi:"maxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction pulumi.IntOutput `pulumi:"maxPredLocksPerTransaction"`
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions pulumi.IntOutput `pulumi:"maxPreparedTransactions"`
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots pulumi.IntOutput `pulumi:"maxReplicationSlots"`
	// Maximum depth of the stack in bytes.
	MaxStackDepth pulumi.IntOutput `pulumi:"maxStackDepth"`
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay pulumi.IntOutput `pulumi:"maxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay pulumi.IntOutput `pulumi:"maxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders pulumi.IntOutput `pulumi:"maxWalSenders"`
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses pulumi.IntOutput `pulumi:"maxWorkerProcesses"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval pulumi.IntOutput `pulumi:"pgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole pulumi.StringOutput `pulumi:"pgPartmanBgwRole"`
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
	PgStatStatementsTrack pulumi.StringOutput `pulumi:"pgStatStatementsTrack"`
	// PGBouncer connection pooling settings
	Pgbouncers DatabasePostgresqlConfigPgbouncerArrayOutput `pulumi:"pgbouncers"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	SharedBuffersPercentage pulumi.Float64Output `pulumi:"sharedBuffersPercentage"`
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit pulumi.IntOutput `pulumi:"tempFileLimit"`
	// TimescaleDB extension configuration values
	Timescaledbs DatabasePostgresqlConfigTimescaledbArrayOutput `pulumi:"timescaledbs"`
	// PostgreSQL service timezone
	Timezone pulumi.StringOutput `pulumi:"timezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize pulumi.IntOutput `pulumi:"trackActivityQuerySize"`
	// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
	TrackCommitTimestamp pulumi.StringOutput `pulumi:"trackCommitTimestamp"`
	// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
	TrackFunctions pulumi.StringOutput `pulumi:"trackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
	TrackIoTiming pulumi.StringOutput `pulumi:"trackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout pulumi.IntOutput `pulumi:"walSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay pulumi.IntOutput `pulumi:"walWriterDelay"`
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem pulumi.IntOutput `pulumi:"workMem"`
}

// NewDatabasePostgresqlConfig registers a new resource with the given unique name, arguments, and options.
func NewDatabasePostgresqlConfig(ctx *pulumi.Context,
	name string, args *DatabasePostgresqlConfigArgs, opts ...pulumi.ResourceOption) (*DatabasePostgresqlConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabasePostgresqlConfig
	err := ctx.RegisterResource("digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasePostgresqlConfig gets an existing DatabasePostgresqlConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasePostgresqlConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasePostgresqlConfigState, opts ...pulumi.ResourceOption) (*DatabasePostgresqlConfig, error) {
	var resource DatabasePostgresqlConfig
	err := ctx.ReadResource("digitalocean:index/databasePostgresqlConfig:DatabasePostgresqlConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasePostgresqlConfig resources.
type databasePostgresqlConfigState struct {
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor *float64 `pulumi:"autovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold *int `pulumi:"autovacuumAnalyzeThreshold"`
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge *int `pulumi:"autovacuumFreezeMaxAge"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers *int `pulumi:"autovacuumMaxWorkers"`
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime *int `pulumi:"autovacuumNaptime"`
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay *int `pulumi:"autovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	AutovacuumVacuumCostLimit *int `pulumi:"autovacuumVacuumCostLimit"`
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor *float64 `pulumi:"autovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold *int `pulumi:"autovacuumVacuumThreshold"`
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay *int `pulumi:"bgwriterDelay"`
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter *int `pulumi:"bgwriterFlushAfter"`
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages *int `pulumi:"bgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier *float64 `pulumi:"bgwriterLruMultiplier"`
	// The ID of the target PostgreSQL cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout *int `pulumi:"deadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
	DefaultToastCompression *string `pulumi:"defaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout *int `pulumi:"idleInTransactionSessionTimeout"`
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit *bool `pulumi:"jit"`
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration *int `pulumi:"logAutovacuumMinDuration"`
	// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
	LogErrorVerbosity *string `pulumi:"logErrorVerbosity"`
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
	LogLinePrefix *string `pulumi:"logLinePrefix"`
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement *int `pulumi:"logMinDurationStatement"`
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess *int `pulumi:"maxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction *int `pulumi:"maxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers *int `pulumi:"maxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers *int `pulumi:"maxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather *int `pulumi:"maxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction *int `pulumi:"maxPredLocksPerTransaction"`
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions *int `pulumi:"maxPreparedTransactions"`
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots *int `pulumi:"maxReplicationSlots"`
	// Maximum depth of the stack in bytes.
	MaxStackDepth *int `pulumi:"maxStackDepth"`
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay *int `pulumi:"maxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay *int `pulumi:"maxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders *int `pulumi:"maxWalSenders"`
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses *int `pulumi:"maxWorkerProcesses"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval *int `pulumi:"pgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole *string `pulumi:"pgPartmanBgwRole"`
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
	PgStatStatementsTrack *string `pulumi:"pgStatStatementsTrack"`
	// PGBouncer connection pooling settings
	Pgbouncers []DatabasePostgresqlConfigPgbouncer `pulumi:"pgbouncers"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	SharedBuffersPercentage *float64 `pulumi:"sharedBuffersPercentage"`
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit *int `pulumi:"tempFileLimit"`
	// TimescaleDB extension configuration values
	Timescaledbs []DatabasePostgresqlConfigTimescaledb `pulumi:"timescaledbs"`
	// PostgreSQL service timezone
	Timezone *string `pulumi:"timezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize *int `pulumi:"trackActivityQuerySize"`
	// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
	TrackCommitTimestamp *string `pulumi:"trackCommitTimestamp"`
	// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
	TrackFunctions *string `pulumi:"trackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
	TrackIoTiming *string `pulumi:"trackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout *int `pulumi:"walSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay *int `pulumi:"walWriterDelay"`
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem *int `pulumi:"workMem"`
}

type DatabasePostgresqlConfigState struct {
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold pulumi.IntPtrInput
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge pulumi.IntPtrInput
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers pulumi.IntPtrInput
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime pulumi.IntPtrInput
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay pulumi.IntPtrInput
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	AutovacuumVacuumCostLimit pulumi.IntPtrInput
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold pulumi.IntPtrInput
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntPtrInput
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute pulumi.IntPtrInput
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay pulumi.IntPtrInput
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter pulumi.IntPtrInput
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages pulumi.IntPtrInput
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier pulumi.Float64PtrInput
	// The ID of the target PostgreSQL cluster.
	ClusterId pulumi.StringPtrInput
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout pulumi.IntPtrInput
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
	DefaultToastCompression pulumi.StringPtrInput
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit pulumi.BoolPtrInput
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration pulumi.IntPtrInput
	// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
	LogErrorVerbosity pulumi.StringPtrInput
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
	LogLinePrefix pulumi.StringPtrInput
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement pulumi.IntPtrInput
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess pulumi.IntPtrInput
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather pulumi.IntPtrInput
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions pulumi.IntPtrInput
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots pulumi.IntPtrInput
	// Maximum depth of the stack in bytes.
	MaxStackDepth pulumi.IntPtrInput
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay pulumi.IntPtrInput
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay pulumi.IntPtrInput
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders pulumi.IntPtrInput
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses pulumi.IntPtrInput
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval pulumi.IntPtrInput
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole pulumi.StringPtrInput
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
	PgStatStatementsTrack pulumi.StringPtrInput
	// PGBouncer connection pooling settings
	Pgbouncers DatabasePostgresqlConfigPgbouncerArrayInput
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	SharedBuffersPercentage pulumi.Float64PtrInput
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit pulumi.IntPtrInput
	// TimescaleDB extension configuration values
	Timescaledbs DatabasePostgresqlConfigTimescaledbArrayInput
	// PostgreSQL service timezone
	Timezone pulumi.StringPtrInput
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize pulumi.IntPtrInput
	// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
	TrackCommitTimestamp pulumi.StringPtrInput
	// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
	TrackFunctions pulumi.StringPtrInput
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
	TrackIoTiming pulumi.StringPtrInput
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout pulumi.IntPtrInput
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay pulumi.IntPtrInput
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem pulumi.IntPtrInput
}

func (DatabasePostgresqlConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePostgresqlConfigState)(nil)).Elem()
}

type databasePostgresqlConfigArgs struct {
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor *float64 `pulumi:"autovacuumAnalyzeScaleFactor"`
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold *int `pulumi:"autovacuumAnalyzeThreshold"`
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge *int `pulumi:"autovacuumFreezeMaxAge"`
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers *int `pulumi:"autovacuumMaxWorkers"`
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime *int `pulumi:"autovacuumNaptime"`
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay *int `pulumi:"autovacuumVacuumCostDelay"`
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	AutovacuumVacuumCostLimit *int `pulumi:"autovacuumVacuumCostLimit"`
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor *float64 `pulumi:"autovacuumVacuumScaleFactor"`
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold *int `pulumi:"autovacuumVacuumThreshold"`
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay *int `pulumi:"bgwriterDelay"`
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter *int `pulumi:"bgwriterFlushAfter"`
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages *int `pulumi:"bgwriterLruMaxpages"`
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier *float64 `pulumi:"bgwriterLruMultiplier"`
	// The ID of the target PostgreSQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout *int `pulumi:"deadlockTimeout"`
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
	DefaultToastCompression *string `pulumi:"defaultToastCompression"`
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout *int `pulumi:"idleInTransactionSessionTimeout"`
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit *bool `pulumi:"jit"`
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration *int `pulumi:"logAutovacuumMinDuration"`
	// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
	LogErrorVerbosity *string `pulumi:"logErrorVerbosity"`
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
	LogLinePrefix *string `pulumi:"logLinePrefix"`
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement *int `pulumi:"logMinDurationStatement"`
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess *int `pulumi:"maxFilesPerProcess"`
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction *int `pulumi:"maxLocksPerTransaction"`
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers *int `pulumi:"maxLogicalReplicationWorkers"`
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers *int `pulumi:"maxParallelWorkers"`
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather *int `pulumi:"maxParallelWorkersPerGather"`
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction *int `pulumi:"maxPredLocksPerTransaction"`
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions *int `pulumi:"maxPreparedTransactions"`
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots *int `pulumi:"maxReplicationSlots"`
	// Maximum depth of the stack in bytes.
	MaxStackDepth *int `pulumi:"maxStackDepth"`
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay *int `pulumi:"maxStandbyArchiveDelay"`
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay *int `pulumi:"maxStandbyStreamingDelay"`
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders *int `pulumi:"maxWalSenders"`
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses *int `pulumi:"maxWorkerProcesses"`
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval *int `pulumi:"pgPartmanBgwInterval"`
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole *string `pulumi:"pgPartmanBgwRole"`
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
	PgStatStatementsTrack *string `pulumi:"pgStatStatementsTrack"`
	// PGBouncer connection pooling settings
	Pgbouncers []DatabasePostgresqlConfigPgbouncer `pulumi:"pgbouncers"`
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	SharedBuffersPercentage *float64 `pulumi:"sharedBuffersPercentage"`
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit *int `pulumi:"tempFileLimit"`
	// TimescaleDB extension configuration values
	Timescaledbs []DatabasePostgresqlConfigTimescaledb `pulumi:"timescaledbs"`
	// PostgreSQL service timezone
	Timezone *string `pulumi:"timezone"`
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize *int `pulumi:"trackActivityQuerySize"`
	// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
	TrackCommitTimestamp *string `pulumi:"trackCommitTimestamp"`
	// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
	TrackFunctions *string `pulumi:"trackFunctions"`
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
	TrackIoTiming *string `pulumi:"trackIoTiming"`
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout *int `pulumi:"walSenderTimeout"`
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay *int `pulumi:"walWriterDelay"`
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem *int `pulumi:"workMem"`
}

// The set of arguments for constructing a DatabasePostgresqlConfig resource.
type DatabasePostgresqlConfigArgs struct {
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
	AutovacuumAnalyzeScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
	AutovacuumAnalyzeThreshold pulumi.IntPtrInput
	// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
	AutovacuumFreezeMaxAge pulumi.IntPtrInput
	// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
	AutovacuumMaxWorkers pulumi.IntPtrInput
	// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
	AutovacuumNaptime pulumi.IntPtrInput
	// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
	AutovacuumVacuumCostDelay pulumi.IntPtrInput
	// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
	AutovacuumVacuumCostLimit pulumi.IntPtrInput
	// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
	AutovacuumVacuumScaleFactor pulumi.Float64PtrInput
	// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
	AutovacuumVacuumThreshold pulumi.IntPtrInput
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntPtrInput
	// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
	BackupMinute pulumi.IntPtrInput
	// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
	BgwriterDelay pulumi.IntPtrInput
	// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
	BgwriterFlushAfter pulumi.IntPtrInput
	// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
	BgwriterLruMaxpages pulumi.IntPtrInput
	// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
	BgwriterLruMultiplier pulumi.Float64PtrInput
	// The ID of the target PostgreSQL cluster.
	ClusterId pulumi.StringInput
	// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
	DeadlockTimeout pulumi.IntPtrInput
	// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
	DefaultToastCompression pulumi.StringPtrInput
	// Time out sessions with open transactions after this number of milliseconds
	IdleInTransactionSessionTimeout pulumi.IntPtrInput
	// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
	Jit pulumi.BoolPtrInput
	// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
	LogAutovacuumMinDuration pulumi.IntPtrInput
	// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
	LogErrorVerbosity pulumi.StringPtrInput
	// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
	LogLinePrefix pulumi.StringPtrInput
	// Log statements that take more than this number of milliseconds to run. If -1, disables.
	LogMinDurationStatement pulumi.IntPtrInput
	// PostgreSQL maximum number of files that can be open per process.
	MaxFilesPerProcess pulumi.IntPtrInput
	// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
	MaxLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
	MaxLogicalReplicationWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that the system can support for parallel queries.
	MaxParallelWorkers pulumi.IntPtrInput
	// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
	MaxParallelWorkersPerGather pulumi.IntPtrInput
	// PostgreSQL maximum predicate locks per transaction.
	MaxPredLocksPerTransaction pulumi.IntPtrInput
	// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
	MaxPreparedTransactions pulumi.IntPtrInput
	// PostgreSQL maximum replication slots.
	MaxReplicationSlots pulumi.IntPtrInput
	// Maximum depth of the stack in bytes.
	MaxStackDepth pulumi.IntPtrInput
	// Max standby archive delay in milliseconds.
	MaxStandbyArchiveDelay pulumi.IntPtrInput
	// Max standby streaming delay in milliseconds.
	MaxStandbyStreamingDelay pulumi.IntPtrInput
	// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
	MaxWalSenders pulumi.IntPtrInput
	// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
	MaxWorkerProcesses pulumi.IntPtrInput
	// Sets the time interval to run pg_partman's scheduled tasks.
	PgPartmanBgwInterval pulumi.IntPtrInput
	// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
	PgPartmanBgwRole pulumi.StringPtrInput
	// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
	PgStatStatementsTrack pulumi.StringPtrInput
	// PGBouncer connection pooling settings
	Pgbouncers DatabasePostgresqlConfigPgbouncerArrayInput
	// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
	SharedBuffersPercentage pulumi.Float64PtrInput
	// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
	TempFileLimit pulumi.IntPtrInput
	// TimescaleDB extension configuration values
	Timescaledbs DatabasePostgresqlConfigTimescaledbArrayInput
	// PostgreSQL service timezone
	Timezone pulumi.StringPtrInput
	// Specifies the number of bytes reserved to track the currently executing command for each active session.
	TrackActivityQuerySize pulumi.IntPtrInput
	// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
	TrackCommitTimestamp pulumi.StringPtrInput
	// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
	TrackFunctions pulumi.StringPtrInput
	// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
	TrackIoTiming pulumi.StringPtrInput
	// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
	WalSenderTimeout pulumi.IntPtrInput
	// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
	WalWriterDelay pulumi.IntPtrInput
	// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
	WorkMem pulumi.IntPtrInput
}

func (DatabasePostgresqlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePostgresqlConfigArgs)(nil)).Elem()
}

type DatabasePostgresqlConfigInput interface {
	pulumi.Input

	ToDatabasePostgresqlConfigOutput() DatabasePostgresqlConfigOutput
	ToDatabasePostgresqlConfigOutputWithContext(ctx context.Context) DatabasePostgresqlConfigOutput
}

func (*DatabasePostgresqlConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePostgresqlConfig)(nil)).Elem()
}

func (i *DatabasePostgresqlConfig) ToDatabasePostgresqlConfigOutput() DatabasePostgresqlConfigOutput {
	return i.ToDatabasePostgresqlConfigOutputWithContext(context.Background())
}

func (i *DatabasePostgresqlConfig) ToDatabasePostgresqlConfigOutputWithContext(ctx context.Context) DatabasePostgresqlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlConfigOutput)
}

// DatabasePostgresqlConfigArrayInput is an input type that accepts DatabasePostgresqlConfigArray and DatabasePostgresqlConfigArrayOutput values.
// You can construct a concrete instance of `DatabasePostgresqlConfigArrayInput` via:
//
//	DatabasePostgresqlConfigArray{ DatabasePostgresqlConfigArgs{...} }
type DatabasePostgresqlConfigArrayInput interface {
	pulumi.Input

	ToDatabasePostgresqlConfigArrayOutput() DatabasePostgresqlConfigArrayOutput
	ToDatabasePostgresqlConfigArrayOutputWithContext(context.Context) DatabasePostgresqlConfigArrayOutput
}

type DatabasePostgresqlConfigArray []DatabasePostgresqlConfigInput

func (DatabasePostgresqlConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePostgresqlConfig)(nil)).Elem()
}

func (i DatabasePostgresqlConfigArray) ToDatabasePostgresqlConfigArrayOutput() DatabasePostgresqlConfigArrayOutput {
	return i.ToDatabasePostgresqlConfigArrayOutputWithContext(context.Background())
}

func (i DatabasePostgresqlConfigArray) ToDatabasePostgresqlConfigArrayOutputWithContext(ctx context.Context) DatabasePostgresqlConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlConfigArrayOutput)
}

// DatabasePostgresqlConfigMapInput is an input type that accepts DatabasePostgresqlConfigMap and DatabasePostgresqlConfigMapOutput values.
// You can construct a concrete instance of `DatabasePostgresqlConfigMapInput` via:
//
//	DatabasePostgresqlConfigMap{ "key": DatabasePostgresqlConfigArgs{...} }
type DatabasePostgresqlConfigMapInput interface {
	pulumi.Input

	ToDatabasePostgresqlConfigMapOutput() DatabasePostgresqlConfigMapOutput
	ToDatabasePostgresqlConfigMapOutputWithContext(context.Context) DatabasePostgresqlConfigMapOutput
}

type DatabasePostgresqlConfigMap map[string]DatabasePostgresqlConfigInput

func (DatabasePostgresqlConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePostgresqlConfig)(nil)).Elem()
}

func (i DatabasePostgresqlConfigMap) ToDatabasePostgresqlConfigMapOutput() DatabasePostgresqlConfigMapOutput {
	return i.ToDatabasePostgresqlConfigMapOutputWithContext(context.Background())
}

func (i DatabasePostgresqlConfigMap) ToDatabasePostgresqlConfigMapOutputWithContext(ctx context.Context) DatabasePostgresqlConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePostgresqlConfigMapOutput)
}

type DatabasePostgresqlConfigOutput struct{ *pulumi.OutputState }

func (DatabasePostgresqlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePostgresqlConfig)(nil)).Elem()
}

func (o DatabasePostgresqlConfigOutput) ToDatabasePostgresqlConfigOutput() DatabasePostgresqlConfigOutput {
	return o
}

func (o DatabasePostgresqlConfigOutput) ToDatabasePostgresqlConfigOutputWithContext(ctx context.Context) DatabasePostgresqlConfigOutput {
	return o
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuumAnalyzeThreshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).
func (o DatabasePostgresqlConfigOutput) AutovacuumAnalyzeScaleFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.Float64Output { return v.AutovacuumAnalyzeScaleFactor }).(pulumi.Float64Output)
}

// Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.
func (o DatabasePostgresqlConfigOutput) AutovacuumAnalyzeThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumAnalyzeThreshold }).(pulumi.IntOutput)
}

// Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.
func (o DatabasePostgresqlConfigOutput) AutovacuumFreezeMaxAge() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumFreezeMaxAge }).(pulumi.IntOutput)
}

// Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.
func (o DatabasePostgresqlConfigOutput) AutovacuumMaxWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumMaxWorkers }).(pulumi.IntOutput)
}

// Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.
func (o DatabasePostgresqlConfigOutput) AutovacuumNaptime() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumNaptime }).(pulumi.IntOutput)
}

// Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuumCostDelay value, which is 20 milliseconds.
func (o DatabasePostgresqlConfigOutput) AutovacuumVacuumCostDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumVacuumCostDelay }).(pulumi.IntOutput)
}

// Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuumCostLimit value will be used.
func (o DatabasePostgresqlConfigOutput) AutovacuumVacuumCostLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumVacuumCostLimit }).(pulumi.IntOutput)
}

// Specifies a fraction, in a decimal value, of the table size to add to autovacuumVacuumThreshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).
func (o DatabasePostgresqlConfigOutput) AutovacuumVacuumScaleFactor() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.Float64Output { return v.AutovacuumVacuumScaleFactor }).(pulumi.Float64Output)
}

// Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.
func (o DatabasePostgresqlConfigOutput) AutovacuumVacuumThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.AutovacuumVacuumThreshold }).(pulumi.IntOutput)
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o DatabasePostgresqlConfigOutput) BackupHour() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.BackupHour }).(pulumi.IntOutput)
}

// The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.
func (o DatabasePostgresqlConfigOutput) BackupMinute() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.BackupMinute }).(pulumi.IntOutput)
}

// Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.
func (o DatabasePostgresqlConfigOutput) BgwriterDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.BgwriterDelay }).(pulumi.IntOutput)
}

// The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512. Setting of 0 disables forced writeback.
func (o DatabasePostgresqlConfigOutput) BgwriterFlushAfter() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.BgwriterFlushAfter }).(pulumi.IntOutput)
}

// The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.
func (o DatabasePostgresqlConfigOutput) BgwriterLruMaxpages() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.BgwriterLruMaxpages }).(pulumi.IntOutput)
}

// The average recent need for new buffers is multiplied by bgwriterLruMultiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.
func (o DatabasePostgresqlConfigOutput) BgwriterLruMultiplier() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.Float64Output { return v.BgwriterLruMultiplier }).(pulumi.Float64Output)
}

// The ID of the target PostgreSQL cluster.
func (o DatabasePostgresqlConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.
func (o DatabasePostgresqlConfigOutput) DeadlockTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.DeadlockTimeout }).(pulumi.IntOutput)
}

// Specifies the default TOAST compression method for values of compressible columns (the default is lz4). Supported values are: `lz4`, `pglz`.
func (o DatabasePostgresqlConfigOutput) DefaultToastCompression() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.DefaultToastCompression }).(pulumi.StringOutput)
}

// Time out sessions with open transactions after this number of milliseconds
func (o DatabasePostgresqlConfigOutput) IdleInTransactionSessionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.IdleInTransactionSessionTimeout }).(pulumi.IntOutput)
}

// Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).
func (o DatabasePostgresqlConfigOutput) Jit() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.BoolOutput { return v.Jit }).(pulumi.BoolOutput)
}

// Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.
func (o DatabasePostgresqlConfigOutput) LogAutovacuumMinDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.LogAutovacuumMinDuration }).(pulumi.IntOutput)
}

// Controls the amount of detail written in the server log for each message that is logged. Supported values are: `TERSE`, `DEFAULT`, `VERBOSE`.
func (o DatabasePostgresqlConfigOutput) LogErrorVerbosity() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.LogErrorVerbosity }).(pulumi.StringOutput)
}

// Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc. Supported values are: `pid=%p,user=%u,db=%d,app=%a,client=%h`, `%m [%p] %q[user=%u,db=%d,app=%a]`, `%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h`.
func (o DatabasePostgresqlConfigOutput) LogLinePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.LogLinePrefix }).(pulumi.StringOutput)
}

// Log statements that take more than this number of milliseconds to run. If -1, disables.
func (o DatabasePostgresqlConfigOutput) LogMinDurationStatement() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.LogMinDurationStatement }).(pulumi.IntOutput)
}

// PostgreSQL maximum number of files that can be open per process.
func (o DatabasePostgresqlConfigOutput) MaxFilesPerProcess() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxFilesPerProcess }).(pulumi.IntOutput)
}

// PostgreSQL maximum locks per transaction. Once increased, this parameter cannot be lowered from its set value.
func (o DatabasePostgresqlConfigOutput) MaxLocksPerTransaction() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxLocksPerTransaction }).(pulumi.IntOutput)
}

// PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).
func (o DatabasePostgresqlConfigOutput) MaxLogicalReplicationWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxLogicalReplicationWorkers }).(pulumi.IntOutput)
}

// Sets the maximum number of workers that the system can support for parallel queries.
func (o DatabasePostgresqlConfigOutput) MaxParallelWorkers() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxParallelWorkers }).(pulumi.IntOutput)
}

// Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.
func (o DatabasePostgresqlConfigOutput) MaxParallelWorkersPerGather() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxParallelWorkersPerGather }).(pulumi.IntOutput)
}

// PostgreSQL maximum predicate locks per transaction.
func (o DatabasePostgresqlConfigOutput) MaxPredLocksPerTransaction() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxPredLocksPerTransaction }).(pulumi.IntOutput)
}

// PostgreSQL maximum prepared transactions. Once increased, this parameter cannot be lowered from its set value.
func (o DatabasePostgresqlConfigOutput) MaxPreparedTransactions() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxPreparedTransactions }).(pulumi.IntOutput)
}

// PostgreSQL maximum replication slots.
func (o DatabasePostgresqlConfigOutput) MaxReplicationSlots() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxReplicationSlots }).(pulumi.IntOutput)
}

// Maximum depth of the stack in bytes.
func (o DatabasePostgresqlConfigOutput) MaxStackDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxStackDepth }).(pulumi.IntOutput)
}

// Max standby archive delay in milliseconds.
func (o DatabasePostgresqlConfigOutput) MaxStandbyArchiveDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxStandbyArchiveDelay }).(pulumi.IntOutput)
}

// Max standby streaming delay in milliseconds.
func (o DatabasePostgresqlConfigOutput) MaxStandbyStreamingDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxStandbyStreamingDelay }).(pulumi.IntOutput)
}

// PostgreSQL maximum WAL senders. Once increased, this parameter cannot be lowered from its set value.
func (o DatabasePostgresqlConfigOutput) MaxWalSenders() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxWalSenders }).(pulumi.IntOutput)
}

// Sets the maximum number of background processes that the system can support. Once increased, this parameter cannot be lowered from its set value.
func (o DatabasePostgresqlConfigOutput) MaxWorkerProcesses() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.MaxWorkerProcesses }).(pulumi.IntOutput)
}

// Sets the time interval to run pg_partman's scheduled tasks.
func (o DatabasePostgresqlConfigOutput) PgPartmanBgwInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.PgPartmanBgwInterval }).(pulumi.IntOutput)
}

// Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.
func (o DatabasePostgresqlConfigOutput) PgPartmanBgwRole() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.PgPartmanBgwRole }).(pulumi.StringOutput)
}

// Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top. Supported values are: `all`, `top`, `none`.
func (o DatabasePostgresqlConfigOutput) PgStatStatementsTrack() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.PgStatStatementsTrack }).(pulumi.StringOutput)
}

// PGBouncer connection pooling settings
func (o DatabasePostgresqlConfigOutput) Pgbouncers() DatabasePostgresqlConfigPgbouncerArrayOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) DatabasePostgresqlConfigPgbouncerArrayOutput { return v.Pgbouncers }).(DatabasePostgresqlConfigPgbouncerArrayOutput)
}

// Percentage of total RAM that the database server uses for shared memory buffers. Valid range is 20-60 (float), which corresponds to 20% - 60%. This setting adjusts the sharedBuffers configuration value.
func (o DatabasePostgresqlConfigOutput) SharedBuffersPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.Float64Output { return v.SharedBuffersPercentage }).(pulumi.Float64Output)
}

// PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.
func (o DatabasePostgresqlConfigOutput) TempFileLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.TempFileLimit }).(pulumi.IntOutput)
}

// TimescaleDB extension configuration values
func (o DatabasePostgresqlConfigOutput) Timescaledbs() DatabasePostgresqlConfigTimescaledbArrayOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) DatabasePostgresqlConfigTimescaledbArrayOutput {
		return v.Timescaledbs
	}).(DatabasePostgresqlConfigTimescaledbArrayOutput)
}

// PostgreSQL service timezone
func (o DatabasePostgresqlConfigOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.Timezone }).(pulumi.StringOutput)
}

// Specifies the number of bytes reserved to track the currently executing command for each active session.
func (o DatabasePostgresqlConfigOutput) TrackActivityQuerySize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.TrackActivityQuerySize }).(pulumi.IntOutput)
}

// Record commit time of transactions. The default value is top. Supported values are: `off`, `on`.
func (o DatabasePostgresqlConfigOutput) TrackCommitTimestamp() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.TrackCommitTimestamp }).(pulumi.StringOutput)
}

// Enables tracking of function call counts and time used. The default value is top. Supported values are: `all`, `pl`, `none`.
func (o DatabasePostgresqlConfigOutput) TrackFunctions() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.TrackFunctions }).(pulumi.StringOutput)
}

// Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms. The default value is top. Supported values are: `off`, `on`.
func (o DatabasePostgresqlConfigOutput) TrackIoTiming() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.StringOutput { return v.TrackIoTiming }).(pulumi.StringOutput)
}

// Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.
func (o DatabasePostgresqlConfigOutput) WalSenderTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.WalSenderTimeout }).(pulumi.IntOutput)
}

// WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance
func (o DatabasePostgresqlConfigOutput) WalWriterDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.WalWriterDelay }).(pulumi.IntOutput)
}

// The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).
func (o DatabasePostgresqlConfigOutput) WorkMem() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabasePostgresqlConfig) pulumi.IntOutput { return v.WorkMem }).(pulumi.IntOutput)
}

type DatabasePostgresqlConfigArrayOutput struct{ *pulumi.OutputState }

func (DatabasePostgresqlConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePostgresqlConfig)(nil)).Elem()
}

func (o DatabasePostgresqlConfigArrayOutput) ToDatabasePostgresqlConfigArrayOutput() DatabasePostgresqlConfigArrayOutput {
	return o
}

func (o DatabasePostgresqlConfigArrayOutput) ToDatabasePostgresqlConfigArrayOutputWithContext(ctx context.Context) DatabasePostgresqlConfigArrayOutput {
	return o
}

func (o DatabasePostgresqlConfigArrayOutput) Index(i pulumi.IntInput) DatabasePostgresqlConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabasePostgresqlConfig {
		return vs[0].([]*DatabasePostgresqlConfig)[vs[1].(int)]
	}).(DatabasePostgresqlConfigOutput)
}

type DatabasePostgresqlConfigMapOutput struct{ *pulumi.OutputState }

func (DatabasePostgresqlConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePostgresqlConfig)(nil)).Elem()
}

func (o DatabasePostgresqlConfigMapOutput) ToDatabasePostgresqlConfigMapOutput() DatabasePostgresqlConfigMapOutput {
	return o
}

func (o DatabasePostgresqlConfigMapOutput) ToDatabasePostgresqlConfigMapOutputWithContext(ctx context.Context) DatabasePostgresqlConfigMapOutput {
	return o
}

func (o DatabasePostgresqlConfigMapOutput) MapIndex(k pulumi.StringInput) DatabasePostgresqlConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabasePostgresqlConfig {
		return vs[0].(map[string]*DatabasePostgresqlConfig)[vs[1].(string)]
	}).(DatabasePostgresqlConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlConfigInput)(nil)).Elem(), &DatabasePostgresqlConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlConfigArrayInput)(nil)).Elem(), DatabasePostgresqlConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasePostgresqlConfigMapInput)(nil)).Elem(), DatabasePostgresqlConfigMap{})
	pulumi.RegisterOutputType(DatabasePostgresqlConfigOutput{})
	pulumi.RegisterOutputType(DatabasePostgresqlConfigArrayOutput{})
	pulumi.RegisterOutputType(DatabasePostgresqlConfigMapOutput{})
}
