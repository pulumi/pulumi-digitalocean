// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Assign resources to a DigitalOcean Project. This is useful if you need to assign resources
// managed this provider to a DigitalOcean Project that is unmanaged by the provider.
//
// The following resource types can be associated with a project:
//
// * Database Clusters
// * Domains
// * Droplets
// * Floating IP
// * Load Balancers
// * Spaces Bucket
// * Volume
//
// ## Example Usage
//
// The following example assigns a droplet to a Project managed outside of this provider:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v2/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "playground"
// 		_, err := digitalocean.LookupProject(ctx, &digitalocean.LookupProjectArgs{
// 			Name: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		foobar, err := digitalocean.NewDroplet(ctx, "foobar", &digitalocean.DropletArgs{
// 			Size:   pulumi.String("512mb"),
// 			Image:  pulumi.String("centos-7-x64"),
// 			Region: pulumi.String("nyc3"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = digitalocean.NewProjectResources(ctx, "barfoo", &digitalocean.ProjectResourcesArgs{
// 			Project: pulumi.String(data.Digitalocean_project.Foo.Id),
// 			Resources: pulumi.StringArray{
// 				foobar.DropletUrn,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ProjectResources struct {
	pulumi.CustomResourceState

	// the ID of the project
	Project pulumi.StringOutput `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayOutput `pulumi:"resources"`
}

// NewProjectResources registers a new resource with the given unique name, arguments, and options.
func NewProjectResources(ctx *pulumi.Context,
	name string, args *ProjectResourcesArgs, opts ...pulumi.ResourceOption) (*ProjectResources, error) {
	if args == nil || args.Project == nil {
		return nil, errors.New("missing required argument 'Project'")
	}
	if args == nil || args.Resources == nil {
		return nil, errors.New("missing required argument 'Resources'")
	}
	if args == nil {
		args = &ProjectResourcesArgs{}
	}
	var resource ProjectResources
	err := ctx.RegisterResource("digitalocean:index/projectResources:ProjectResources", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectResources gets an existing ProjectResources resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectResources(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectResourcesState, opts ...pulumi.ResourceOption) (*ProjectResources, error) {
	var resource ProjectResources
	err := ctx.ReadResource("digitalocean:index/projectResources:ProjectResources", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectResources resources.
type projectResourcesState struct {
	// the ID of the project
	Project *string `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources []string `pulumi:"resources"`
}

type ProjectResourcesState struct {
	// the ID of the project
	Project pulumi.StringPtrInput
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayInput
}

func (ProjectResourcesState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectResourcesState)(nil)).Elem()
}

type projectResourcesArgs struct {
	// the ID of the project
	Project string `pulumi:"project"`
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources []string `pulumi:"resources"`
}

// The set of arguments for constructing a ProjectResources resource.
type ProjectResourcesArgs struct {
	// the ID of the project
	Project pulumi.StringInput
	// a list of uniform resource names (URNs) for the resources associated with the project
	Resources pulumi.StringArrayInput
}

func (ProjectResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectResourcesArgs)(nil)).Elem()
}
