// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a virtual resource that can be used to change advanced configuration
// options for a DigitalOcean managed MySQL database cluster.
//
// > **Note** MySQL configurations are only removed from state when destroyed. The remote configuration is not unset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabaseCluster, err := digitalocean.NewDatabaseCluster(ctx, "exampleDatabaseCluster", &digitalocean.DatabaseClusterArgs{
//				Engine:    pulumi.String("mysql"),
//				Version:   pulumi.String("8"),
//				Size:      pulumi.String("db-s-1vcpu-1gb"),
//				Region:    pulumi.String("nyc1"),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabaseMysqlConfig(ctx, "exampleDatabaseMysqlConfig", &digitalocean.DatabaseMysqlConfigArgs{
//				ClusterId:       exampleDatabaseCluster.ID(),
//				ConnectTimeout:  pulumi.Int(10),
//				DefaultTimeZone: pulumi.String("UTC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A MySQL database cluster's configuration can be imported using the `id` the parent cluster, e.g.
//
// ```sh
//
//	$ pulumi import digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig example 4b62829a-9c42-465b-aaa3-84051048e712
//
// ```
type DatabaseMysqlConfig struct {
	pulumi.CustomResourceState

	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntOutput `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute pulumi.IntOutput `pulumi:"backupMinute"`
	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod pulumi.IntOutput `pulumi:"binlogRetentionPeriod"`
	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout pulumi.IntOutput `pulumi:"connectTimeout"`
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
	DefaultTimeZone pulumi.StringOutput `pulumi:"defaultTimeZone"`
	// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
	GroupConcatMaxLen pulumi.IntOutput `pulumi:"groupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry pulumi.IntOutput `pulumi:"informationSchemaStatsExpiry"`
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize pulumi.IntOutput `pulumi:"innodbFtMinTokenSize"`
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable pulumi.StringOutput `pulumi:"innodbFtServerStopwordTable"`
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout pulumi.IntOutput `pulumi:"innodbLockWaitTimeout"`
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize pulumi.IntOutput `pulumi:"innodbLogBufferSize"`
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize pulumi.IntOutput `pulumi:"innodbOnlineAlterLogMaxSize"`
	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks pulumi.BoolOutput `pulumi:"innodbPrintAllDeadlocks"`
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout pulumi.BoolOutput `pulumi:"innodbRollbackOnTimeout"`
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout pulumi.IntOutput `pulumi:"interactiveTimeout"`
	// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
	InternalTmpMemStorageEngine pulumi.StringOutput `pulumi:"internalTmpMemStorageEngine"`
	// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
	LongQueryTime pulumi.Float64Output `pulumi:"longQueryTime"`
	// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
	MaxAllowedPacket pulumi.IntOutput `pulumi:"maxAllowedPacket"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
	MaxHeapTableSize pulumi.IntOutput `pulumi:"maxHeapTableSize"`
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout pulumi.IntOutput `pulumi:"netReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout pulumi.IntOutput `pulumi:"netWriteTimeout"`
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog pulumi.BoolOutput `pulumi:"slowQueryLog"`
	// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
	SortBufferSize pulumi.IntOutput `pulumi:"sortBufferSize"`
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode pulumi.StringOutput `pulumi:"sqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey pulumi.BoolOutput `pulumi:"sqlRequirePrimaryKey"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
	TmpTableSize pulumi.IntOutput `pulumi:"tmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout pulumi.IntOutput `pulumi:"waitTimeout"`
}

// NewDatabaseMysqlConfig registers a new resource with the given unique name, arguments, and options.
func NewDatabaseMysqlConfig(ctx *pulumi.Context,
	name string, args *DatabaseMysqlConfigArgs, opts ...pulumi.ResourceOption) (*DatabaseMysqlConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseMysqlConfig
	err := ctx.RegisterResource("digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseMysqlConfig gets an existing DatabaseMysqlConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseMysqlConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseMysqlConfigState, opts ...pulumi.ResourceOption) (*DatabaseMysqlConfig, error) {
	var resource DatabaseMysqlConfig
	err := ctx.ReadResource("digitalocean:index/databaseMysqlConfig:DatabaseMysqlConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseMysqlConfig resources.
type databaseMysqlConfigState struct {
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *int `pulumi:"binlogRetentionPeriod"`
	// The ID of the target MySQL cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
	DefaultTimeZone *string `pulumi:"defaultTimeZone"`
	// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
	GroupConcatMaxLen *int `pulumi:"groupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *int `pulumi:"informationSchemaStatsExpiry"`
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize *int `pulumi:"innodbFtMinTokenSize"`
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `pulumi:"innodbFtServerStopwordTable"`
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout *int `pulumi:"innodbLockWaitTimeout"`
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize *int `pulumi:"innodbLogBufferSize"`
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *int `pulumi:"innodbOnlineAlterLogMaxSize"`
	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `pulumi:"innodbPrintAllDeadlocks"`
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout *bool `pulumi:"innodbRollbackOnTimeout"`
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout *int `pulumi:"interactiveTimeout"`
	// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
	InternalTmpMemStorageEngine *string `pulumi:"internalTmpMemStorageEngine"`
	// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
	LongQueryTime *float64 `pulumi:"longQueryTime"`
	// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
	MaxAllowedPacket *int `pulumi:"maxAllowedPacket"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
	MaxHeapTableSize *int `pulumi:"maxHeapTableSize"`
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout *int `pulumi:"netReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *int `pulumi:"netWriteTimeout"`
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog *bool `pulumi:"slowQueryLog"`
	// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
	SortBufferSize *int `pulumi:"sortBufferSize"`
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode *string `pulumi:"sqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey *bool `pulumi:"sqlRequirePrimaryKey"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
	TmpTableSize *int `pulumi:"tmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *int `pulumi:"waitTimeout"`
}

type DatabaseMysqlConfigState struct {
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntPtrInput
	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute pulumi.IntPtrInput
	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod pulumi.IntPtrInput
	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringPtrInput
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout pulumi.IntPtrInput
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
	DefaultTimeZone pulumi.StringPtrInput
	// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
	GroupConcatMaxLen pulumi.IntPtrInput
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry pulumi.IntPtrInput
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize pulumi.IntPtrInput
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable pulumi.StringPtrInput
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout pulumi.IntPtrInput
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize pulumi.IntPtrInput
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize pulumi.IntPtrInput
	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks pulumi.BoolPtrInput
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout pulumi.BoolPtrInput
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout pulumi.IntPtrInput
	// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
	InternalTmpMemStorageEngine pulumi.StringPtrInput
	// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
	LongQueryTime pulumi.Float64PtrInput
	// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
	MaxAllowedPacket pulumi.IntPtrInput
	// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
	MaxHeapTableSize pulumi.IntPtrInput
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout pulumi.IntPtrInput
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout pulumi.IntPtrInput
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog pulumi.BoolPtrInput
	// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
	SortBufferSize pulumi.IntPtrInput
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode pulumi.StringPtrInput
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey pulumi.BoolPtrInput
	// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
	TmpTableSize pulumi.IntPtrInput
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout pulumi.IntPtrInput
}

func (DatabaseMysqlConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMysqlConfigState)(nil)).Elem()
}

type databaseMysqlConfigArgs struct {
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour *int `pulumi:"backupHour"`
	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute *int `pulumi:"backupMinute"`
	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod *int `pulumi:"binlogRetentionPeriod"`
	// The ID of the target MySQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
	DefaultTimeZone *string `pulumi:"defaultTimeZone"`
	// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
	GroupConcatMaxLen *int `pulumi:"groupConcatMaxLen"`
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry *int `pulumi:"informationSchemaStatsExpiry"`
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize *int `pulumi:"innodbFtMinTokenSize"`
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable *string `pulumi:"innodbFtServerStopwordTable"`
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout *int `pulumi:"innodbLockWaitTimeout"`
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize *int `pulumi:"innodbLogBufferSize"`
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize *int `pulumi:"innodbOnlineAlterLogMaxSize"`
	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks *bool `pulumi:"innodbPrintAllDeadlocks"`
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout *bool `pulumi:"innodbRollbackOnTimeout"`
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout *int `pulumi:"interactiveTimeout"`
	// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
	InternalTmpMemStorageEngine *string `pulumi:"internalTmpMemStorageEngine"`
	// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
	LongQueryTime *float64 `pulumi:"longQueryTime"`
	// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
	MaxAllowedPacket *int `pulumi:"maxAllowedPacket"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
	MaxHeapTableSize *int `pulumi:"maxHeapTableSize"`
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout *int `pulumi:"netReadTimeout"`
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout *int `pulumi:"netWriteTimeout"`
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog *bool `pulumi:"slowQueryLog"`
	// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
	SortBufferSize *int `pulumi:"sortBufferSize"`
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode *string `pulumi:"sqlMode"`
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey *bool `pulumi:"sqlRequirePrimaryKey"`
	// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
	TmpTableSize *int `pulumi:"tmpTableSize"`
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout *int `pulumi:"waitTimeout"`
}

// The set of arguments for constructing a DatabaseMysqlConfig resource.
type DatabaseMysqlConfigArgs struct {
	// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupHour pulumi.IntPtrInput
	// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
	BackupMinute pulumi.IntPtrInput
	// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
	BinlogRetentionPeriod pulumi.IntPtrInput
	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringInput
	// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
	ConnectTimeout pulumi.IntPtrInput
	// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
	DefaultTimeZone pulumi.StringPtrInput
	// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
	GroupConcatMaxLen pulumi.IntPtrInput
	// The time, in seconds, before cached statistics expire.
	InformationSchemaStatsExpiry pulumi.IntPtrInput
	// The minimum length of words that an InnoDB FULLTEXT index stores.
	InnodbFtMinTokenSize pulumi.IntPtrInput
	// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
	InnodbFtServerStopwordTable pulumi.StringPtrInput
	// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
	InnodbLockWaitTimeout pulumi.IntPtrInput
	// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
	InnodbLogBufferSize pulumi.IntPtrInput
	// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
	InnodbOnlineAlterLogMaxSize pulumi.IntPtrInput
	// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
	InnodbPrintAllDeadlocks pulumi.BoolPtrInput
	// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
	InnodbRollbackOnTimeout pulumi.BoolPtrInput
	// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
	InteractiveTimeout pulumi.IntPtrInput
	// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
	InternalTmpMemStorageEngine pulumi.StringPtrInput
	// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
	LongQueryTime pulumi.Float64PtrInput
	// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
	MaxAllowedPacket pulumi.IntPtrInput
	// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
	MaxHeapTableSize pulumi.IntPtrInput
	// The time, in seconds, to wait for more data from an existing connection. aborting the read.
	NetReadTimeout pulumi.IntPtrInput
	// The number of seconds to wait for a block to be written to a connection before aborting the write.
	NetWriteTimeout pulumi.IntPtrInput
	// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
	SlowQueryLog pulumi.BoolPtrInput
	// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
	SortBufferSize pulumi.IntPtrInput
	// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
	SqlMode pulumi.StringPtrInput
	// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
	SqlRequirePrimaryKey pulumi.BoolPtrInput
	// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
	TmpTableSize pulumi.IntPtrInput
	// The number of seconds the server waits for activity on a noninteractive connection before closing it.
	WaitTimeout pulumi.IntPtrInput
}

func (DatabaseMysqlConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMysqlConfigArgs)(nil)).Elem()
}

type DatabaseMysqlConfigInput interface {
	pulumi.Input

	ToDatabaseMysqlConfigOutput() DatabaseMysqlConfigOutput
	ToDatabaseMysqlConfigOutputWithContext(ctx context.Context) DatabaseMysqlConfigOutput
}

func (*DatabaseMysqlConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysqlConfig)(nil)).Elem()
}

func (i *DatabaseMysqlConfig) ToDatabaseMysqlConfigOutput() DatabaseMysqlConfigOutput {
	return i.ToDatabaseMysqlConfigOutputWithContext(context.Background())
}

func (i *DatabaseMysqlConfig) ToDatabaseMysqlConfigOutputWithContext(ctx context.Context) DatabaseMysqlConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlConfigOutput)
}

func (i *DatabaseMysqlConfig) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysqlConfig] {
	return pulumix.Output[*DatabaseMysqlConfig]{
		OutputState: i.ToDatabaseMysqlConfigOutputWithContext(ctx).OutputState,
	}
}

// DatabaseMysqlConfigArrayInput is an input type that accepts DatabaseMysqlConfigArray and DatabaseMysqlConfigArrayOutput values.
// You can construct a concrete instance of `DatabaseMysqlConfigArrayInput` via:
//
//	DatabaseMysqlConfigArray{ DatabaseMysqlConfigArgs{...} }
type DatabaseMysqlConfigArrayInput interface {
	pulumi.Input

	ToDatabaseMysqlConfigArrayOutput() DatabaseMysqlConfigArrayOutput
	ToDatabaseMysqlConfigArrayOutputWithContext(context.Context) DatabaseMysqlConfigArrayOutput
}

type DatabaseMysqlConfigArray []DatabaseMysqlConfigInput

func (DatabaseMysqlConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMysqlConfig)(nil)).Elem()
}

func (i DatabaseMysqlConfigArray) ToDatabaseMysqlConfigArrayOutput() DatabaseMysqlConfigArrayOutput {
	return i.ToDatabaseMysqlConfigArrayOutputWithContext(context.Background())
}

func (i DatabaseMysqlConfigArray) ToDatabaseMysqlConfigArrayOutputWithContext(ctx context.Context) DatabaseMysqlConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlConfigArrayOutput)
}

func (i DatabaseMysqlConfigArray) ToOutput(ctx context.Context) pulumix.Output[[]*DatabaseMysqlConfig] {
	return pulumix.Output[[]*DatabaseMysqlConfig]{
		OutputState: i.ToDatabaseMysqlConfigArrayOutputWithContext(ctx).OutputState,
	}
}

// DatabaseMysqlConfigMapInput is an input type that accepts DatabaseMysqlConfigMap and DatabaseMysqlConfigMapOutput values.
// You can construct a concrete instance of `DatabaseMysqlConfigMapInput` via:
//
//	DatabaseMysqlConfigMap{ "key": DatabaseMysqlConfigArgs{...} }
type DatabaseMysqlConfigMapInput interface {
	pulumi.Input

	ToDatabaseMysqlConfigMapOutput() DatabaseMysqlConfigMapOutput
	ToDatabaseMysqlConfigMapOutputWithContext(context.Context) DatabaseMysqlConfigMapOutput
}

type DatabaseMysqlConfigMap map[string]DatabaseMysqlConfigInput

func (DatabaseMysqlConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMysqlConfig)(nil)).Elem()
}

func (i DatabaseMysqlConfigMap) ToDatabaseMysqlConfigMapOutput() DatabaseMysqlConfigMapOutput {
	return i.ToDatabaseMysqlConfigMapOutputWithContext(context.Background())
}

func (i DatabaseMysqlConfigMap) ToDatabaseMysqlConfigMapOutputWithContext(ctx context.Context) DatabaseMysqlConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMysqlConfigMapOutput)
}

func (i DatabaseMysqlConfigMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*DatabaseMysqlConfig] {
	return pulumix.Output[map[string]*DatabaseMysqlConfig]{
		OutputState: i.ToDatabaseMysqlConfigMapOutputWithContext(ctx).OutputState,
	}
}

type DatabaseMysqlConfigOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMysqlConfig)(nil)).Elem()
}

func (o DatabaseMysqlConfigOutput) ToDatabaseMysqlConfigOutput() DatabaseMysqlConfigOutput {
	return o
}

func (o DatabaseMysqlConfigOutput) ToDatabaseMysqlConfigOutputWithContext(ctx context.Context) DatabaseMysqlConfigOutput {
	return o
}

func (o DatabaseMysqlConfigOutput) ToOutput(ctx context.Context) pulumix.Output[*DatabaseMysqlConfig] {
	return pulumix.Output[*DatabaseMysqlConfig]{
		OutputState: o.OutputState,
	}
}

// The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.
func (o DatabaseMysqlConfigOutput) BackupHour() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.BackupHour }).(pulumi.IntOutput)
}

// The minute of the backup hour when backup for the service starts. New backup only starts if previous backup has already completed.
func (o DatabaseMysqlConfigOutput) BackupMinute() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.BackupMinute }).(pulumi.IntOutput)
}

// The minimum amount of time, in seconds, to keep binlog entries before deletion. This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.
func (o DatabaseMysqlConfigOutput) BinlogRetentionPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.BinlogRetentionPeriod }).(pulumi.IntOutput)
}

// The ID of the target MySQL cluster.
func (o DatabaseMysqlConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.
func (o DatabaseMysqlConfigOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or `SYSTEM` to use the MySQL server default.
func (o DatabaseMysqlConfigOutput) DefaultTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.StringOutput { return v.DefaultTimeZone }).(pulumi.StringOutput)
}

// The maximum permitted result length, in bytes, for the `GROUP_CONCAT()` function.
func (o DatabaseMysqlConfigOutput) GroupConcatMaxLen() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.GroupConcatMaxLen }).(pulumi.IntOutput)
}

// The time, in seconds, before cached statistics expire.
func (o DatabaseMysqlConfigOutput) InformationSchemaStatsExpiry() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InformationSchemaStatsExpiry }).(pulumi.IntOutput)
}

// The minimum length of words that an InnoDB FULLTEXT index stores.
func (o DatabaseMysqlConfigOutput) InnodbFtMinTokenSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InnodbFtMinTokenSize }).(pulumi.IntOutput)
}

// The InnoDB FULLTEXT index stopword list for all InnoDB tables.
func (o DatabaseMysqlConfigOutput) InnodbFtServerStopwordTable() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.StringOutput { return v.InnodbFtServerStopwordTable }).(pulumi.StringOutput)
}

// The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.
func (o DatabaseMysqlConfigOutput) InnodbLockWaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InnodbLockWaitTimeout }).(pulumi.IntOutput)
}

// The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.
func (o DatabaseMysqlConfigOutput) InnodbLogBufferSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InnodbLogBufferSize }).(pulumi.IntOutput)
}

// The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.
func (o DatabaseMysqlConfigOutput) InnodbOnlineAlterLogMaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InnodbOnlineAlterLogMaxSize }).(pulumi.IntOutput)
}

// When enabled, records information about all deadlocks in InnoDB user transactions in the error log. Disabled by default.
func (o DatabaseMysqlConfigOutput) InnodbPrintAllDeadlocks() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.BoolOutput { return v.InnodbPrintAllDeadlocks }).(pulumi.BoolOutput)
}

// When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.
func (o DatabaseMysqlConfigOutput) InnodbRollbackOnTimeout() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.BoolOutput { return v.InnodbRollbackOnTimeout }).(pulumi.BoolOutput)
}

// The time, in seconds, the server waits for activity on an interactive. connection before closing it.
func (o DatabaseMysqlConfigOutput) InteractiveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.InteractiveTimeout }).(pulumi.IntOutput)
}

// The storage engine for in-memory internal temporary tables. Supported values are: `TempTable`, `MEMORY`.
func (o DatabaseMysqlConfigOutput) InternalTmpMemStorageEngine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.StringOutput { return v.InternalTmpMemStorageEngine }).(pulumi.StringOutput)
}

// The time, in seconds, for a query to take to execute before being captured by `slowQueryLogs`. Default is `10` seconds.
func (o DatabaseMysqlConfigOutput) LongQueryTime() pulumi.Float64Output {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.Float64Output { return v.LongQueryTime }).(pulumi.Float64Output)
}

// The size of the largest message, in bytes, that can be received by the server. Default is `67108864` (64M).
func (o DatabaseMysqlConfigOutput) MaxAllowedPacket() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.MaxAllowedPacket }).(pulumi.IntOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set `tmpTableSize`. Default is `16777216` (16M)
func (o DatabaseMysqlConfigOutput) MaxHeapTableSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.MaxHeapTableSize }).(pulumi.IntOutput)
}

// The time, in seconds, to wait for more data from an existing connection. aborting the read.
func (o DatabaseMysqlConfigOutput) NetReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.NetReadTimeout }).(pulumi.IntOutput)
}

// The number of seconds to wait for a block to be written to a connection before aborting the write.
func (o DatabaseMysqlConfigOutput) NetWriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.NetWriteTimeout }).(pulumi.IntOutput)
}

// When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.
func (o DatabaseMysqlConfigOutput) SlowQueryLog() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.BoolOutput { return v.SlowQueryLog }).(pulumi.BoolOutput)
}

// The sort buffer size, in bytes, for `ORDER BY` optimization. Default is `262144`. (256K).
func (o DatabaseMysqlConfigOutput) SortBufferSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.SortBufferSize }).(pulumi.IntOutput)
}

// Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.
func (o DatabaseMysqlConfigOutput) SqlMode() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.StringOutput { return v.SqlMode }).(pulumi.StringOutput)
}

// Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.
func (o DatabaseMysqlConfigOutput) SqlRequirePrimaryKey() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.BoolOutput { return v.SqlRequirePrimaryKey }).(pulumi.BoolOutput)
}

// The maximum size, in bytes, of internal in-memory tables. Also set `maxHeapTableSize`. Default is `16777216` (16M).
func (o DatabaseMysqlConfigOutput) TmpTableSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.TmpTableSize }).(pulumi.IntOutput)
}

// The number of seconds the server waits for activity on a noninteractive connection before closing it.
func (o DatabaseMysqlConfigOutput) WaitTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseMysqlConfig) pulumi.IntOutput { return v.WaitTimeout }).(pulumi.IntOutput)
}

type DatabaseMysqlConfigArrayOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMysqlConfig)(nil)).Elem()
}

func (o DatabaseMysqlConfigArrayOutput) ToDatabaseMysqlConfigArrayOutput() DatabaseMysqlConfigArrayOutput {
	return o
}

func (o DatabaseMysqlConfigArrayOutput) ToDatabaseMysqlConfigArrayOutputWithContext(ctx context.Context) DatabaseMysqlConfigArrayOutput {
	return o
}

func (o DatabaseMysqlConfigArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*DatabaseMysqlConfig] {
	return pulumix.Output[[]*DatabaseMysqlConfig]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseMysqlConfigArrayOutput) Index(i pulumi.IntInput) DatabaseMysqlConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseMysqlConfig {
		return vs[0].([]*DatabaseMysqlConfig)[vs[1].(int)]
	}).(DatabaseMysqlConfigOutput)
}

type DatabaseMysqlConfigMapOutput struct{ *pulumi.OutputState }

func (DatabaseMysqlConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMysqlConfig)(nil)).Elem()
}

func (o DatabaseMysqlConfigMapOutput) ToDatabaseMysqlConfigMapOutput() DatabaseMysqlConfigMapOutput {
	return o
}

func (o DatabaseMysqlConfigMapOutput) ToDatabaseMysqlConfigMapOutputWithContext(ctx context.Context) DatabaseMysqlConfigMapOutput {
	return o
}

func (o DatabaseMysqlConfigMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*DatabaseMysqlConfig] {
	return pulumix.Output[map[string]*DatabaseMysqlConfig]{
		OutputState: o.OutputState,
	}
}

func (o DatabaseMysqlConfigMapOutput) MapIndex(k pulumi.StringInput) DatabaseMysqlConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseMysqlConfig {
		return vs[0].(map[string]*DatabaseMysqlConfig)[vs[1].(string)]
	}).(DatabaseMysqlConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlConfigInput)(nil)).Elem(), &DatabaseMysqlConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlConfigArrayInput)(nil)).Elem(), DatabaseMysqlConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMysqlConfigMapInput)(nil)).Elem(), DatabaseMysqlConfigMap{})
	pulumi.RegisterOutputType(DatabaseMysqlConfigOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlConfigArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMysqlConfigMapOutput{})
}
