// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean Certificate resource that allows you to manage
// certificates for configuring TLS termination in Load Balancers.
// Certificates created with this resource can be referenced in your
// Load Balancer configuration via their ID. The certificate can either
// be a custom one provided by you or automatically generated one with
// Let's Encrypt.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/certificate.html.markdown.
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificateChain"] = nil
		inputs["domains"] = nil
		inputs["leafCertificate"] = nil
		inputs["name"] = nil
		inputs["privateKey"] = nil
		inputs["type"] = nil
	} else {
		inputs["certificateChain"] = args.CertificateChain
		inputs["domains"] = args.Domains
		inputs["leafCertificate"] = args.LeafCertificate
		inputs["name"] = args.Name
		inputs["privateKey"] = args.PrivateKey
		inputs["type"] = args.Type
	}
	inputs["notAfter"] = nil
	inputs["sha1Fingerprint"] = nil
	inputs["state"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificateChain"] = state.CertificateChain
		inputs["domains"] = state.Domains
		inputs["leafCertificate"] = state.LeafCertificate
		inputs["name"] = state.Name
		inputs["notAfter"] = state.NotAfter
		inputs["privateKey"] = state.PrivateKey
		inputs["sha1Fingerprint"] = state.Sha1Fingerprint
		inputs["state"] = state.State
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("digitalocean:index/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The full PEM-formatted trust chain
// between the certificate authority's certificate and your domain's TLS
// certificate. Only valid when type is `custom`.
func (r *Certificate) CertificateChain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["certificateChain"])
}

// List of fully qualified domain names (FQDNs) for
// which the certificate will be issued. The domains must be managed using
// DigitalOcean's DNS. Only valid when type is `letsEncrypt`.
func (r *Certificate) Domains() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["domains"])
}

// The contents of a PEM-formatted public
// TLS certificate. Only valid when type is `custom`.
func (r *Certificate) LeafCertificate() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["leafCertificate"])
}

// The name of the certificate for identification.
func (r *Certificate) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The expiration date of the certificate
func (r *Certificate) NotAfter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["notAfter"])
}

// The contents of a PEM-formatted private-key
// corresponding to the SSL certificate. Only valid when type is `custom`.
func (r *Certificate) PrivateKey() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["privateKey"])
}

// The SHA-1 fingerprint of the certificate
func (r *Certificate) Sha1Fingerprint() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sha1Fingerprint"])
}

func (r *Certificate) State() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["state"])
}

// The type of certificate to provision. Can be either
// `custom` or `letsEncrypt`. Defaults to `custom`.
func (r *Certificate) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// The full PEM-formatted trust chain
	// between the certificate authority's certificate and your domain's TLS
	// certificate. Only valid when type is `custom`.
	CertificateChain interface{}
	// List of fully qualified domain names (FQDNs) for
	// which the certificate will be issued. The domains must be managed using
	// DigitalOcean's DNS. Only valid when type is `letsEncrypt`.
	Domains interface{}
	// The contents of a PEM-formatted public
	// TLS certificate. Only valid when type is `custom`.
	LeafCertificate interface{}
	// The name of the certificate for identification.
	Name interface{}
	// The expiration date of the certificate
	NotAfter interface{}
	// The contents of a PEM-formatted private-key
	// corresponding to the SSL certificate. Only valid when type is `custom`.
	PrivateKey interface{}
	// The SHA-1 fingerprint of the certificate
	Sha1Fingerprint interface{}
	State interface{}
	// The type of certificate to provision. Can be either
	// `custom` or `letsEncrypt`. Defaults to `custom`.
	Type interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// The full PEM-formatted trust chain
	// between the certificate authority's certificate and your domain's TLS
	// certificate. Only valid when type is `custom`.
	CertificateChain interface{}
	// List of fully qualified domain names (FQDNs) for
	// which the certificate will be issued. The domains must be managed using
	// DigitalOcean's DNS. Only valid when type is `letsEncrypt`.
	Domains interface{}
	// The contents of a PEM-formatted public
	// TLS certificate. Only valid when type is `custom`.
	LeafCertificate interface{}
	// The name of the certificate for identification.
	Name interface{}
	// The contents of a PEM-formatted private-key
	// corresponding to the SSL certificate. Only valid when type is `custom`.
	PrivateKey interface{}
	// The type of certificate to provision. Can be either
	// `custom` or `letsEncrypt`. Defaults to `custom`.
	Type interface{}
}
