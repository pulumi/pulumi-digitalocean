// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a DigitalOcean database resource. When creating a new database cluster, a default database with name `defaultdb` will be created. Then, this resource can be used to provide additional database inside the cluster.
type DatabaseDb struct {
	pulumi.CustomResourceState

	// The ID of the original source database cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name for the database.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDatabaseDb registers a new resource with the given unique name, arguments, and options.
func NewDatabaseDb(ctx *pulumi.Context,
	name string, args *DatabaseDbArgs, opts ...pulumi.ResourceOption) (*DatabaseDb, error) {
	if args == nil || args.ClusterId == nil {
		return nil, errors.New("missing required argument 'ClusterId'")
	}
	if args == nil {
		args = &DatabaseDbArgs{}
	}
	var resource DatabaseDb
	err := ctx.RegisterResource("digitalocean:index:DatabaseDb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseDb gets an existing DatabaseDb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseDb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseDbState, opts ...pulumi.ResourceOption) (*DatabaseDb, error) {
	var resource DatabaseDb
	err := ctx.ReadResource("digitalocean:index:DatabaseDb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseDb resources.
type databaseDbState struct {
	// The ID of the original source database cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The name for the database.
	Name *string `pulumi:"name"`
}

type DatabaseDbState struct {
	// The ID of the original source database cluster.
	ClusterId pulumi.StringPtrInput
	// The name for the database.
	Name pulumi.StringPtrInput
}

func (DatabaseDbState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDbState)(nil)).Elem()
}

type databaseDbArgs struct {
	// The ID of the original source database cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name for the database.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DatabaseDb resource.
type DatabaseDbArgs struct {
	// The ID of the original source database cluster.
	ClusterId pulumi.StringInput
	// The name for the database.
	Name pulumi.StringPtrInput
}

func (DatabaseDbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDbArgs)(nil)).Elem()
}
