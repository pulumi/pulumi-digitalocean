// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GenaiOpenaiApiKey struct {
	pulumi.CustomResourceState

	// The OpenAI API key.
	ApiKey pulumi.StringOutput `pulumi:"apiKey"`
	// When the API key was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Who created the API key.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// When the API key was deleted.
	DeletedAt pulumi.StringOutput `pulumi:"deletedAt"`
	// Models associated with the OpenAI API key
	Models GenaiOpenaiApiKeyModelArrayOutput `pulumi:"models"`
	// A name for the API key.
	Name pulumi.StringOutput `pulumi:"name"`
	// When the API key was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The UUID of the API key.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewGenaiOpenaiApiKey registers a new resource with the given unique name, arguments, and options.
func NewGenaiOpenaiApiKey(ctx *pulumi.Context,
	name string, args *GenaiOpenaiApiKeyArgs, opts ...pulumi.ResourceOption) (*GenaiOpenaiApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKey == nil {
		return nil, errors.New("invalid value for required argument 'ApiKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenaiOpenaiApiKey
	err := ctx.RegisterResource("digitalocean:index/genaiOpenaiApiKey:GenaiOpenaiApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenaiOpenaiApiKey gets an existing GenaiOpenaiApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenaiOpenaiApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenaiOpenaiApiKeyState, opts ...pulumi.ResourceOption) (*GenaiOpenaiApiKey, error) {
	var resource GenaiOpenaiApiKey
	err := ctx.ReadResource("digitalocean:index/genaiOpenaiApiKey:GenaiOpenaiApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenaiOpenaiApiKey resources.
type genaiOpenaiApiKeyState struct {
	// The OpenAI API key.
	ApiKey *string `pulumi:"apiKey"`
	// When the API key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Who created the API key.
	CreatedBy *string `pulumi:"createdBy"`
	// When the API key was deleted.
	DeletedAt *string `pulumi:"deletedAt"`
	// Models associated with the OpenAI API key
	Models []GenaiOpenaiApiKeyModel `pulumi:"models"`
	// A name for the API key.
	Name *string `pulumi:"name"`
	// When the API key was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The UUID of the API key.
	Uuid *string `pulumi:"uuid"`
}

type GenaiOpenaiApiKeyState struct {
	// The OpenAI API key.
	ApiKey pulumi.StringPtrInput
	// When the API key was created.
	CreatedAt pulumi.StringPtrInput
	// Who created the API key.
	CreatedBy pulumi.StringPtrInput
	// When the API key was deleted.
	DeletedAt pulumi.StringPtrInput
	// Models associated with the OpenAI API key
	Models GenaiOpenaiApiKeyModelArrayInput
	// A name for the API key.
	Name pulumi.StringPtrInput
	// When the API key was last updated.
	UpdatedAt pulumi.StringPtrInput
	// The UUID of the API key.
	Uuid pulumi.StringPtrInput
}

func (GenaiOpenaiApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiOpenaiApiKeyState)(nil)).Elem()
}

type genaiOpenaiApiKeyArgs struct {
	// The OpenAI API key.
	ApiKey string `pulumi:"apiKey"`
	// Models associated with the OpenAI API key
	Models []GenaiOpenaiApiKeyModel `pulumi:"models"`
	// A name for the API key.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a GenaiOpenaiApiKey resource.
type GenaiOpenaiApiKeyArgs struct {
	// The OpenAI API key.
	ApiKey pulumi.StringInput
	// Models associated with the OpenAI API key
	Models GenaiOpenaiApiKeyModelArrayInput
	// A name for the API key.
	Name pulumi.StringPtrInput
}

func (GenaiOpenaiApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiOpenaiApiKeyArgs)(nil)).Elem()
}

type GenaiOpenaiApiKeyInput interface {
	pulumi.Input

	ToGenaiOpenaiApiKeyOutput() GenaiOpenaiApiKeyOutput
	ToGenaiOpenaiApiKeyOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyOutput
}

func (*GenaiOpenaiApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiOpenaiApiKey)(nil)).Elem()
}

func (i *GenaiOpenaiApiKey) ToGenaiOpenaiApiKeyOutput() GenaiOpenaiApiKeyOutput {
	return i.ToGenaiOpenaiApiKeyOutputWithContext(context.Background())
}

func (i *GenaiOpenaiApiKey) ToGenaiOpenaiApiKeyOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiOpenaiApiKeyOutput)
}

// GenaiOpenaiApiKeyArrayInput is an input type that accepts GenaiOpenaiApiKeyArray and GenaiOpenaiApiKeyArrayOutput values.
// You can construct a concrete instance of `GenaiOpenaiApiKeyArrayInput` via:
//
//	GenaiOpenaiApiKeyArray{ GenaiOpenaiApiKeyArgs{...} }
type GenaiOpenaiApiKeyArrayInput interface {
	pulumi.Input

	ToGenaiOpenaiApiKeyArrayOutput() GenaiOpenaiApiKeyArrayOutput
	ToGenaiOpenaiApiKeyArrayOutputWithContext(context.Context) GenaiOpenaiApiKeyArrayOutput
}

type GenaiOpenaiApiKeyArray []GenaiOpenaiApiKeyInput

func (GenaiOpenaiApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiOpenaiApiKey)(nil)).Elem()
}

func (i GenaiOpenaiApiKeyArray) ToGenaiOpenaiApiKeyArrayOutput() GenaiOpenaiApiKeyArrayOutput {
	return i.ToGenaiOpenaiApiKeyArrayOutputWithContext(context.Background())
}

func (i GenaiOpenaiApiKeyArray) ToGenaiOpenaiApiKeyArrayOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiOpenaiApiKeyArrayOutput)
}

// GenaiOpenaiApiKeyMapInput is an input type that accepts GenaiOpenaiApiKeyMap and GenaiOpenaiApiKeyMapOutput values.
// You can construct a concrete instance of `GenaiOpenaiApiKeyMapInput` via:
//
//	GenaiOpenaiApiKeyMap{ "key": GenaiOpenaiApiKeyArgs{...} }
type GenaiOpenaiApiKeyMapInput interface {
	pulumi.Input

	ToGenaiOpenaiApiKeyMapOutput() GenaiOpenaiApiKeyMapOutput
	ToGenaiOpenaiApiKeyMapOutputWithContext(context.Context) GenaiOpenaiApiKeyMapOutput
}

type GenaiOpenaiApiKeyMap map[string]GenaiOpenaiApiKeyInput

func (GenaiOpenaiApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiOpenaiApiKey)(nil)).Elem()
}

func (i GenaiOpenaiApiKeyMap) ToGenaiOpenaiApiKeyMapOutput() GenaiOpenaiApiKeyMapOutput {
	return i.ToGenaiOpenaiApiKeyMapOutputWithContext(context.Background())
}

func (i GenaiOpenaiApiKeyMap) ToGenaiOpenaiApiKeyMapOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiOpenaiApiKeyMapOutput)
}

type GenaiOpenaiApiKeyOutput struct{ *pulumi.OutputState }

func (GenaiOpenaiApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiOpenaiApiKey)(nil)).Elem()
}

func (o GenaiOpenaiApiKeyOutput) ToGenaiOpenaiApiKeyOutput() GenaiOpenaiApiKeyOutput {
	return o
}

func (o GenaiOpenaiApiKeyOutput) ToGenaiOpenaiApiKeyOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyOutput {
	return o
}

// The OpenAI API key.
func (o GenaiOpenaiApiKeyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.ApiKey }).(pulumi.StringOutput)
}

// When the API key was created.
func (o GenaiOpenaiApiKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Who created the API key.
func (o GenaiOpenaiApiKeyOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// When the API key was deleted.
func (o GenaiOpenaiApiKeyOutput) DeletedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.DeletedAt }).(pulumi.StringOutput)
}

// Models associated with the OpenAI API key
func (o GenaiOpenaiApiKeyOutput) Models() GenaiOpenaiApiKeyModelArrayOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) GenaiOpenaiApiKeyModelArrayOutput { return v.Models }).(GenaiOpenaiApiKeyModelArrayOutput)
}

// A name for the API key.
func (o GenaiOpenaiApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// When the API key was last updated.
func (o GenaiOpenaiApiKeyOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The UUID of the API key.
func (o GenaiOpenaiApiKeyOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiOpenaiApiKey) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type GenaiOpenaiApiKeyArrayOutput struct{ *pulumi.OutputState }

func (GenaiOpenaiApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiOpenaiApiKey)(nil)).Elem()
}

func (o GenaiOpenaiApiKeyArrayOutput) ToGenaiOpenaiApiKeyArrayOutput() GenaiOpenaiApiKeyArrayOutput {
	return o
}

func (o GenaiOpenaiApiKeyArrayOutput) ToGenaiOpenaiApiKeyArrayOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyArrayOutput {
	return o
}

func (o GenaiOpenaiApiKeyArrayOutput) Index(i pulumi.IntInput) GenaiOpenaiApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenaiOpenaiApiKey {
		return vs[0].([]*GenaiOpenaiApiKey)[vs[1].(int)]
	}).(GenaiOpenaiApiKeyOutput)
}

type GenaiOpenaiApiKeyMapOutput struct{ *pulumi.OutputState }

func (GenaiOpenaiApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiOpenaiApiKey)(nil)).Elem()
}

func (o GenaiOpenaiApiKeyMapOutput) ToGenaiOpenaiApiKeyMapOutput() GenaiOpenaiApiKeyMapOutput {
	return o
}

func (o GenaiOpenaiApiKeyMapOutput) ToGenaiOpenaiApiKeyMapOutputWithContext(ctx context.Context) GenaiOpenaiApiKeyMapOutput {
	return o
}

func (o GenaiOpenaiApiKeyMapOutput) MapIndex(k pulumi.StringInput) GenaiOpenaiApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenaiOpenaiApiKey {
		return vs[0].(map[string]*GenaiOpenaiApiKey)[vs[1].(string)]
	}).(GenaiOpenaiApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiOpenaiApiKeyInput)(nil)).Elem(), &GenaiOpenaiApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiOpenaiApiKeyArrayInput)(nil)).Elem(), GenaiOpenaiApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiOpenaiApiKeyMapInput)(nil)).Elem(), GenaiOpenaiApiKeyMap{})
	pulumi.RegisterOutputType(GenaiOpenaiApiKeyOutput{})
	pulumi.RegisterOutputType(GenaiOpenaiApiKeyArrayOutput{})
	pulumi.RegisterOutputType(GenaiOpenaiApiKeyMapOutput{})
}
