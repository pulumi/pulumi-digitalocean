// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DigitalOcean VPC NAT Gateway resource. This can be used to create, modify,
// read and delete VPC NAT Gateways.
//
// NOTE: VPC NAT Gateway is currently in Private Preview.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			my_vpc, err := digitalocean.NewVpc(ctx, "my-vpc", &digitalocean.VpcArgs{
//				Name:   pulumi.String("terraform-example"),
//				Region: pulumi.String("nyc3"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewVpcNatGateway(ctx, "my-vpc-nat-gateway", &digitalocean.VpcNatGatewayArgs{
//				Name:   pulumi.String("terraform-example"),
//				Type:   pulumi.String("PUBLIC"),
//				Region: pulumi.String("nyc3"),
//				Size:   pulumi.Int(1),
//				Vpcs: digitalocean.VpcNatGatewayVpcArray{
//					&digitalocean.VpcNatGatewayVpcArgs{
//						VpcUuid: my_vpc.ID(),
//					},
//				},
//				UdpTimeoutSeconds:  pulumi.Int(30),
//				IcmpTimeoutSeconds: pulumi.Int(30),
//				TcpTimeoutSeconds:  pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPC NAT Gateways can be imported using their `id`, e.g.
//
// ```sh
// $ pulumi import digitalocean:index/vpcNatGateway:VpcNatGateway my-vpc-nat-gateway-id 38e66834-d741-47ec-88e7-c70cbdcz0445
// ```
type VpcNatGateway struct {
	pulumi.CustomResourceState

	// Created at timestamp for the VPC NAT Gateway.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
	// `publicGateways` embedding the reserved `ipv4` addresses.
	Egresses VpcNatGatewayEgressArrayOutput `pulumi:"egresses"`
	// The egress timeout value for ICMP connections of the VPC NAT Gateway.
	IcmpTimeoutSeconds pulumi.IntOutput `pulumi:"icmpTimeoutSeconds"`
	// The name of the VPC NAT Gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// The region for the VPC NAT Gateway.
	Region pulumi.StringOutput `pulumi:"region"`
	// The size of the VPC NAT Gateway.
	Size pulumi.IntOutput `pulumi:"size"`
	// State of the VPC NAT Gateway
	State pulumi.StringOutput `pulumi:"state"`
	// The egress timeout value for TCP connections of the VPC NAT Gateway.
	TcpTimeoutSeconds pulumi.IntOutput `pulumi:"tcpTimeoutSeconds"`
	// The type of the VPC NAT Gateway.
	Type pulumi.StringOutput `pulumi:"type"`
	// The egress timeout value for UDP connections of the VPC NAT Gateway.
	UdpTimeoutSeconds pulumi.IntOutput `pulumi:"udpTimeoutSeconds"`
	// Updated at timestamp for the VPC NAT Gateway.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
	// documented below.
	Vpcs VpcNatGatewayVpcArrayOutput `pulumi:"vpcs"`
}

// NewVpcNatGateway registers a new resource with the given unique name, arguments, and options.
func NewVpcNatGateway(ctx *pulumi.Context,
	name string, args *VpcNatGatewayArgs, opts ...pulumi.ResourceOption) (*VpcNatGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Vpcs == nil {
		return nil, errors.New("invalid value for required argument 'Vpcs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpcNatGateway
	err := ctx.RegisterResource("digitalocean:index/vpcNatGateway:VpcNatGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpcNatGateway gets an existing VpcNatGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcNatGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcNatGatewayState, opts ...pulumi.ResourceOption) (*VpcNatGateway, error) {
	var resource VpcNatGateway
	err := ctx.ReadResource("digitalocean:index/vpcNatGateway:VpcNatGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpcNatGateway resources.
type vpcNatGatewayState struct {
	// Created at timestamp for the VPC NAT Gateway.
	CreatedAt *string `pulumi:"createdAt"`
	// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
	// `publicGateways` embedding the reserved `ipv4` addresses.
	Egresses []VpcNatGatewayEgress `pulumi:"egresses"`
	// The egress timeout value for ICMP connections of the VPC NAT Gateway.
	IcmpTimeoutSeconds *int `pulumi:"icmpTimeoutSeconds"`
	// The name of the VPC NAT Gateway.
	Name *string `pulumi:"name"`
	// The region for the VPC NAT Gateway.
	Region *string `pulumi:"region"`
	// The size of the VPC NAT Gateway.
	Size *int `pulumi:"size"`
	// State of the VPC NAT Gateway
	State *string `pulumi:"state"`
	// The egress timeout value for TCP connections of the VPC NAT Gateway.
	TcpTimeoutSeconds *int `pulumi:"tcpTimeoutSeconds"`
	// The type of the VPC NAT Gateway.
	Type *string `pulumi:"type"`
	// The egress timeout value for UDP connections of the VPC NAT Gateway.
	UdpTimeoutSeconds *int `pulumi:"udpTimeoutSeconds"`
	// Updated at timestamp for the VPC NAT Gateway.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
	// documented below.
	Vpcs []VpcNatGatewayVpc `pulumi:"vpcs"`
}

type VpcNatGatewayState struct {
	// Created at timestamp for the VPC NAT Gateway.
	CreatedAt pulumi.StringPtrInput
	// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
	// `publicGateways` embedding the reserved `ipv4` addresses.
	Egresses VpcNatGatewayEgressArrayInput
	// The egress timeout value for ICMP connections of the VPC NAT Gateway.
	IcmpTimeoutSeconds pulumi.IntPtrInput
	// The name of the VPC NAT Gateway.
	Name pulumi.StringPtrInput
	// The region for the VPC NAT Gateway.
	Region pulumi.StringPtrInput
	// The size of the VPC NAT Gateway.
	Size pulumi.IntPtrInput
	// State of the VPC NAT Gateway
	State pulumi.StringPtrInput
	// The egress timeout value for TCP connections of the VPC NAT Gateway.
	TcpTimeoutSeconds pulumi.IntPtrInput
	// The type of the VPC NAT Gateway.
	Type pulumi.StringPtrInput
	// The egress timeout value for UDP connections of the VPC NAT Gateway.
	UdpTimeoutSeconds pulumi.IntPtrInput
	// Updated at timestamp for the VPC NAT Gateway.
	UpdatedAt pulumi.StringPtrInput
	// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
	// documented below.
	Vpcs VpcNatGatewayVpcArrayInput
}

func (VpcNatGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNatGatewayState)(nil)).Elem()
}

type vpcNatGatewayArgs struct {
	// The egress timeout value for ICMP connections of the VPC NAT Gateway.
	IcmpTimeoutSeconds *int `pulumi:"icmpTimeoutSeconds"`
	// The name of the VPC NAT Gateway.
	Name *string `pulumi:"name"`
	// The region for the VPC NAT Gateway.
	Region string `pulumi:"region"`
	// The size of the VPC NAT Gateway.
	Size int `pulumi:"size"`
	// The egress timeout value for TCP connections of the VPC NAT Gateway.
	TcpTimeoutSeconds *int `pulumi:"tcpTimeoutSeconds"`
	// The type of the VPC NAT Gateway.
	Type string `pulumi:"type"`
	// The egress timeout value for UDP connections of the VPC NAT Gateway.
	UdpTimeoutSeconds *int `pulumi:"udpTimeoutSeconds"`
	// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
	// documented below.
	Vpcs []VpcNatGatewayVpc `pulumi:"vpcs"`
}

// The set of arguments for constructing a VpcNatGateway resource.
type VpcNatGatewayArgs struct {
	// The egress timeout value for ICMP connections of the VPC NAT Gateway.
	IcmpTimeoutSeconds pulumi.IntPtrInput
	// The name of the VPC NAT Gateway.
	Name pulumi.StringPtrInput
	// The region for the VPC NAT Gateway.
	Region pulumi.StringInput
	// The size of the VPC NAT Gateway.
	Size pulumi.IntInput
	// The egress timeout value for TCP connections of the VPC NAT Gateway.
	TcpTimeoutSeconds pulumi.IntPtrInput
	// The type of the VPC NAT Gateway.
	Type pulumi.StringInput
	// The egress timeout value for UDP connections of the VPC NAT Gateway.
	UdpTimeoutSeconds pulumi.IntPtrInput
	// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
	// documented below.
	Vpcs VpcNatGatewayVpcArrayInput
}

func (VpcNatGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcNatGatewayArgs)(nil)).Elem()
}

type VpcNatGatewayInput interface {
	pulumi.Input

	ToVpcNatGatewayOutput() VpcNatGatewayOutput
	ToVpcNatGatewayOutputWithContext(ctx context.Context) VpcNatGatewayOutput
}

func (*VpcNatGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcNatGateway)(nil)).Elem()
}

func (i *VpcNatGateway) ToVpcNatGatewayOutput() VpcNatGatewayOutput {
	return i.ToVpcNatGatewayOutputWithContext(context.Background())
}

func (i *VpcNatGateway) ToVpcNatGatewayOutputWithContext(ctx context.Context) VpcNatGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNatGatewayOutput)
}

// VpcNatGatewayArrayInput is an input type that accepts VpcNatGatewayArray and VpcNatGatewayArrayOutput values.
// You can construct a concrete instance of `VpcNatGatewayArrayInput` via:
//
//	VpcNatGatewayArray{ VpcNatGatewayArgs{...} }
type VpcNatGatewayArrayInput interface {
	pulumi.Input

	ToVpcNatGatewayArrayOutput() VpcNatGatewayArrayOutput
	ToVpcNatGatewayArrayOutputWithContext(context.Context) VpcNatGatewayArrayOutput
}

type VpcNatGatewayArray []VpcNatGatewayInput

func (VpcNatGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcNatGateway)(nil)).Elem()
}

func (i VpcNatGatewayArray) ToVpcNatGatewayArrayOutput() VpcNatGatewayArrayOutput {
	return i.ToVpcNatGatewayArrayOutputWithContext(context.Background())
}

func (i VpcNatGatewayArray) ToVpcNatGatewayArrayOutputWithContext(ctx context.Context) VpcNatGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNatGatewayArrayOutput)
}

// VpcNatGatewayMapInput is an input type that accepts VpcNatGatewayMap and VpcNatGatewayMapOutput values.
// You can construct a concrete instance of `VpcNatGatewayMapInput` via:
//
//	VpcNatGatewayMap{ "key": VpcNatGatewayArgs{...} }
type VpcNatGatewayMapInput interface {
	pulumi.Input

	ToVpcNatGatewayMapOutput() VpcNatGatewayMapOutput
	ToVpcNatGatewayMapOutputWithContext(context.Context) VpcNatGatewayMapOutput
}

type VpcNatGatewayMap map[string]VpcNatGatewayInput

func (VpcNatGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcNatGateway)(nil)).Elem()
}

func (i VpcNatGatewayMap) ToVpcNatGatewayMapOutput() VpcNatGatewayMapOutput {
	return i.ToVpcNatGatewayMapOutputWithContext(context.Background())
}

func (i VpcNatGatewayMap) ToVpcNatGatewayMapOutputWithContext(ctx context.Context) VpcNatGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcNatGatewayMapOutput)
}

type VpcNatGatewayOutput struct{ *pulumi.OutputState }

func (VpcNatGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpcNatGateway)(nil)).Elem()
}

func (o VpcNatGatewayOutput) ToVpcNatGatewayOutput() VpcNatGatewayOutput {
	return o
}

func (o VpcNatGatewayOutput) ToVpcNatGatewayOutputWithContext(ctx context.Context) VpcNatGatewayOutput {
	return o
}

// Created at timestamp for the VPC NAT Gateway.
func (o VpcNatGatewayOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Embeds the list of public egresses assigned to the VPC NAT Gateway: resolves as list of
// `publicGateways` embedding the reserved `ipv4` addresses.
func (o VpcNatGatewayOutput) Egresses() VpcNatGatewayEgressArrayOutput {
	return o.ApplyT(func(v *VpcNatGateway) VpcNatGatewayEgressArrayOutput { return v.Egresses }).(VpcNatGatewayEgressArrayOutput)
}

// The egress timeout value for ICMP connections of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) IcmpTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.IntOutput { return v.IcmpTimeoutSeconds }).(pulumi.IntOutput)
}

// The name of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region for the VPC NAT Gateway.
func (o VpcNatGatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The size of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// State of the VPC NAT Gateway
func (o VpcNatGatewayOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The egress timeout value for TCP connections of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) TcpTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.IntOutput { return v.TcpTimeoutSeconds }).(pulumi.IntOutput)
}

// The type of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The egress timeout value for UDP connections of the VPC NAT Gateway.
func (o VpcNatGatewayOutput) UdpTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.IntOutput { return v.UdpTimeoutSeconds }).(pulumi.IntOutput)
}

// Updated at timestamp for the VPC NAT Gateway.
func (o VpcNatGatewayOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *VpcNatGateway) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ingress VPC configuration of the VPC NAT Gateway, the supported arguments are
// documented below.
func (o VpcNatGatewayOutput) Vpcs() VpcNatGatewayVpcArrayOutput {
	return o.ApplyT(func(v *VpcNatGateway) VpcNatGatewayVpcArrayOutput { return v.Vpcs }).(VpcNatGatewayVpcArrayOutput)
}

type VpcNatGatewayArrayOutput struct{ *pulumi.OutputState }

func (VpcNatGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpcNatGateway)(nil)).Elem()
}

func (o VpcNatGatewayArrayOutput) ToVpcNatGatewayArrayOutput() VpcNatGatewayArrayOutput {
	return o
}

func (o VpcNatGatewayArrayOutput) ToVpcNatGatewayArrayOutputWithContext(ctx context.Context) VpcNatGatewayArrayOutput {
	return o
}

func (o VpcNatGatewayArrayOutput) Index(i pulumi.IntInput) VpcNatGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpcNatGateway {
		return vs[0].([]*VpcNatGateway)[vs[1].(int)]
	}).(VpcNatGatewayOutput)
}

type VpcNatGatewayMapOutput struct{ *pulumi.OutputState }

func (VpcNatGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpcNatGateway)(nil)).Elem()
}

func (o VpcNatGatewayMapOutput) ToVpcNatGatewayMapOutput() VpcNatGatewayMapOutput {
	return o
}

func (o VpcNatGatewayMapOutput) ToVpcNatGatewayMapOutputWithContext(ctx context.Context) VpcNatGatewayMapOutput {
	return o
}

func (o VpcNatGatewayMapOutput) MapIndex(k pulumi.StringInput) VpcNatGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpcNatGateway {
		return vs[0].(map[string]*VpcNatGateway)[vs[1].(string)]
	}).(VpcNatGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNatGatewayInput)(nil)).Elem(), &VpcNatGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNatGatewayArrayInput)(nil)).Elem(), VpcNatGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcNatGatewayMapInput)(nil)).Elem(), VpcNatGatewayMap{})
	pulumi.RegisterOutputType(VpcNatGatewayOutput{})
	pulumi.RegisterOutputType(VpcNatGatewayArrayOutput{})
	pulumi.RegisterOutputType(VpcNatGatewayMapOutput{})
}
