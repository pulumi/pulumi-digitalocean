// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			assets, err := digitalocean.NewSpacesBucket(ctx, "assets", &digitalocean.SpacesBucketArgs{
//				Name:   pulumi.String("assets"),
//				Region: pulumi.String(digitalocean.RegionNYC3),
//			})
//			if err != nil {
//				return err
//			}
//			logs, err := digitalocean.NewSpacesBucket(ctx, "logs", &digitalocean.SpacesBucketArgs{
//				Name:   pulumi.String("logs"),
//				Region: pulumi.String(digitalocean.RegionNYC3),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewSpacesBucketLogging(ctx, "example", &digitalocean.SpacesBucketLoggingArgs{
//				Region:       pulumi.String("%s"),
//				Bucket:       assets.ID(),
//				TargetBucket: logs.ID(),
//				TargetPrefix: pulumi.String("access-logs/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Spaces bucket logging can be imported using the `region` and `bucket` attributes (delimited by a comma):
//
// ```sh
// $ pulumi import digitalocean:index/spacesBucketLogging:SpacesBucketLogging example `region`,`bucket`
// ```
type SpacesBucketLogging struct {
	pulumi.CustomResourceState

	// The name of the bucket which will be logged.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// The region where the bucket resides.
	Region pulumi.StringOutput `pulumi:"region"`
	// The name of the bucket which will store the logs.
	TargetBucket pulumi.StringOutput `pulumi:"targetBucket"`
	// The prefix for the log files.
	TargetPrefix pulumi.StringOutput `pulumi:"targetPrefix"`
}

// NewSpacesBucketLogging registers a new resource with the given unique name, arguments, and options.
func NewSpacesBucketLogging(ctx *pulumi.Context,
	name string, args *SpacesBucketLoggingArgs, opts ...pulumi.ResourceOption) (*SpacesBucketLogging, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.TargetBucket == nil {
		return nil, errors.New("invalid value for required argument 'TargetBucket'")
	}
	if args.TargetPrefix == nil {
		return nil, errors.New("invalid value for required argument 'TargetPrefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SpacesBucketLogging
	err := ctx.RegisterResource("digitalocean:index/spacesBucketLogging:SpacesBucketLogging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSpacesBucketLogging gets an existing SpacesBucketLogging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSpacesBucketLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SpacesBucketLoggingState, opts ...pulumi.ResourceOption) (*SpacesBucketLogging, error) {
	var resource SpacesBucketLogging
	err := ctx.ReadResource("digitalocean:index/spacesBucketLogging:SpacesBucketLogging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SpacesBucketLogging resources.
type spacesBucketLoggingState struct {
	// The name of the bucket which will be logged.
	Bucket *string `pulumi:"bucket"`
	// The region where the bucket resides.
	Region *string `pulumi:"region"`
	// The name of the bucket which will store the logs.
	TargetBucket *string `pulumi:"targetBucket"`
	// The prefix for the log files.
	TargetPrefix *string `pulumi:"targetPrefix"`
}

type SpacesBucketLoggingState struct {
	// The name of the bucket which will be logged.
	Bucket pulumi.StringPtrInput
	// The region where the bucket resides.
	Region pulumi.StringPtrInput
	// The name of the bucket which will store the logs.
	TargetBucket pulumi.StringPtrInput
	// The prefix for the log files.
	TargetPrefix pulumi.StringPtrInput
}

func (SpacesBucketLoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*spacesBucketLoggingState)(nil)).Elem()
}

type spacesBucketLoggingArgs struct {
	// The name of the bucket which will be logged.
	Bucket string `pulumi:"bucket"`
	// The region where the bucket resides.
	Region string `pulumi:"region"`
	// The name of the bucket which will store the logs.
	TargetBucket string `pulumi:"targetBucket"`
	// The prefix for the log files.
	TargetPrefix string `pulumi:"targetPrefix"`
}

// The set of arguments for constructing a SpacesBucketLogging resource.
type SpacesBucketLoggingArgs struct {
	// The name of the bucket which will be logged.
	Bucket pulumi.StringInput
	// The region where the bucket resides.
	Region pulumi.StringInput
	// The name of the bucket which will store the logs.
	TargetBucket pulumi.StringInput
	// The prefix for the log files.
	TargetPrefix pulumi.StringInput
}

func (SpacesBucketLoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*spacesBucketLoggingArgs)(nil)).Elem()
}

type SpacesBucketLoggingInput interface {
	pulumi.Input

	ToSpacesBucketLoggingOutput() SpacesBucketLoggingOutput
	ToSpacesBucketLoggingOutputWithContext(ctx context.Context) SpacesBucketLoggingOutput
}

func (*SpacesBucketLogging) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLogging)(nil)).Elem()
}

func (i *SpacesBucketLogging) ToSpacesBucketLoggingOutput() SpacesBucketLoggingOutput {
	return i.ToSpacesBucketLoggingOutputWithContext(context.Background())
}

func (i *SpacesBucketLogging) ToSpacesBucketLoggingOutputWithContext(ctx context.Context) SpacesBucketLoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLoggingOutput)
}

// SpacesBucketLoggingArrayInput is an input type that accepts SpacesBucketLoggingArray and SpacesBucketLoggingArrayOutput values.
// You can construct a concrete instance of `SpacesBucketLoggingArrayInput` via:
//
//	SpacesBucketLoggingArray{ SpacesBucketLoggingArgs{...} }
type SpacesBucketLoggingArrayInput interface {
	pulumi.Input

	ToSpacesBucketLoggingArrayOutput() SpacesBucketLoggingArrayOutput
	ToSpacesBucketLoggingArrayOutputWithContext(context.Context) SpacesBucketLoggingArrayOutput
}

type SpacesBucketLoggingArray []SpacesBucketLoggingInput

func (SpacesBucketLoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpacesBucketLogging)(nil)).Elem()
}

func (i SpacesBucketLoggingArray) ToSpacesBucketLoggingArrayOutput() SpacesBucketLoggingArrayOutput {
	return i.ToSpacesBucketLoggingArrayOutputWithContext(context.Background())
}

func (i SpacesBucketLoggingArray) ToSpacesBucketLoggingArrayOutputWithContext(ctx context.Context) SpacesBucketLoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLoggingArrayOutput)
}

// SpacesBucketLoggingMapInput is an input type that accepts SpacesBucketLoggingMap and SpacesBucketLoggingMapOutput values.
// You can construct a concrete instance of `SpacesBucketLoggingMapInput` via:
//
//	SpacesBucketLoggingMap{ "key": SpacesBucketLoggingArgs{...} }
type SpacesBucketLoggingMapInput interface {
	pulumi.Input

	ToSpacesBucketLoggingMapOutput() SpacesBucketLoggingMapOutput
	ToSpacesBucketLoggingMapOutputWithContext(context.Context) SpacesBucketLoggingMapOutput
}

type SpacesBucketLoggingMap map[string]SpacesBucketLoggingInput

func (SpacesBucketLoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpacesBucketLogging)(nil)).Elem()
}

func (i SpacesBucketLoggingMap) ToSpacesBucketLoggingMapOutput() SpacesBucketLoggingMapOutput {
	return i.ToSpacesBucketLoggingMapOutputWithContext(context.Background())
}

func (i SpacesBucketLoggingMap) ToSpacesBucketLoggingMapOutputWithContext(ctx context.Context) SpacesBucketLoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpacesBucketLoggingMapOutput)
}

type SpacesBucketLoggingOutput struct{ *pulumi.OutputState }

func (SpacesBucketLoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SpacesBucketLogging)(nil)).Elem()
}

func (o SpacesBucketLoggingOutput) ToSpacesBucketLoggingOutput() SpacesBucketLoggingOutput {
	return o
}

func (o SpacesBucketLoggingOutput) ToSpacesBucketLoggingOutputWithContext(ctx context.Context) SpacesBucketLoggingOutput {
	return o
}

// The name of the bucket which will be logged.
func (o SpacesBucketLoggingOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *SpacesBucketLogging) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// The region where the bucket resides.
func (o SpacesBucketLoggingOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *SpacesBucketLogging) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The name of the bucket which will store the logs.
func (o SpacesBucketLoggingOutput) TargetBucket() pulumi.StringOutput {
	return o.ApplyT(func(v *SpacesBucketLogging) pulumi.StringOutput { return v.TargetBucket }).(pulumi.StringOutput)
}

// The prefix for the log files.
func (o SpacesBucketLoggingOutput) TargetPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v *SpacesBucketLogging) pulumi.StringOutput { return v.TargetPrefix }).(pulumi.StringOutput)
}

type SpacesBucketLoggingArrayOutput struct{ *pulumi.OutputState }

func (SpacesBucketLoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SpacesBucketLogging)(nil)).Elem()
}

func (o SpacesBucketLoggingArrayOutput) ToSpacesBucketLoggingArrayOutput() SpacesBucketLoggingArrayOutput {
	return o
}

func (o SpacesBucketLoggingArrayOutput) ToSpacesBucketLoggingArrayOutputWithContext(ctx context.Context) SpacesBucketLoggingArrayOutput {
	return o
}

func (o SpacesBucketLoggingArrayOutput) Index(i pulumi.IntInput) SpacesBucketLoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SpacesBucketLogging {
		return vs[0].([]*SpacesBucketLogging)[vs[1].(int)]
	}).(SpacesBucketLoggingOutput)
}

type SpacesBucketLoggingMapOutput struct{ *pulumi.OutputState }

func (SpacesBucketLoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SpacesBucketLogging)(nil)).Elem()
}

func (o SpacesBucketLoggingMapOutput) ToSpacesBucketLoggingMapOutput() SpacesBucketLoggingMapOutput {
	return o
}

func (o SpacesBucketLoggingMapOutput) ToSpacesBucketLoggingMapOutputWithContext(ctx context.Context) SpacesBucketLoggingMapOutput {
	return o
}

func (o SpacesBucketLoggingMapOutput) MapIndex(k pulumi.StringInput) SpacesBucketLoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SpacesBucketLogging {
		return vs[0].(map[string]*SpacesBucketLogging)[vs[1].(string)]
	}).(SpacesBucketLoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SpacesBucketLoggingInput)(nil)).Elem(), &SpacesBucketLogging{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpacesBucketLoggingArrayInput)(nil)).Elem(), SpacesBucketLoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpacesBucketLoggingMapInput)(nil)).Elem(), SpacesBucketLoggingMap{})
	pulumi.RegisterOutputType(SpacesBucketLoggingOutput{})
	pulumi.RegisterOutputType(SpacesBucketLoggingArrayOutput{})
	pulumi.RegisterOutputType(SpacesBucketLoggingMapOutput{})
}
