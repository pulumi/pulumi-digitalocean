// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "digitalocean:index/app:App":
		r = &App{}
	case "digitalocean:index/cdn:Cdn":
		r = &Cdn{}
	case "digitalocean:index/certificate:Certificate":
		r = &Certificate{}
	case "digitalocean:index/containerRegistry:ContainerRegistry":
		r = &ContainerRegistry{}
	case "digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials":
		r = &ContainerRegistryDockerCredentials{}
	case "digitalocean:index/customImage:CustomImage":
		r = &CustomImage{}
	case "digitalocean:index/databaseCluster:DatabaseCluster":
		r = &DatabaseCluster{}
	case "digitalocean:index/databaseConnectionPool:DatabaseConnectionPool":
		r = &DatabaseConnectionPool{}
	case "digitalocean:index/databaseReplica:DatabaseReplica":
		r = &DatabaseReplica{}
	case "digitalocean:index/dnsRecord:DnsRecord":
		r = &DnsRecord{}
	case "digitalocean:index/domain:Domain":
		r = &Domain{}
	case "digitalocean:index/droplet:Droplet":
		r = &Droplet{}
	case "digitalocean:index/dropletSnapshot:DropletSnapshot":
		r = &DropletSnapshot{}
	case "digitalocean:index/firewall:Firewall":
		r = &Firewall{}
	case "digitalocean:index/floatingIp:FloatingIp":
		r = &FloatingIp{}
	case "digitalocean:index/floatingIpAssignment:FloatingIpAssignment":
		r = &FloatingIpAssignment{}
	case "digitalocean:index/kubernetesCluster:KubernetesCluster":
		r = &KubernetesCluster{}
	case "digitalocean:index/kubernetesNodePool:KubernetesNodePool":
		r = &KubernetesNodePool{}
	case "digitalocean:index/loadBalancer:LoadBalancer":
		r = &LoadBalancer{}
	case "digitalocean:index/project:Project":
		r = &Project{}
	case "digitalocean:index/projectResources:ProjectResources":
		r = &ProjectResources{}
	case "digitalocean:index/spacesBucket:SpacesBucket":
		r = &SpacesBucket{}
	case "digitalocean:index/spacesBucketObject:SpacesBucketObject":
		r = &SpacesBucketObject{}
	case "digitalocean:index/sshKey:SshKey":
		r = &SshKey{}
	case "digitalocean:index/tag:Tag":
		r = &Tag{}
	case "digitalocean:index/volume:Volume":
		r = &Volume{}
	case "digitalocean:index/volumeAttachment:VolumeAttachment":
		r = &VolumeAttachment{}
	case "digitalocean:index/volumeSnapshot:VolumeSnapshot":
		r = &VolumeSnapshot{}
	case "digitalocean:index/vpc:Vpc":
		r = &Vpc{}
	case "digitalocean:index:DatabaseDb":
		r = &DatabaseDb{}
	case "digitalocean:index:DatabaseFirewall":
		r = &DatabaseFirewall{}
	case "digitalocean:index:DatabaseUser":
		r = &DatabaseUser{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:digitalocean" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/app",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/cdn",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/certificate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/containerRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/containerRegistryDockerCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/customImage",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/databaseCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/databaseConnectionPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/databaseReplica",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/dnsRecord",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/droplet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/dropletSnapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/firewall",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/floatingIp",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/floatingIpAssignment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/kubernetesCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/kubernetesNodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/loadBalancer",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/project",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/projectResources",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/spacesBucket",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/spacesBucketObject",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/sshKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/tag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/volume",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/volumeAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/volumeSnapshot",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"digitalocean",
		"index/vpc",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"digitalocean",
		&pkg{version},
	)
}
