// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GenaiFunction struct {
	pulumi.CustomResourceState

	// The name of the GenAI resource.
	AgentId pulumi.StringOutput `pulumi:"agentId"`
	// The region where the GenAI resource will be created.
	Description pulumi.StringOutput `pulumi:"description"`
	// The model to use for the GenAI resource.
	FaasName pulumi.StringPtrOutput `pulumi:"faasName"`
	// The current status of the GenAI resource.
	FaasNamespace pulumi.StringOutput `pulumi:"faasNamespace"`
	// The creation timestamp of the GenAI resource.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The unique identifier of the GenAI function.
	FunctionUuid pulumi.StringOutput `pulumi:"functionUuid"`
	// The input schema of the GenAI resource.
	InputSchema pulumi.StringOutput `pulumi:"inputSchema"`
	// The output schema of the GenAI resource.
	OutputSchema pulumi.StringPtrOutput `pulumi:"outputSchema"`
}

// NewGenaiFunction registers a new resource with the given unique name, arguments, and options.
func NewGenaiFunction(ctx *pulumi.Context,
	name string, args *GenaiFunctionArgs, opts ...pulumi.ResourceOption) (*GenaiFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgentId == nil {
		return nil, errors.New("invalid value for required argument 'AgentId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.FaasNamespace == nil {
		return nil, errors.New("invalid value for required argument 'FaasNamespace'")
	}
	if args.FunctionName == nil {
		return nil, errors.New("invalid value for required argument 'FunctionName'")
	}
	if args.InputSchema == nil {
		return nil, errors.New("invalid value for required argument 'InputSchema'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenaiFunction
	err := ctx.RegisterResource("digitalocean:index/genaiFunction:GenaiFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenaiFunction gets an existing GenaiFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenaiFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenaiFunctionState, opts ...pulumi.ResourceOption) (*GenaiFunction, error) {
	var resource GenaiFunction
	err := ctx.ReadResource("digitalocean:index/genaiFunction:GenaiFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenaiFunction resources.
type genaiFunctionState struct {
	// The name of the GenAI resource.
	AgentId *string `pulumi:"agentId"`
	// The region where the GenAI resource will be created.
	Description *string `pulumi:"description"`
	// The model to use for the GenAI resource.
	FaasName *string `pulumi:"faasName"`
	// The current status of the GenAI resource.
	FaasNamespace *string `pulumi:"faasNamespace"`
	// The creation timestamp of the GenAI resource.
	FunctionName *string `pulumi:"functionName"`
	// The unique identifier of the GenAI function.
	FunctionUuid *string `pulumi:"functionUuid"`
	// The input schema of the GenAI resource.
	InputSchema *string `pulumi:"inputSchema"`
	// The output schema of the GenAI resource.
	OutputSchema *string `pulumi:"outputSchema"`
}

type GenaiFunctionState struct {
	// The name of the GenAI resource.
	AgentId pulumi.StringPtrInput
	// The region where the GenAI resource will be created.
	Description pulumi.StringPtrInput
	// The model to use for the GenAI resource.
	FaasName pulumi.StringPtrInput
	// The current status of the GenAI resource.
	FaasNamespace pulumi.StringPtrInput
	// The creation timestamp of the GenAI resource.
	FunctionName pulumi.StringPtrInput
	// The unique identifier of the GenAI function.
	FunctionUuid pulumi.StringPtrInput
	// The input schema of the GenAI resource.
	InputSchema pulumi.StringPtrInput
	// The output schema of the GenAI resource.
	OutputSchema pulumi.StringPtrInput
}

func (GenaiFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiFunctionState)(nil)).Elem()
}

type genaiFunctionArgs struct {
	// The name of the GenAI resource.
	AgentId string `pulumi:"agentId"`
	// The region where the GenAI resource will be created.
	Description string `pulumi:"description"`
	// The model to use for the GenAI resource.
	FaasName *string `pulumi:"faasName"`
	// The current status of the GenAI resource.
	FaasNamespace string `pulumi:"faasNamespace"`
	// The creation timestamp of the GenAI resource.
	FunctionName string `pulumi:"functionName"`
	// The input schema of the GenAI resource.
	InputSchema string `pulumi:"inputSchema"`
	// The output schema of the GenAI resource.
	OutputSchema *string `pulumi:"outputSchema"`
}

// The set of arguments for constructing a GenaiFunction resource.
type GenaiFunctionArgs struct {
	// The name of the GenAI resource.
	AgentId pulumi.StringInput
	// The region where the GenAI resource will be created.
	Description pulumi.StringInput
	// The model to use for the GenAI resource.
	FaasName pulumi.StringPtrInput
	// The current status of the GenAI resource.
	FaasNamespace pulumi.StringInput
	// The creation timestamp of the GenAI resource.
	FunctionName pulumi.StringInput
	// The input schema of the GenAI resource.
	InputSchema pulumi.StringInput
	// The output schema of the GenAI resource.
	OutputSchema pulumi.StringPtrInput
}

func (GenaiFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiFunctionArgs)(nil)).Elem()
}

type GenaiFunctionInput interface {
	pulumi.Input

	ToGenaiFunctionOutput() GenaiFunctionOutput
	ToGenaiFunctionOutputWithContext(ctx context.Context) GenaiFunctionOutput
}

func (*GenaiFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiFunction)(nil)).Elem()
}

func (i *GenaiFunction) ToGenaiFunctionOutput() GenaiFunctionOutput {
	return i.ToGenaiFunctionOutputWithContext(context.Background())
}

func (i *GenaiFunction) ToGenaiFunctionOutputWithContext(ctx context.Context) GenaiFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiFunctionOutput)
}

// GenaiFunctionArrayInput is an input type that accepts GenaiFunctionArray and GenaiFunctionArrayOutput values.
// You can construct a concrete instance of `GenaiFunctionArrayInput` via:
//
//	GenaiFunctionArray{ GenaiFunctionArgs{...} }
type GenaiFunctionArrayInput interface {
	pulumi.Input

	ToGenaiFunctionArrayOutput() GenaiFunctionArrayOutput
	ToGenaiFunctionArrayOutputWithContext(context.Context) GenaiFunctionArrayOutput
}

type GenaiFunctionArray []GenaiFunctionInput

func (GenaiFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiFunction)(nil)).Elem()
}

func (i GenaiFunctionArray) ToGenaiFunctionArrayOutput() GenaiFunctionArrayOutput {
	return i.ToGenaiFunctionArrayOutputWithContext(context.Background())
}

func (i GenaiFunctionArray) ToGenaiFunctionArrayOutputWithContext(ctx context.Context) GenaiFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiFunctionArrayOutput)
}

// GenaiFunctionMapInput is an input type that accepts GenaiFunctionMap and GenaiFunctionMapOutput values.
// You can construct a concrete instance of `GenaiFunctionMapInput` via:
//
//	GenaiFunctionMap{ "key": GenaiFunctionArgs{...} }
type GenaiFunctionMapInput interface {
	pulumi.Input

	ToGenaiFunctionMapOutput() GenaiFunctionMapOutput
	ToGenaiFunctionMapOutputWithContext(context.Context) GenaiFunctionMapOutput
}

type GenaiFunctionMap map[string]GenaiFunctionInput

func (GenaiFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiFunction)(nil)).Elem()
}

func (i GenaiFunctionMap) ToGenaiFunctionMapOutput() GenaiFunctionMapOutput {
	return i.ToGenaiFunctionMapOutputWithContext(context.Background())
}

func (i GenaiFunctionMap) ToGenaiFunctionMapOutputWithContext(ctx context.Context) GenaiFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiFunctionMapOutput)
}

type GenaiFunctionOutput struct{ *pulumi.OutputState }

func (GenaiFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiFunction)(nil)).Elem()
}

func (o GenaiFunctionOutput) ToGenaiFunctionOutput() GenaiFunctionOutput {
	return o
}

func (o GenaiFunctionOutput) ToGenaiFunctionOutputWithContext(ctx context.Context) GenaiFunctionOutput {
	return o
}

// The name of the GenAI resource.
func (o GenaiFunctionOutput) AgentId() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.AgentId }).(pulumi.StringOutput)
}

// The region where the GenAI resource will be created.
func (o GenaiFunctionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The model to use for the GenAI resource.
func (o GenaiFunctionOutput) FaasName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringPtrOutput { return v.FaasName }).(pulumi.StringPtrOutput)
}

// The current status of the GenAI resource.
func (o GenaiFunctionOutput) FaasNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.FaasNamespace }).(pulumi.StringOutput)
}

// The creation timestamp of the GenAI resource.
func (o GenaiFunctionOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The unique identifier of the GenAI function.
func (o GenaiFunctionOutput) FunctionUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.FunctionUuid }).(pulumi.StringOutput)
}

// The input schema of the GenAI resource.
func (o GenaiFunctionOutput) InputSchema() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringOutput { return v.InputSchema }).(pulumi.StringOutput)
}

// The output schema of the GenAI resource.
func (o GenaiFunctionOutput) OutputSchema() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiFunction) pulumi.StringPtrOutput { return v.OutputSchema }).(pulumi.StringPtrOutput)
}

type GenaiFunctionArrayOutput struct{ *pulumi.OutputState }

func (GenaiFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiFunction)(nil)).Elem()
}

func (o GenaiFunctionArrayOutput) ToGenaiFunctionArrayOutput() GenaiFunctionArrayOutput {
	return o
}

func (o GenaiFunctionArrayOutput) ToGenaiFunctionArrayOutputWithContext(ctx context.Context) GenaiFunctionArrayOutput {
	return o
}

func (o GenaiFunctionArrayOutput) Index(i pulumi.IntInput) GenaiFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenaiFunction {
		return vs[0].([]*GenaiFunction)[vs[1].(int)]
	}).(GenaiFunctionOutput)
}

type GenaiFunctionMapOutput struct{ *pulumi.OutputState }

func (GenaiFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiFunction)(nil)).Elem()
}

func (o GenaiFunctionMapOutput) ToGenaiFunctionMapOutput() GenaiFunctionMapOutput {
	return o
}

func (o GenaiFunctionMapOutput) ToGenaiFunctionMapOutputWithContext(ctx context.Context) GenaiFunctionMapOutput {
	return o
}

func (o GenaiFunctionMapOutput) MapIndex(k pulumi.StringInput) GenaiFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenaiFunction {
		return vs[0].(map[string]*GenaiFunction)[vs[1].(string)]
	}).(GenaiFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiFunctionInput)(nil)).Elem(), &GenaiFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiFunctionArrayInput)(nil)).Elem(), GenaiFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiFunctionMapInput)(nil)).Elem(), GenaiFunctionMap{})
	pulumi.RegisterOutputType(GenaiFunctionOutput{})
	pulumi.RegisterOutputType(GenaiFunctionArrayOutput{})
	pulumi.RegisterOutputType(GenaiFunctionMapOutput{})
}
