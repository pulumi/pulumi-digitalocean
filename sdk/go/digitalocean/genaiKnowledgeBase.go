// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GenaiKnowledgeBase struct {
	pulumi.CustomResourceState

	// The time when the knowledge base was added to the agent.
	AddedToAgentAt pulumi.StringPtrOutput `pulumi:"addedToAgentAt"`
	// The time when the knowledge base was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
	DatabaseId pulumi.StringPtrOutput `pulumi:"databaseId"`
	// Data sources for the knowledge base
	Datasources GenaiKnowledgeBaseDatasourceTypeArrayOutput `pulumi:"datasources"`
	// The unique identifier of the embedding model
	EmbeddingModelUuid pulumi.StringOutput `pulumi:"embeddingModelUuid"`
	// Indicates whether the knowledge base is public or private.
	IsPublic pulumi.BoolPtrOutput `pulumi:"isPublic"`
	// The last indexing job for the knowledge base.
	LastIndexingJobs GenaiKnowledgeBaseLastIndexingJobArrayOutput `pulumi:"lastIndexingJobs"`
	// The name of the knowledge base.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique identifier of the project to which the knowledge base belongs.
	ProjectId pulumi.StringOutput      `pulumi:"projectId"`
	Region    pulumi.StringOutput      `pulumi:"region"`
	Tags      pulumi.StringArrayOutput `pulumi:"tags"`
	// The unique identifier of the VPC to which the knowledge base belongs.
	VpcUuid pulumi.StringPtrOutput `pulumi:"vpcUuid"`
}

// NewGenaiKnowledgeBase registers a new resource with the given unique name, arguments, and options.
func NewGenaiKnowledgeBase(ctx *pulumi.Context,
	name string, args *GenaiKnowledgeBaseArgs, opts ...pulumi.ResourceOption) (*GenaiKnowledgeBase, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datasources == nil {
		return nil, errors.New("invalid value for required argument 'Datasources'")
	}
	if args.EmbeddingModelUuid == nil {
		return nil, errors.New("invalid value for required argument 'EmbeddingModelUuid'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenaiKnowledgeBase
	err := ctx.RegisterResource("digitalocean:index/genaiKnowledgeBase:GenaiKnowledgeBase", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenaiKnowledgeBase gets an existing GenaiKnowledgeBase resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenaiKnowledgeBase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenaiKnowledgeBaseState, opts ...pulumi.ResourceOption) (*GenaiKnowledgeBase, error) {
	var resource GenaiKnowledgeBase
	err := ctx.ReadResource("digitalocean:index/genaiKnowledgeBase:GenaiKnowledgeBase", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenaiKnowledgeBase resources.
type genaiKnowledgeBaseState struct {
	// The time when the knowledge base was added to the agent.
	AddedToAgentAt *string `pulumi:"addedToAgentAt"`
	// The time when the knowledge base was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
	DatabaseId *string `pulumi:"databaseId"`
	// Data sources for the knowledge base
	Datasources []GenaiKnowledgeBaseDatasourceType `pulumi:"datasources"`
	// The unique identifier of the embedding model
	EmbeddingModelUuid *string `pulumi:"embeddingModelUuid"`
	// Indicates whether the knowledge base is public or private.
	IsPublic *bool `pulumi:"isPublic"`
	// The last indexing job for the knowledge base.
	LastIndexingJobs []GenaiKnowledgeBaseLastIndexingJob `pulumi:"lastIndexingJobs"`
	// The name of the knowledge base.
	Name *string `pulumi:"name"`
	// The unique identifier of the project to which the knowledge base belongs.
	ProjectId *string  `pulumi:"projectId"`
	Region    *string  `pulumi:"region"`
	Tags      []string `pulumi:"tags"`
	// The unique identifier of the VPC to which the knowledge base belongs.
	VpcUuid *string `pulumi:"vpcUuid"`
}

type GenaiKnowledgeBaseState struct {
	// The time when the knowledge base was added to the agent.
	AddedToAgentAt pulumi.StringPtrInput
	// The time when the knowledge base was created.
	CreatedAt pulumi.StringPtrInput
	// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
	DatabaseId pulumi.StringPtrInput
	// Data sources for the knowledge base
	Datasources GenaiKnowledgeBaseDatasourceTypeArrayInput
	// The unique identifier of the embedding model
	EmbeddingModelUuid pulumi.StringPtrInput
	// Indicates whether the knowledge base is public or private.
	IsPublic pulumi.BoolPtrInput
	// The last indexing job for the knowledge base.
	LastIndexingJobs GenaiKnowledgeBaseLastIndexingJobArrayInput
	// The name of the knowledge base.
	Name pulumi.StringPtrInput
	// The unique identifier of the project to which the knowledge base belongs.
	ProjectId pulumi.StringPtrInput
	Region    pulumi.StringPtrInput
	Tags      pulumi.StringArrayInput
	// The unique identifier of the VPC to which the knowledge base belongs.
	VpcUuid pulumi.StringPtrInput
}

func (GenaiKnowledgeBaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiKnowledgeBaseState)(nil)).Elem()
}

type genaiKnowledgeBaseArgs struct {
	// The time when the knowledge base was added to the agent.
	AddedToAgentAt *string `pulumi:"addedToAgentAt"`
	// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
	DatabaseId *string `pulumi:"databaseId"`
	// Data sources for the knowledge base
	Datasources []GenaiKnowledgeBaseDatasourceType `pulumi:"datasources"`
	// The unique identifier of the embedding model
	EmbeddingModelUuid string `pulumi:"embeddingModelUuid"`
	// Indicates whether the knowledge base is public or private.
	IsPublic *bool `pulumi:"isPublic"`
	// The last indexing job for the knowledge base.
	LastIndexingJobs []GenaiKnowledgeBaseLastIndexingJob `pulumi:"lastIndexingJobs"`
	// The name of the knowledge base.
	Name *string `pulumi:"name"`
	// The unique identifier of the project to which the knowledge base belongs.
	ProjectId string   `pulumi:"projectId"`
	Region    string   `pulumi:"region"`
	Tags      []string `pulumi:"tags"`
	// The unique identifier of the VPC to which the knowledge base belongs.
	VpcUuid *string `pulumi:"vpcUuid"`
}

// The set of arguments for constructing a GenaiKnowledgeBase resource.
type GenaiKnowledgeBaseArgs struct {
	// The time when the knowledge base was added to the agent.
	AddedToAgentAt pulumi.StringPtrInput
	// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
	DatabaseId pulumi.StringPtrInput
	// Data sources for the knowledge base
	Datasources GenaiKnowledgeBaseDatasourceTypeArrayInput
	// The unique identifier of the embedding model
	EmbeddingModelUuid pulumi.StringInput
	// Indicates whether the knowledge base is public or private.
	IsPublic pulumi.BoolPtrInput
	// The last indexing job for the knowledge base.
	LastIndexingJobs GenaiKnowledgeBaseLastIndexingJobArrayInput
	// The name of the knowledge base.
	Name pulumi.StringPtrInput
	// The unique identifier of the project to which the knowledge base belongs.
	ProjectId pulumi.StringInput
	Region    pulumi.StringInput
	Tags      pulumi.StringArrayInput
	// The unique identifier of the VPC to which the knowledge base belongs.
	VpcUuid pulumi.StringPtrInput
}

func (GenaiKnowledgeBaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiKnowledgeBaseArgs)(nil)).Elem()
}

type GenaiKnowledgeBaseInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseOutput() GenaiKnowledgeBaseOutput
	ToGenaiKnowledgeBaseOutputWithContext(ctx context.Context) GenaiKnowledgeBaseOutput
}

func (*GenaiKnowledgeBase) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiKnowledgeBase)(nil)).Elem()
}

func (i *GenaiKnowledgeBase) ToGenaiKnowledgeBaseOutput() GenaiKnowledgeBaseOutput {
	return i.ToGenaiKnowledgeBaseOutputWithContext(context.Background())
}

func (i *GenaiKnowledgeBase) ToGenaiKnowledgeBaseOutputWithContext(ctx context.Context) GenaiKnowledgeBaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseOutput)
}

// GenaiKnowledgeBaseArrayInput is an input type that accepts GenaiKnowledgeBaseArray and GenaiKnowledgeBaseArrayOutput values.
// You can construct a concrete instance of `GenaiKnowledgeBaseArrayInput` via:
//
//	GenaiKnowledgeBaseArray{ GenaiKnowledgeBaseArgs{...} }
type GenaiKnowledgeBaseArrayInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseArrayOutput() GenaiKnowledgeBaseArrayOutput
	ToGenaiKnowledgeBaseArrayOutputWithContext(context.Context) GenaiKnowledgeBaseArrayOutput
}

type GenaiKnowledgeBaseArray []GenaiKnowledgeBaseInput

func (GenaiKnowledgeBaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiKnowledgeBase)(nil)).Elem()
}

func (i GenaiKnowledgeBaseArray) ToGenaiKnowledgeBaseArrayOutput() GenaiKnowledgeBaseArrayOutput {
	return i.ToGenaiKnowledgeBaseArrayOutputWithContext(context.Background())
}

func (i GenaiKnowledgeBaseArray) ToGenaiKnowledgeBaseArrayOutputWithContext(ctx context.Context) GenaiKnowledgeBaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseArrayOutput)
}

// GenaiKnowledgeBaseMapInput is an input type that accepts GenaiKnowledgeBaseMap and GenaiKnowledgeBaseMapOutput values.
// You can construct a concrete instance of `GenaiKnowledgeBaseMapInput` via:
//
//	GenaiKnowledgeBaseMap{ "key": GenaiKnowledgeBaseArgs{...} }
type GenaiKnowledgeBaseMapInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseMapOutput() GenaiKnowledgeBaseMapOutput
	ToGenaiKnowledgeBaseMapOutputWithContext(context.Context) GenaiKnowledgeBaseMapOutput
}

type GenaiKnowledgeBaseMap map[string]GenaiKnowledgeBaseInput

func (GenaiKnowledgeBaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiKnowledgeBase)(nil)).Elem()
}

func (i GenaiKnowledgeBaseMap) ToGenaiKnowledgeBaseMapOutput() GenaiKnowledgeBaseMapOutput {
	return i.ToGenaiKnowledgeBaseMapOutputWithContext(context.Background())
}

func (i GenaiKnowledgeBaseMap) ToGenaiKnowledgeBaseMapOutputWithContext(ctx context.Context) GenaiKnowledgeBaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseMapOutput)
}

type GenaiKnowledgeBaseOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiKnowledgeBase)(nil)).Elem()
}

func (o GenaiKnowledgeBaseOutput) ToGenaiKnowledgeBaseOutput() GenaiKnowledgeBaseOutput {
	return o
}

func (o GenaiKnowledgeBaseOutput) ToGenaiKnowledgeBaseOutputWithContext(ctx context.Context) GenaiKnowledgeBaseOutput {
	return o
}

// The time when the knowledge base was added to the agent.
func (o GenaiKnowledgeBaseOutput) AddedToAgentAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringPtrOutput { return v.AddedToAgentAt }).(pulumi.StringPtrOutput)
}

// The time when the knowledge base was created.
func (o GenaiKnowledgeBaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
func (o GenaiKnowledgeBaseOutput) DatabaseId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringPtrOutput { return v.DatabaseId }).(pulumi.StringPtrOutput)
}

// Data sources for the knowledge base
func (o GenaiKnowledgeBaseOutput) Datasources() GenaiKnowledgeBaseDatasourceTypeArrayOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) GenaiKnowledgeBaseDatasourceTypeArrayOutput { return v.Datasources }).(GenaiKnowledgeBaseDatasourceTypeArrayOutput)
}

// The unique identifier of the embedding model
func (o GenaiKnowledgeBaseOutput) EmbeddingModelUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringOutput { return v.EmbeddingModelUuid }).(pulumi.StringOutput)
}

// Indicates whether the knowledge base is public or private.
func (o GenaiKnowledgeBaseOutput) IsPublic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.BoolPtrOutput { return v.IsPublic }).(pulumi.BoolPtrOutput)
}

// The last indexing job for the knowledge base.
func (o GenaiKnowledgeBaseOutput) LastIndexingJobs() GenaiKnowledgeBaseLastIndexingJobArrayOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) GenaiKnowledgeBaseLastIndexingJobArrayOutput { return v.LastIndexingJobs }).(GenaiKnowledgeBaseLastIndexingJobArrayOutput)
}

// The name of the knowledge base.
func (o GenaiKnowledgeBaseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique identifier of the project to which the knowledge base belongs.
func (o GenaiKnowledgeBaseOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GenaiKnowledgeBaseOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o GenaiKnowledgeBaseOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The unique identifier of the VPC to which the knowledge base belongs.
func (o GenaiKnowledgeBaseOutput) VpcUuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBase) pulumi.StringPtrOutput { return v.VpcUuid }).(pulumi.StringPtrOutput)
}

type GenaiKnowledgeBaseArrayOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiKnowledgeBase)(nil)).Elem()
}

func (o GenaiKnowledgeBaseArrayOutput) ToGenaiKnowledgeBaseArrayOutput() GenaiKnowledgeBaseArrayOutput {
	return o
}

func (o GenaiKnowledgeBaseArrayOutput) ToGenaiKnowledgeBaseArrayOutputWithContext(ctx context.Context) GenaiKnowledgeBaseArrayOutput {
	return o
}

func (o GenaiKnowledgeBaseArrayOutput) Index(i pulumi.IntInput) GenaiKnowledgeBaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenaiKnowledgeBase {
		return vs[0].([]*GenaiKnowledgeBase)[vs[1].(int)]
	}).(GenaiKnowledgeBaseOutput)
}

type GenaiKnowledgeBaseMapOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiKnowledgeBase)(nil)).Elem()
}

func (o GenaiKnowledgeBaseMapOutput) ToGenaiKnowledgeBaseMapOutput() GenaiKnowledgeBaseMapOutput {
	return o
}

func (o GenaiKnowledgeBaseMapOutput) ToGenaiKnowledgeBaseMapOutputWithContext(ctx context.Context) GenaiKnowledgeBaseMapOutput {
	return o
}

func (o GenaiKnowledgeBaseMapOutput) MapIndex(k pulumi.StringInput) GenaiKnowledgeBaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenaiKnowledgeBase {
		return vs[0].(map[string]*GenaiKnowledgeBase)[vs[1].(string)]
	}).(GenaiKnowledgeBaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseInput)(nil)).Elem(), &GenaiKnowledgeBase{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseArrayInput)(nil)).Elem(), GenaiKnowledgeBaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseMapInput)(nil)).Elem(), GenaiKnowledgeBaseMap{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseOutput{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseArrayOutput{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseMapOutput{})
}
