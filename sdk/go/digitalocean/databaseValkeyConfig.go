// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a virtual resource that can be used to change advanced configuration
// options for a DigitalOcean managed Valkey database cluster.
//
// > **Note** Valkey configurations are only removed from state when destroyed. The remote configuration is not unset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleDatabaseCluster, err := digitalocean.NewDatabaseCluster(ctx, "example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-valkey-cluster"),
//				Engine:    pulumi.String("valkey"),
//				Version:   pulumi.String("8"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabaseValkeyConfig(ctx, "example", &digitalocean.DatabaseValkeyConfigArgs{
//				ClusterId:            exampleDatabaseCluster.ID(),
//				NotifyKeyspaceEvents: pulumi.String("KEA"),
//				Timeout:              pulumi.Int(90),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Valkey database cluster's configuration can be imported using the `id` the parent cluster, e.g.
//
// ```sh
// $ pulumi import digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig example 245bcfd0-7f31-4ce6-a2bc-475a116cca97
// ```
type DatabaseValkeyConfig struct {
	pulumi.CustomResourceState

	// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
	AclChannelsDefault pulumi.StringOutput `pulumi:"aclChannelsDefault"`
	// The ID of the target Valkey cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
	// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
	// valkeyPersistence is set to off.
	FrequentSnapshots pulumi.BoolOutput `pulumi:"frequentSnapshots"`
	// The Valkey IO thread count.
	IoThreads pulumi.IntOutput `pulumi:"ioThreads"`
	// The LFU maxmemory policy counter decay time in minutes.
	LfuDecayTime pulumi.IntOutput `pulumi:"lfuDecayTime"`
	// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
	LfuLogFactor pulumi.IntOutput `pulumi:"lfuLogFactor"`
	// The `notify-keyspace-events` option. Requires at least `K` or `E`.
	NotifyKeyspaceEvents pulumi.StringOutput `pulumi:"notifyKeyspaceEvents"`
	// The number of Valkey databases. Changing this will cause a restart of Valkey service.
	NumberOfDatabases pulumi.IntOutput `pulumi:"numberOfDatabases"`
	// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	Persistence pulumi.StringOutput `pulumi:"persistence"`
	// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	PubsubClientOutputBufferLimit pulumi.IntOutput `pulumi:"pubsubClientOutputBufferLimit"`
	// A boolean indicating whether to require SSL to access Valkey.
	Ssl pulumi.BoolOutput `pulumi:"ssl"`
	// The Valkey idle connection timeout in seconds.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
	// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
	// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
	ValkeyActiveExpireEffort pulumi.IntOutput `pulumi:"valkeyActiveExpireEffort"`
}

// NewDatabaseValkeyConfig registers a new resource with the given unique name, arguments, and options.
func NewDatabaseValkeyConfig(ctx *pulumi.Context,
	name string, args *DatabaseValkeyConfigArgs, opts ...pulumi.ResourceOption) (*DatabaseValkeyConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseValkeyConfig
	err := ctx.RegisterResource("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseValkeyConfig gets an existing DatabaseValkeyConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseValkeyConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseValkeyConfigState, opts ...pulumi.ResourceOption) (*DatabaseValkeyConfig, error) {
	var resource DatabaseValkeyConfig
	err := ctx.ReadResource("digitalocean:index/databaseValkeyConfig:DatabaseValkeyConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseValkeyConfig resources.
type databaseValkeyConfigState struct {
	// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
	AclChannelsDefault *string `pulumi:"aclChannelsDefault"`
	// The ID of the target Valkey cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
	// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
	// valkeyPersistence is set to off.
	FrequentSnapshots *bool `pulumi:"frequentSnapshots"`
	// The Valkey IO thread count.
	IoThreads *int `pulumi:"ioThreads"`
	// The LFU maxmemory policy counter decay time in minutes.
	LfuDecayTime *int `pulumi:"lfuDecayTime"`
	// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
	LfuLogFactor *int `pulumi:"lfuLogFactor"`
	// The `notify-keyspace-events` option. Requires at least `K` or `E`.
	NotifyKeyspaceEvents *string `pulumi:"notifyKeyspaceEvents"`
	// The number of Valkey databases. Changing this will cause a restart of Valkey service.
	NumberOfDatabases *int `pulumi:"numberOfDatabases"`
	// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	Persistence *string `pulumi:"persistence"`
	// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	PubsubClientOutputBufferLimit *int `pulumi:"pubsubClientOutputBufferLimit"`
	// A boolean indicating whether to require SSL to access Valkey.
	Ssl *bool `pulumi:"ssl"`
	// The Valkey idle connection timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
	// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
	// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
	ValkeyActiveExpireEffort *int `pulumi:"valkeyActiveExpireEffort"`
}

type DatabaseValkeyConfigState struct {
	// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
	AclChannelsDefault pulumi.StringPtrInput
	// The ID of the target Valkey cluster.
	ClusterId pulumi.StringPtrInput
	// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
	// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
	// valkeyPersistence is set to off.
	FrequentSnapshots pulumi.BoolPtrInput
	// The Valkey IO thread count.
	IoThreads pulumi.IntPtrInput
	// The LFU maxmemory policy counter decay time in minutes.
	LfuDecayTime pulumi.IntPtrInput
	// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
	LfuLogFactor pulumi.IntPtrInput
	// The `notify-keyspace-events` option. Requires at least `K` or `E`.
	NotifyKeyspaceEvents pulumi.StringPtrInput
	// The number of Valkey databases. Changing this will cause a restart of Valkey service.
	NumberOfDatabases pulumi.IntPtrInput
	// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	Persistence pulumi.StringPtrInput
	// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	PubsubClientOutputBufferLimit pulumi.IntPtrInput
	// A boolean indicating whether to require SSL to access Valkey.
	Ssl pulumi.BoolPtrInput
	// The Valkey idle connection timeout in seconds.
	Timeout pulumi.IntPtrInput
	// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
	// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
	// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
	ValkeyActiveExpireEffort pulumi.IntPtrInput
}

func (DatabaseValkeyConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseValkeyConfigState)(nil)).Elem()
}

type databaseValkeyConfigArgs struct {
	// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
	AclChannelsDefault *string `pulumi:"aclChannelsDefault"`
	// The ID of the target Valkey cluster.
	ClusterId string `pulumi:"clusterId"`
	// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
	// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
	// valkeyPersistence is set to off.
	FrequentSnapshots *bool `pulumi:"frequentSnapshots"`
	// The Valkey IO thread count.
	IoThreads *int `pulumi:"ioThreads"`
	// The LFU maxmemory policy counter decay time in minutes.
	LfuDecayTime *int `pulumi:"lfuDecayTime"`
	// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
	LfuLogFactor *int `pulumi:"lfuLogFactor"`
	// The `notify-keyspace-events` option. Requires at least `K` or `E`.
	NotifyKeyspaceEvents *string `pulumi:"notifyKeyspaceEvents"`
	// The number of Valkey databases. Changing this will cause a restart of Valkey service.
	NumberOfDatabases *int `pulumi:"numberOfDatabases"`
	// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	Persistence *string `pulumi:"persistence"`
	// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	PubsubClientOutputBufferLimit *int `pulumi:"pubsubClientOutputBufferLimit"`
	// A boolean indicating whether to require SSL to access Valkey.
	Ssl *bool `pulumi:"ssl"`
	// The Valkey idle connection timeout in seconds.
	Timeout *int `pulumi:"timeout"`
	// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
	// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
	// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
	ValkeyActiveExpireEffort *int `pulumi:"valkeyActiveExpireEffort"`
}

// The set of arguments for constructing a DatabaseValkeyConfig resource.
type DatabaseValkeyConfigArgs struct {
	// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
	AclChannelsDefault pulumi.StringPtrInput
	// The ID of the target Valkey cluster.
	ClusterId pulumi.StringInput
	// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
	// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
	// valkeyPersistence is set to off.
	FrequentSnapshots pulumi.BoolPtrInput
	// The Valkey IO thread count.
	IoThreads pulumi.IntPtrInput
	// The LFU maxmemory policy counter decay time in minutes.
	LfuDecayTime pulumi.IntPtrInput
	// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
	LfuLogFactor pulumi.IntPtrInput
	// The `notify-keyspace-events` option. Requires at least `K` or `E`.
	NotifyKeyspaceEvents pulumi.StringPtrInput
	// The number of Valkey databases. Changing this will cause a restart of Valkey service.
	NumberOfDatabases pulumi.IntPtrInput
	// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
	Persistence pulumi.StringPtrInput
	// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
	PubsubClientOutputBufferLimit pulumi.IntPtrInput
	// A boolean indicating whether to require SSL to access Valkey.
	Ssl pulumi.BoolPtrInput
	// The Valkey idle connection timeout in seconds.
	Timeout pulumi.IntPtrInput
	// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
	// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
	// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
	ValkeyActiveExpireEffort pulumi.IntPtrInput
}

func (DatabaseValkeyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseValkeyConfigArgs)(nil)).Elem()
}

type DatabaseValkeyConfigInput interface {
	pulumi.Input

	ToDatabaseValkeyConfigOutput() DatabaseValkeyConfigOutput
	ToDatabaseValkeyConfigOutputWithContext(ctx context.Context) DatabaseValkeyConfigOutput
}

func (*DatabaseValkeyConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseValkeyConfig)(nil)).Elem()
}

func (i *DatabaseValkeyConfig) ToDatabaseValkeyConfigOutput() DatabaseValkeyConfigOutput {
	return i.ToDatabaseValkeyConfigOutputWithContext(context.Background())
}

func (i *DatabaseValkeyConfig) ToDatabaseValkeyConfigOutputWithContext(ctx context.Context) DatabaseValkeyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseValkeyConfigOutput)
}

// DatabaseValkeyConfigArrayInput is an input type that accepts DatabaseValkeyConfigArray and DatabaseValkeyConfigArrayOutput values.
// You can construct a concrete instance of `DatabaseValkeyConfigArrayInput` via:
//
//	DatabaseValkeyConfigArray{ DatabaseValkeyConfigArgs{...} }
type DatabaseValkeyConfigArrayInput interface {
	pulumi.Input

	ToDatabaseValkeyConfigArrayOutput() DatabaseValkeyConfigArrayOutput
	ToDatabaseValkeyConfigArrayOutputWithContext(context.Context) DatabaseValkeyConfigArrayOutput
}

type DatabaseValkeyConfigArray []DatabaseValkeyConfigInput

func (DatabaseValkeyConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseValkeyConfig)(nil)).Elem()
}

func (i DatabaseValkeyConfigArray) ToDatabaseValkeyConfigArrayOutput() DatabaseValkeyConfigArrayOutput {
	return i.ToDatabaseValkeyConfigArrayOutputWithContext(context.Background())
}

func (i DatabaseValkeyConfigArray) ToDatabaseValkeyConfigArrayOutputWithContext(ctx context.Context) DatabaseValkeyConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseValkeyConfigArrayOutput)
}

// DatabaseValkeyConfigMapInput is an input type that accepts DatabaseValkeyConfigMap and DatabaseValkeyConfigMapOutput values.
// You can construct a concrete instance of `DatabaseValkeyConfigMapInput` via:
//
//	DatabaseValkeyConfigMap{ "key": DatabaseValkeyConfigArgs{...} }
type DatabaseValkeyConfigMapInput interface {
	pulumi.Input

	ToDatabaseValkeyConfigMapOutput() DatabaseValkeyConfigMapOutput
	ToDatabaseValkeyConfigMapOutputWithContext(context.Context) DatabaseValkeyConfigMapOutput
}

type DatabaseValkeyConfigMap map[string]DatabaseValkeyConfigInput

func (DatabaseValkeyConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseValkeyConfig)(nil)).Elem()
}

func (i DatabaseValkeyConfigMap) ToDatabaseValkeyConfigMapOutput() DatabaseValkeyConfigMapOutput {
	return i.ToDatabaseValkeyConfigMapOutputWithContext(context.Background())
}

func (i DatabaseValkeyConfigMap) ToDatabaseValkeyConfigMapOutputWithContext(ctx context.Context) DatabaseValkeyConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseValkeyConfigMapOutput)
}

type DatabaseValkeyConfigOutput struct{ *pulumi.OutputState }

func (DatabaseValkeyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseValkeyConfig)(nil)).Elem()
}

func (o DatabaseValkeyConfigOutput) ToDatabaseValkeyConfigOutput() DatabaseValkeyConfigOutput {
	return o
}

func (o DatabaseValkeyConfigOutput) ToDatabaseValkeyConfigOutputWithContext(ctx context.Context) DatabaseValkeyConfigOutput {
	return o
}

// Determines default pub/sub channels' ACL for new users if an ACL is not supplied. When this option is not defined, `allchannels` is assumed to keep backward compatibility. This option doesn't affect Valkey' `acl-pubsub-default` configuration. Supported values are: `allchannels` and `resetchannels`
func (o DatabaseValkeyConfigOutput) AclChannelsDefault() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.StringOutput { return v.AclChannelsDefault }).(pulumi.StringOutput)
}

// The ID of the target Valkey cluster.
func (o DatabaseValkeyConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Frequent RDB snapshots. When enabled, Valkey will create frequent local RDB snapshots. When disabled, Valkey will only
// take RDB snapshots when a backup is created, based on the backup schedule. This setting is ignored when
// valkeyPersistence is set to off.
func (o DatabaseValkeyConfigOutput) FrequentSnapshots() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.BoolOutput { return v.FrequentSnapshots }).(pulumi.BoolOutput)
}

// The Valkey IO thread count.
func (o DatabaseValkeyConfigOutput) IoThreads() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.IoThreads }).(pulumi.IntOutput)
}

// The LFU maxmemory policy counter decay time in minutes.
func (o DatabaseValkeyConfigOutput) LfuDecayTime() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.LfuDecayTime }).(pulumi.IntOutput)
}

// The counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory policies.
func (o DatabaseValkeyConfigOutput) LfuLogFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.LfuLogFactor }).(pulumi.IntOutput)
}

// The `notify-keyspace-events` option. Requires at least `K` or `E`.
func (o DatabaseValkeyConfigOutput) NotifyKeyspaceEvents() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.StringOutput { return v.NotifyKeyspaceEvents }).(pulumi.StringOutput)
}

// The number of Valkey databases. Changing this will cause a restart of Valkey service.
func (o DatabaseValkeyConfigOutput) NumberOfDatabases() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.NumberOfDatabases }).(pulumi.IntOutput)
}

// When persistence is 'rdb', Valkey does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.
func (o DatabaseValkeyConfigOutput) Persistence() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.StringOutput { return v.Persistence }).(pulumi.StringOutput)
}

// The output buffer limit for pub/sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.
func (o DatabaseValkeyConfigOutput) PubsubClientOutputBufferLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.PubsubClientOutputBufferLimit }).(pulumi.IntOutput)
}

// A boolean indicating whether to require SSL to access Valkey.
func (o DatabaseValkeyConfigOutput) Ssl() pulumi.BoolOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.BoolOutput { return v.Ssl }).(pulumi.BoolOutput)
}

// The Valkey idle connection timeout in seconds.
func (o DatabaseValkeyConfigOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// Active expire effort. Valkey reclaims expired keys both when accessed and in the background. The background process
// scans for expired keys to free memory. Increasing the active-expire-effort setting (default 1, max 10) uses more CPU to
// reclaim expired keys faster, reducing memory usage but potentially increasing latency.
func (o DatabaseValkeyConfigOutput) ValkeyActiveExpireEffort() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseValkeyConfig) pulumi.IntOutput { return v.ValkeyActiveExpireEffort }).(pulumi.IntOutput)
}

type DatabaseValkeyConfigArrayOutput struct{ *pulumi.OutputState }

func (DatabaseValkeyConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseValkeyConfig)(nil)).Elem()
}

func (o DatabaseValkeyConfigArrayOutput) ToDatabaseValkeyConfigArrayOutput() DatabaseValkeyConfigArrayOutput {
	return o
}

func (o DatabaseValkeyConfigArrayOutput) ToDatabaseValkeyConfigArrayOutputWithContext(ctx context.Context) DatabaseValkeyConfigArrayOutput {
	return o
}

func (o DatabaseValkeyConfigArrayOutput) Index(i pulumi.IntInput) DatabaseValkeyConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseValkeyConfig {
		return vs[0].([]*DatabaseValkeyConfig)[vs[1].(int)]
	}).(DatabaseValkeyConfigOutput)
}

type DatabaseValkeyConfigMapOutput struct{ *pulumi.OutputState }

func (DatabaseValkeyConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseValkeyConfig)(nil)).Elem()
}

func (o DatabaseValkeyConfigMapOutput) ToDatabaseValkeyConfigMapOutput() DatabaseValkeyConfigMapOutput {
	return o
}

func (o DatabaseValkeyConfigMapOutput) ToDatabaseValkeyConfigMapOutputWithContext(ctx context.Context) DatabaseValkeyConfigMapOutput {
	return o
}

func (o DatabaseValkeyConfigMapOutput) MapIndex(k pulumi.StringInput) DatabaseValkeyConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseValkeyConfig {
		return vs[0].(map[string]*DatabaseValkeyConfig)[vs[1].(string)]
	}).(DatabaseValkeyConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseValkeyConfigInput)(nil)).Elem(), &DatabaseValkeyConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseValkeyConfigArrayInput)(nil)).Elem(), DatabaseValkeyConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseValkeyConfigMapInput)(nil)).Elem(), DatabaseValkeyConfigMap{})
	pulumi.RegisterOutputType(DatabaseValkeyConfigOutput{})
	pulumi.RegisterOutputType(DatabaseValkeyConfigArrayOutput{})
	pulumi.RegisterOutputType(DatabaseValkeyConfigMapOutput{})
}
