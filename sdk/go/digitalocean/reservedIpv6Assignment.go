// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for assigning an existing DigitalOcean reserved IPv6 to a Droplet. This
// makes it easy to provision reserved IPv6 addresses that are not tied to the lifecycle of your Droplet.
//
// ## Import
//
// # Reserved IPv6 assignments can be imported using the reserved IPv6 itself and the `id` of
//
// the Droplet joined with a comma. For example:
//
// ```sh
// $ pulumi import digitalocean:index/reservedIpv6Assignment:ReservedIpv6Assignment foobar 2409:40d0:fa:27dd:9b24:7074:7b85:eee6,123456
// ```
type ReservedIpv6Assignment struct {
	pulumi.CustomResourceState

	// The ID of Droplet that the reserved IPv6 will be assigned to.
	DropletId pulumi.IntOutput `pulumi:"dropletId"`
	// The reserved IPv6 to assign to the Droplet.
	Ip pulumi.StringOutput `pulumi:"ip"`
}

// NewReservedIpv6Assignment registers a new resource with the given unique name, arguments, and options.
func NewReservedIpv6Assignment(ctx *pulumi.Context,
	name string, args *ReservedIpv6AssignmentArgs, opts ...pulumi.ResourceOption) (*ReservedIpv6Assignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DropletId == nil {
		return nil, errors.New("invalid value for required argument 'DropletId'")
	}
	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIpv6Assignment
	err := ctx.RegisterResource("digitalocean:index/reservedIpv6Assignment:ReservedIpv6Assignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIpv6Assignment gets an existing ReservedIpv6Assignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIpv6Assignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIpv6AssignmentState, opts ...pulumi.ResourceOption) (*ReservedIpv6Assignment, error) {
	var resource ReservedIpv6Assignment
	err := ctx.ReadResource("digitalocean:index/reservedIpv6Assignment:ReservedIpv6Assignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIpv6Assignment resources.
type reservedIpv6AssignmentState struct {
	// The ID of Droplet that the reserved IPv6 will be assigned to.
	DropletId *int `pulumi:"dropletId"`
	// The reserved IPv6 to assign to the Droplet.
	Ip *string `pulumi:"ip"`
}

type ReservedIpv6AssignmentState struct {
	// The ID of Droplet that the reserved IPv6 will be assigned to.
	DropletId pulumi.IntPtrInput
	// The reserved IPv6 to assign to the Droplet.
	Ip pulumi.StringPtrInput
}

func (ReservedIpv6AssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpv6AssignmentState)(nil)).Elem()
}

type reservedIpv6AssignmentArgs struct {
	// The ID of Droplet that the reserved IPv6 will be assigned to.
	DropletId int `pulumi:"dropletId"`
	// The reserved IPv6 to assign to the Droplet.
	Ip string `pulumi:"ip"`
}

// The set of arguments for constructing a ReservedIpv6Assignment resource.
type ReservedIpv6AssignmentArgs struct {
	// The ID of Droplet that the reserved IPv6 will be assigned to.
	DropletId pulumi.IntInput
	// The reserved IPv6 to assign to the Droplet.
	Ip pulumi.StringInput
}

func (ReservedIpv6AssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpv6AssignmentArgs)(nil)).Elem()
}

type ReservedIpv6AssignmentInput interface {
	pulumi.Input

	ToReservedIpv6AssignmentOutput() ReservedIpv6AssignmentOutput
	ToReservedIpv6AssignmentOutputWithContext(ctx context.Context) ReservedIpv6AssignmentOutput
}

func (*ReservedIpv6Assignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpv6Assignment)(nil)).Elem()
}

func (i *ReservedIpv6Assignment) ToReservedIpv6AssignmentOutput() ReservedIpv6AssignmentOutput {
	return i.ToReservedIpv6AssignmentOutputWithContext(context.Background())
}

func (i *ReservedIpv6Assignment) ToReservedIpv6AssignmentOutputWithContext(ctx context.Context) ReservedIpv6AssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6AssignmentOutput)
}

// ReservedIpv6AssignmentArrayInput is an input type that accepts ReservedIpv6AssignmentArray and ReservedIpv6AssignmentArrayOutput values.
// You can construct a concrete instance of `ReservedIpv6AssignmentArrayInput` via:
//
//	ReservedIpv6AssignmentArray{ ReservedIpv6AssignmentArgs{...} }
type ReservedIpv6AssignmentArrayInput interface {
	pulumi.Input

	ToReservedIpv6AssignmentArrayOutput() ReservedIpv6AssignmentArrayOutput
	ToReservedIpv6AssignmentArrayOutputWithContext(context.Context) ReservedIpv6AssignmentArrayOutput
}

type ReservedIpv6AssignmentArray []ReservedIpv6AssignmentInput

func (ReservedIpv6AssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpv6Assignment)(nil)).Elem()
}

func (i ReservedIpv6AssignmentArray) ToReservedIpv6AssignmentArrayOutput() ReservedIpv6AssignmentArrayOutput {
	return i.ToReservedIpv6AssignmentArrayOutputWithContext(context.Background())
}

func (i ReservedIpv6AssignmentArray) ToReservedIpv6AssignmentArrayOutputWithContext(ctx context.Context) ReservedIpv6AssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6AssignmentArrayOutput)
}

// ReservedIpv6AssignmentMapInput is an input type that accepts ReservedIpv6AssignmentMap and ReservedIpv6AssignmentMapOutput values.
// You can construct a concrete instance of `ReservedIpv6AssignmentMapInput` via:
//
//	ReservedIpv6AssignmentMap{ "key": ReservedIpv6AssignmentArgs{...} }
type ReservedIpv6AssignmentMapInput interface {
	pulumi.Input

	ToReservedIpv6AssignmentMapOutput() ReservedIpv6AssignmentMapOutput
	ToReservedIpv6AssignmentMapOutputWithContext(context.Context) ReservedIpv6AssignmentMapOutput
}

type ReservedIpv6AssignmentMap map[string]ReservedIpv6AssignmentInput

func (ReservedIpv6AssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpv6Assignment)(nil)).Elem()
}

func (i ReservedIpv6AssignmentMap) ToReservedIpv6AssignmentMapOutput() ReservedIpv6AssignmentMapOutput {
	return i.ToReservedIpv6AssignmentMapOutputWithContext(context.Background())
}

func (i ReservedIpv6AssignmentMap) ToReservedIpv6AssignmentMapOutputWithContext(ctx context.Context) ReservedIpv6AssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6AssignmentMapOutput)
}

type ReservedIpv6AssignmentOutput struct{ *pulumi.OutputState }

func (ReservedIpv6AssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpv6Assignment)(nil)).Elem()
}

func (o ReservedIpv6AssignmentOutput) ToReservedIpv6AssignmentOutput() ReservedIpv6AssignmentOutput {
	return o
}

func (o ReservedIpv6AssignmentOutput) ToReservedIpv6AssignmentOutputWithContext(ctx context.Context) ReservedIpv6AssignmentOutput {
	return o
}

// The ID of Droplet that the reserved IPv6 will be assigned to.
func (o ReservedIpv6AssignmentOutput) DropletId() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedIpv6Assignment) pulumi.IntOutput { return v.DropletId }).(pulumi.IntOutput)
}

// The reserved IPv6 to assign to the Droplet.
func (o ReservedIpv6AssignmentOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpv6Assignment) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

type ReservedIpv6AssignmentArrayOutput struct{ *pulumi.OutputState }

func (ReservedIpv6AssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpv6Assignment)(nil)).Elem()
}

func (o ReservedIpv6AssignmentArrayOutput) ToReservedIpv6AssignmentArrayOutput() ReservedIpv6AssignmentArrayOutput {
	return o
}

func (o ReservedIpv6AssignmentArrayOutput) ToReservedIpv6AssignmentArrayOutputWithContext(ctx context.Context) ReservedIpv6AssignmentArrayOutput {
	return o
}

func (o ReservedIpv6AssignmentArrayOutput) Index(i pulumi.IntInput) ReservedIpv6AssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedIpv6Assignment {
		return vs[0].([]*ReservedIpv6Assignment)[vs[1].(int)]
	}).(ReservedIpv6AssignmentOutput)
}

type ReservedIpv6AssignmentMapOutput struct{ *pulumi.OutputState }

func (ReservedIpv6AssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpv6Assignment)(nil)).Elem()
}

func (o ReservedIpv6AssignmentMapOutput) ToReservedIpv6AssignmentMapOutput() ReservedIpv6AssignmentMapOutput {
	return o
}

func (o ReservedIpv6AssignmentMapOutput) ToReservedIpv6AssignmentMapOutputWithContext(ctx context.Context) ReservedIpv6AssignmentMapOutput {
	return o
}

func (o ReservedIpv6AssignmentMapOutput) MapIndex(k pulumi.StringInput) ReservedIpv6AssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedIpv6Assignment {
		return vs[0].(map[string]*ReservedIpv6Assignment)[vs[1].(string)]
	}).(ReservedIpv6AssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6AssignmentInput)(nil)).Elem(), &ReservedIpv6Assignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6AssignmentArrayInput)(nil)).Elem(), ReservedIpv6AssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6AssignmentMapInput)(nil)).Elem(), ReservedIpv6AssignmentMap{})
	pulumi.RegisterOutputType(ReservedIpv6AssignmentOutput{})
	pulumi.RegisterOutputType(ReservedIpv6AssignmentArrayOutput{})
	pulumi.RegisterOutputType(ReservedIpv6AssignmentMapOutput{})
}
