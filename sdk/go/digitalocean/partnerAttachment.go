// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PartnerAttachment struct {
	pulumi.CustomResourceState

	Bgp PartnerAttachmentBgpPtrOutput `pulumi:"bgp"`
	// The connection bandwidth in Mbps
	ConnectionBandwidthInMbps pulumi.IntOutput `pulumi:"connectionBandwidthInMbps"`
	// The date and time when the Partner Attachment was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The NaaS provider
	NaasProvider pulumi.StringOutput `pulumi:"naasProvider"`
	// The name of the Partner Attachment
	Name pulumi.StringOutput `pulumi:"name"`
	// The region where the Partner Attachment will be created
	Region pulumi.StringOutput `pulumi:"region"`
	// The state of the Partner Attachment
	State pulumi.StringOutput `pulumi:"state"`
	// The list of VPC IDs to attach the Partner Attachment to
	VpcIds pulumi.StringArrayOutput `pulumi:"vpcIds"`
}

// NewPartnerAttachment registers a new resource with the given unique name, arguments, and options.
func NewPartnerAttachment(ctx *pulumi.Context,
	name string, args *PartnerAttachmentArgs, opts ...pulumi.ResourceOption) (*PartnerAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionBandwidthInMbps == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionBandwidthInMbps'")
	}
	if args.NaasProvider == nil {
		return nil, errors.New("invalid value for required argument 'NaasProvider'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.VpcIds == nil {
		return nil, errors.New("invalid value for required argument 'VpcIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PartnerAttachment
	err := ctx.RegisterResource("digitalocean:index/partnerAttachment:PartnerAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPartnerAttachment gets an existing PartnerAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPartnerAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PartnerAttachmentState, opts ...pulumi.ResourceOption) (*PartnerAttachment, error) {
	var resource PartnerAttachment
	err := ctx.ReadResource("digitalocean:index/partnerAttachment:PartnerAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PartnerAttachment resources.
type partnerAttachmentState struct {
	Bgp *PartnerAttachmentBgp `pulumi:"bgp"`
	// The connection bandwidth in Mbps
	ConnectionBandwidthInMbps *int `pulumi:"connectionBandwidthInMbps"`
	// The date and time when the Partner Attachment was created
	CreatedAt *string `pulumi:"createdAt"`
	// The NaaS provider
	NaasProvider *string `pulumi:"naasProvider"`
	// The name of the Partner Attachment
	Name *string `pulumi:"name"`
	// The region where the Partner Attachment will be created
	Region *string `pulumi:"region"`
	// The state of the Partner Attachment
	State *string `pulumi:"state"`
	// The list of VPC IDs to attach the Partner Attachment to
	VpcIds []string `pulumi:"vpcIds"`
}

type PartnerAttachmentState struct {
	Bgp PartnerAttachmentBgpPtrInput
	// The connection bandwidth in Mbps
	ConnectionBandwidthInMbps pulumi.IntPtrInput
	// The date and time when the Partner Attachment was created
	CreatedAt pulumi.StringPtrInput
	// The NaaS provider
	NaasProvider pulumi.StringPtrInput
	// The name of the Partner Attachment
	Name pulumi.StringPtrInput
	// The region where the Partner Attachment will be created
	Region pulumi.StringPtrInput
	// The state of the Partner Attachment
	State pulumi.StringPtrInput
	// The list of VPC IDs to attach the Partner Attachment to
	VpcIds pulumi.StringArrayInput
}

func (PartnerAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerAttachmentState)(nil)).Elem()
}

type partnerAttachmentArgs struct {
	Bgp *PartnerAttachmentBgp `pulumi:"bgp"`
	// The connection bandwidth in Mbps
	ConnectionBandwidthInMbps int `pulumi:"connectionBandwidthInMbps"`
	// The NaaS provider
	NaasProvider string `pulumi:"naasProvider"`
	// The name of the Partner Attachment
	Name *string `pulumi:"name"`
	// The region where the Partner Attachment will be created
	Region string `pulumi:"region"`
	// The list of VPC IDs to attach the Partner Attachment to
	VpcIds []string `pulumi:"vpcIds"`
}

// The set of arguments for constructing a PartnerAttachment resource.
type PartnerAttachmentArgs struct {
	Bgp PartnerAttachmentBgpPtrInput
	// The connection bandwidth in Mbps
	ConnectionBandwidthInMbps pulumi.IntInput
	// The NaaS provider
	NaasProvider pulumi.StringInput
	// The name of the Partner Attachment
	Name pulumi.StringPtrInput
	// The region where the Partner Attachment will be created
	Region pulumi.StringInput
	// The list of VPC IDs to attach the Partner Attachment to
	VpcIds pulumi.StringArrayInput
}

func (PartnerAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*partnerAttachmentArgs)(nil)).Elem()
}

type PartnerAttachmentInput interface {
	pulumi.Input

	ToPartnerAttachmentOutput() PartnerAttachmentOutput
	ToPartnerAttachmentOutputWithContext(ctx context.Context) PartnerAttachmentOutput
}

func (*PartnerAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAttachment)(nil)).Elem()
}

func (i *PartnerAttachment) ToPartnerAttachmentOutput() PartnerAttachmentOutput {
	return i.ToPartnerAttachmentOutputWithContext(context.Background())
}

func (i *PartnerAttachment) ToPartnerAttachmentOutputWithContext(ctx context.Context) PartnerAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAttachmentOutput)
}

// PartnerAttachmentArrayInput is an input type that accepts PartnerAttachmentArray and PartnerAttachmentArrayOutput values.
// You can construct a concrete instance of `PartnerAttachmentArrayInput` via:
//
//	PartnerAttachmentArray{ PartnerAttachmentArgs{...} }
type PartnerAttachmentArrayInput interface {
	pulumi.Input

	ToPartnerAttachmentArrayOutput() PartnerAttachmentArrayOutput
	ToPartnerAttachmentArrayOutputWithContext(context.Context) PartnerAttachmentArrayOutput
}

type PartnerAttachmentArray []PartnerAttachmentInput

func (PartnerAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerAttachment)(nil)).Elem()
}

func (i PartnerAttachmentArray) ToPartnerAttachmentArrayOutput() PartnerAttachmentArrayOutput {
	return i.ToPartnerAttachmentArrayOutputWithContext(context.Background())
}

func (i PartnerAttachmentArray) ToPartnerAttachmentArrayOutputWithContext(ctx context.Context) PartnerAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAttachmentArrayOutput)
}

// PartnerAttachmentMapInput is an input type that accepts PartnerAttachmentMap and PartnerAttachmentMapOutput values.
// You can construct a concrete instance of `PartnerAttachmentMapInput` via:
//
//	PartnerAttachmentMap{ "key": PartnerAttachmentArgs{...} }
type PartnerAttachmentMapInput interface {
	pulumi.Input

	ToPartnerAttachmentMapOutput() PartnerAttachmentMapOutput
	ToPartnerAttachmentMapOutputWithContext(context.Context) PartnerAttachmentMapOutput
}

type PartnerAttachmentMap map[string]PartnerAttachmentInput

func (PartnerAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerAttachment)(nil)).Elem()
}

func (i PartnerAttachmentMap) ToPartnerAttachmentMapOutput() PartnerAttachmentMapOutput {
	return i.ToPartnerAttachmentMapOutputWithContext(context.Background())
}

func (i PartnerAttachmentMap) ToPartnerAttachmentMapOutputWithContext(ctx context.Context) PartnerAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PartnerAttachmentMapOutput)
}

type PartnerAttachmentOutput struct{ *pulumi.OutputState }

func (PartnerAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PartnerAttachment)(nil)).Elem()
}

func (o PartnerAttachmentOutput) ToPartnerAttachmentOutput() PartnerAttachmentOutput {
	return o
}

func (o PartnerAttachmentOutput) ToPartnerAttachmentOutputWithContext(ctx context.Context) PartnerAttachmentOutput {
	return o
}

func (o PartnerAttachmentOutput) Bgp() PartnerAttachmentBgpPtrOutput {
	return o.ApplyT(func(v *PartnerAttachment) PartnerAttachmentBgpPtrOutput { return v.Bgp }).(PartnerAttachmentBgpPtrOutput)
}

// The connection bandwidth in Mbps
func (o PartnerAttachmentOutput) ConnectionBandwidthInMbps() pulumi.IntOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.IntOutput { return v.ConnectionBandwidthInMbps }).(pulumi.IntOutput)
}

// The date and time when the Partner Attachment was created
func (o PartnerAttachmentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The NaaS provider
func (o PartnerAttachmentOutput) NaasProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringOutput { return v.NaasProvider }).(pulumi.StringOutput)
}

// The name of the Partner Attachment
func (o PartnerAttachmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The region where the Partner Attachment will be created
func (o PartnerAttachmentOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// The state of the Partner Attachment
func (o PartnerAttachmentOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The list of VPC IDs to attach the Partner Attachment to
func (o PartnerAttachmentOutput) VpcIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PartnerAttachment) pulumi.StringArrayOutput { return v.VpcIds }).(pulumi.StringArrayOutput)
}

type PartnerAttachmentArrayOutput struct{ *pulumi.OutputState }

func (PartnerAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PartnerAttachment)(nil)).Elem()
}

func (o PartnerAttachmentArrayOutput) ToPartnerAttachmentArrayOutput() PartnerAttachmentArrayOutput {
	return o
}

func (o PartnerAttachmentArrayOutput) ToPartnerAttachmentArrayOutputWithContext(ctx context.Context) PartnerAttachmentArrayOutput {
	return o
}

func (o PartnerAttachmentArrayOutput) Index(i pulumi.IntInput) PartnerAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PartnerAttachment {
		return vs[0].([]*PartnerAttachment)[vs[1].(int)]
	}).(PartnerAttachmentOutput)
}

type PartnerAttachmentMapOutput struct{ *pulumi.OutputState }

func (PartnerAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PartnerAttachment)(nil)).Elem()
}

func (o PartnerAttachmentMapOutput) ToPartnerAttachmentMapOutput() PartnerAttachmentMapOutput {
	return o
}

func (o PartnerAttachmentMapOutput) ToPartnerAttachmentMapOutputWithContext(ctx context.Context) PartnerAttachmentMapOutput {
	return o
}

func (o PartnerAttachmentMapOutput) MapIndex(k pulumi.StringInput) PartnerAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PartnerAttachment {
		return vs[0].(map[string]*PartnerAttachment)[vs[1].(string)]
	}).(PartnerAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAttachmentInput)(nil)).Elem(), &PartnerAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAttachmentArrayInput)(nil)).Elem(), PartnerAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PartnerAttachmentMapInput)(nil)).Elem(), PartnerAttachmentMap{})
	pulumi.RegisterOutputType(PartnerAttachmentOutput{})
	pulumi.RegisterOutputType(PartnerAttachmentArrayOutput{})
	pulumi.RegisterOutputType(PartnerAttachmentMapOutput{})
}
