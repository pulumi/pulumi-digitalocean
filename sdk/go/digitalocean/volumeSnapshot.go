// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean Volume Snapshot which can be used to create a snapshot from an existing volume.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/volume_snapshot.html.markdown.
type VolumeSnapshot struct {
	s *pulumi.ResourceState
}

// NewVolumeSnapshot registers a new resource with the given unique name, arguments, and options.
func NewVolumeSnapshot(ctx *pulumi.Context,
	name string, args *VolumeSnapshotArgs, opts ...pulumi.ResourceOpt) (*VolumeSnapshot, error) {
	if args == nil || args.VolumeId == nil {
		return nil, errors.New("missing required argument 'VolumeId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
		inputs["volumeId"] = nil
	} else {
		inputs["name"] = args.Name
		inputs["volumeId"] = args.VolumeId
	}
	inputs["createdAt"] = nil
	inputs["minDiskSize"] = nil
	inputs["regions"] = nil
	inputs["size"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/volumeSnapshot:VolumeSnapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeSnapshot{s: s}, nil
}

// GetVolumeSnapshot gets an existing VolumeSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeSnapshotState, opts ...pulumi.ResourceOpt) (*VolumeSnapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdAt"] = state.CreatedAt
		inputs["minDiskSize"] = state.MinDiskSize
		inputs["name"] = state.Name
		inputs["regions"] = state.Regions
		inputs["size"] = state.Size
		inputs["volumeId"] = state.VolumeId
	}
	s, err := ctx.ReadResource("digitalocean:index/volumeSnapshot:VolumeSnapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VolumeSnapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VolumeSnapshot) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VolumeSnapshot) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The date and time the volume snapshot was created.
func (r *VolumeSnapshot) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The minimum size in gigabytes required for a volume to be created based on this volume snapshot.
func (r *VolumeSnapshot) MinDiskSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minDiskSize"])
}

// A name for the volume snapshot.
func (r *VolumeSnapshot) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of DigitalOcean region "slugs" indicating where the volume snapshot is available.
func (r *VolumeSnapshot) Regions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["regions"])
}

// The billable size of the volume snapshot in gigabytes.
func (r *VolumeSnapshot) Size() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["size"])
}

// The ID of the volume from which the volume snapshot originated.
func (r *VolumeSnapshot) VolumeId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["volumeId"])
}

// Input properties used for looking up and filtering VolumeSnapshot resources.
type VolumeSnapshotState struct {
	// The date and time the volume snapshot was created.
	CreatedAt interface{}
	// The minimum size in gigabytes required for a volume to be created based on this volume snapshot.
	MinDiskSize interface{}
	// A name for the volume snapshot.
	Name interface{}
	// A list of DigitalOcean region "slugs" indicating where the volume snapshot is available.
	Regions interface{}
	// The billable size of the volume snapshot in gigabytes.
	Size interface{}
	// The ID of the volume from which the volume snapshot originated.
	VolumeId interface{}
}

// The set of arguments for constructing a VolumeSnapshot resource.
type VolumeSnapshotArgs struct {
	// A name for the volume snapshot.
	Name interface{}
	// The ID of the volume from which the volume snapshot originated.
	VolumeId interface{}
}
