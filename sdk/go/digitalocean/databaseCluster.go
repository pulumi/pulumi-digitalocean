// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a DigitalOcean database cluster resource.
//
// ## Example Usage
//
// ### Create a new PostgreSQL database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "postgres-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-postgres-cluster"),
//				Engine:    pulumi.String("pg"),
//				Version:   pulumi.String("15"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a new MySQL database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "mysql-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-mysql-cluster"),
//				Engine:    pulumi.String("mysql"),
//				Version:   pulumi.String("8"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a new Redis database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "redis-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-redis-cluster"),
//				Engine:    pulumi.String("redis"),
//				Version:   pulumi.String("7"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a new Kafka database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "kafka-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-kafka-cluster"),
//				Engine:    pulumi.String("kafka"),
//				Version:   pulumi.String("3.5"),
//				Size:      pulumi.String("db-s-2vcpu-2gb"),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a new MongoDB database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "mongodb-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-mongo-cluster"),
//				Engine:    pulumi.String("mongodb"),
//				Version:   pulumi.String("6"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC3),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Create a new OpenSearch database cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := digitalocean.NewDatabaseCluster(ctx, "opensearch-example", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("example-opensearch-cluster"),
//				Engine:    pulumi.String("opensearch"),
//				Version:   pulumi.String("2"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU2GB),
//				Region:    pulumi.String(digitalocean.RegionNYC3),
//				NodeCount: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Create a new database cluster based on a backup of an existing cluster.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			doby, err := digitalocean.NewDatabaseCluster(ctx, "doby", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("dobydb"),
//				Engine:    pulumi.String("pg"),
//				Version:   pulumi.String("15"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU2GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//				Tags: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabaseCluster(ctx, "doby_backup", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("dobydupe"),
//				Engine:    pulumi.String("pg"),
//				Version:   pulumi.String("15"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU2GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//				Tags: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//				BackupRestore: &digitalocean.DatabaseClusterBackupRestoreArgs{
//					DatabaseName: pulumi.String("dobydb"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				doby,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Database clusters can be imported using the `id` returned from DigitalOcean, e.g.
//
// ```sh
// $ pulumi import digitalocean:index/databaseCluster:DatabaseCluster mycluster 245bcfd0-7f31-4ce6-a2bc-475a116cca97
// ```
type DatabaseCluster struct {
	pulumi.CustomResourceState

	BackupRestore DatabaseClusterBackupRestorePtrOutput `pulumi:"backupRestore"`
	// The uniform resource name of the database cluster.
	ClusterUrn pulumi.StringOutput `pulumi:"clusterUrn"`
	// Name of the cluster's default database.
	Database pulumi.StringOutput `pulumi:"database"`
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
	Engine pulumi.StringOutput `pulumi:"engine"`
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy pulumi.StringPtrOutput `pulumi:"evictionPolicy"`
	// Database cluster's hostname.
	Host pulumi.StringOutput `pulumi:"host"`
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows DatabaseClusterMaintenanceWindowArrayOutput `pulumi:"maintenanceWindows"`
	// The name of the database cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
	NodeCount pulumi.IntOutput `pulumi:"nodeCount"`
	// Password for the cluster's default user.
	Password pulumi.StringOutput `pulumi:"password"`
	// Network port that the database cluster is listening on.
	Port pulumi.IntOutput `pulumi:"port"`
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost pulumi.StringOutput `pulumi:"privateHost"`
	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUuid pulumi.StringOutput `pulumi:"privateNetworkUuid"`
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri pulumi.StringOutput `pulumi:"privateUri"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// DigitalOcean region where the cluster will reside.
	Region pulumi.StringOutput `pulumi:"region"`
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
	Size pulumi.StringOutput `pulumi:"size"`
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode pulumi.StringPtrOutput `pulumi:"sqlMode"`
	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib pulumi.StringOutput `pulumi:"storageSizeMib"`
	// A list of tag names to be applied to the database cluster.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Name of the OpenSearch dashboard db.
	UiDatabase pulumi.StringOutput `pulumi:"uiDatabase"`
	// Hostname for the OpenSearch dashboard.
	UiHost pulumi.StringOutput `pulumi:"uiHost"`
	// Password for the OpenSearch dashboard's default user.
	UiPassword pulumi.StringOutput `pulumi:"uiPassword"`
	// Network port that the OpenSearch dashboard is listening on.
	UiPort pulumi.IntOutput `pulumi:"uiPort"`
	// The full URI for connecting to the OpenSearch dashboard.
	UiUri pulumi.StringOutput `pulumi:"uiUri"`
	// Username for OpenSearch dashboard's default user.
	UiUser pulumi.StringOutput `pulumi:"uiUser"`
	// The full URI for connecting to the database cluster.
	Uri pulumi.StringOutput `pulumi:"uri"`
	// Username for the cluster's default user.
	User pulumi.StringOutput `pulumi:"user"`
	// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
	// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
	Version pulumi.StringPtrOutput `pulumi:"version"`
}

// NewDatabaseCluster registers a new resource with the given unique name, arguments, and options.
func NewDatabaseCluster(ctx *pulumi.Context,
	name string, args *DatabaseClusterArgs, opts ...pulumi.ResourceOption) (*DatabaseCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.NodeCount == nil {
		return nil, errors.New("invalid value for required argument 'NodeCount'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
		"privateUri",
		"uiPassword",
		"uiUri",
		"uri",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseCluster
	err := ctx.RegisterResource("digitalocean:index/databaseCluster:DatabaseCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseCluster gets an existing DatabaseCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseClusterState, opts ...pulumi.ResourceOption) (*DatabaseCluster, error) {
	var resource DatabaseCluster
	err := ctx.ReadResource("digitalocean:index/databaseCluster:DatabaseCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseCluster resources.
type databaseClusterState struct {
	BackupRestore *DatabaseClusterBackupRestore `pulumi:"backupRestore"`
	// The uniform resource name of the database cluster.
	ClusterUrn *string `pulumi:"clusterUrn"`
	// Name of the cluster's default database.
	Database *string `pulumi:"database"`
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
	Engine *string `pulumi:"engine"`
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Database cluster's hostname.
	Host *string `pulumi:"host"`
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows []DatabaseClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the database cluster.
	Name *string `pulumi:"name"`
	// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
	NodeCount *int `pulumi:"nodeCount"`
	// Password for the cluster's default user.
	Password *string `pulumi:"password"`
	// Network port that the database cluster is listening on.
	Port *int `pulumi:"port"`
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost *string `pulumi:"privateHost"`
	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri *string `pulumi:"privateUri"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// DigitalOcean region where the cluster will reside.
	Region *string `pulumi:"region"`
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
	Size *string `pulumi:"size"`
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode *string `pulumi:"sqlMode"`
	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib *string `pulumi:"storageSizeMib"`
	// A list of tag names to be applied to the database cluster.
	Tags []string `pulumi:"tags"`
	// Name of the OpenSearch dashboard db.
	UiDatabase *string `pulumi:"uiDatabase"`
	// Hostname for the OpenSearch dashboard.
	UiHost *string `pulumi:"uiHost"`
	// Password for the OpenSearch dashboard's default user.
	UiPassword *string `pulumi:"uiPassword"`
	// Network port that the OpenSearch dashboard is listening on.
	UiPort *int `pulumi:"uiPort"`
	// The full URI for connecting to the OpenSearch dashboard.
	UiUri *string `pulumi:"uiUri"`
	// Username for OpenSearch dashboard's default user.
	UiUser *string `pulumi:"uiUser"`
	// The full URI for connecting to the database cluster.
	Uri *string `pulumi:"uri"`
	// Username for the cluster's default user.
	User *string `pulumi:"user"`
	// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
	// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
	Version *string `pulumi:"version"`
}

type DatabaseClusterState struct {
	BackupRestore DatabaseClusterBackupRestorePtrInput
	// The uniform resource name of the database cluster.
	ClusterUrn pulumi.StringPtrInput
	// Name of the cluster's default database.
	Database pulumi.StringPtrInput
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
	Engine pulumi.StringPtrInput
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy pulumi.StringPtrInput
	// Database cluster's hostname.
	Host pulumi.StringPtrInput
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows DatabaseClusterMaintenanceWindowArrayInput
	// The name of the database cluster.
	Name pulumi.StringPtrInput
	// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
	NodeCount pulumi.IntPtrInput
	// Password for the cluster's default user.
	Password pulumi.StringPtrInput
	// Network port that the database cluster is listening on.
	Port pulumi.IntPtrInput
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost pulumi.StringPtrInput
	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUuid pulumi.StringPtrInput
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri pulumi.StringPtrInput
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId pulumi.StringPtrInput
	// DigitalOcean region where the cluster will reside.
	Region pulumi.StringPtrInput
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
	Size pulumi.StringPtrInput
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode pulumi.StringPtrInput
	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib pulumi.StringPtrInput
	// A list of tag names to be applied to the database cluster.
	Tags pulumi.StringArrayInput
	// Name of the OpenSearch dashboard db.
	UiDatabase pulumi.StringPtrInput
	// Hostname for the OpenSearch dashboard.
	UiHost pulumi.StringPtrInput
	// Password for the OpenSearch dashboard's default user.
	UiPassword pulumi.StringPtrInput
	// Network port that the OpenSearch dashboard is listening on.
	UiPort pulumi.IntPtrInput
	// The full URI for connecting to the OpenSearch dashboard.
	UiUri pulumi.StringPtrInput
	// Username for OpenSearch dashboard's default user.
	UiUser pulumi.StringPtrInput
	// The full URI for connecting to the database cluster.
	Uri pulumi.StringPtrInput
	// Username for the cluster's default user.
	User pulumi.StringPtrInput
	// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
	// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
	Version pulumi.StringPtrInput
}

func (DatabaseClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseClusterState)(nil)).Elem()
}

type databaseClusterArgs struct {
	BackupRestore *DatabaseClusterBackupRestore `pulumi:"backupRestore"`
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
	Engine string `pulumi:"engine"`
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy *string `pulumi:"evictionPolicy"`
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows []DatabaseClusterMaintenanceWindow `pulumi:"maintenanceWindows"`
	// The name of the database cluster.
	Name *string `pulumi:"name"`
	// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
	NodeCount int `pulumi:"nodeCount"`
	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUuid *string `pulumi:"privateNetworkUuid"`
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId *string `pulumi:"projectId"`
	// DigitalOcean region where the cluster will reside.
	Region string `pulumi:"region"`
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
	Size string `pulumi:"size"`
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode *string `pulumi:"sqlMode"`
	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib *string `pulumi:"storageSizeMib"`
	// A list of tag names to be applied to the database cluster.
	Tags []string `pulumi:"tags"`
	// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
	// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
	Version *string `pulumi:"version"`
}

// The set of arguments for constructing a DatabaseCluster resource.
type DatabaseClusterArgs struct {
	BackupRestore DatabaseClusterBackupRestorePtrInput
	// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
	Engine pulumi.StringInput
	// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
	EvictionPolicy pulumi.StringPtrInput
	// Defines when the automatic maintenance should be performed for the database cluster.
	MaintenanceWindows DatabaseClusterMaintenanceWindowArrayInput
	// The name of the database cluster.
	Name pulumi.StringPtrInput
	// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
	NodeCount pulumi.IntInput
	// The ID of the VPC where the database cluster will be located.
	PrivateNetworkUuid pulumi.StringPtrInput
	// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
	ProjectId pulumi.StringPtrInput
	// DigitalOcean region where the cluster will reside.
	Region pulumi.StringInput
	// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
	Size pulumi.StringInput
	// A comma separated string specifying the  SQL modes for a MySQL cluster.
	SqlMode pulumi.StringPtrInput
	// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
	StorageSizeMib pulumi.StringPtrInput
	// A list of tag names to be applied to the database cluster.
	Tags pulumi.StringArrayInput
	// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
	// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
	Version pulumi.StringPtrInput
}

func (DatabaseClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseClusterArgs)(nil)).Elem()
}

type DatabaseClusterInput interface {
	pulumi.Input

	ToDatabaseClusterOutput() DatabaseClusterOutput
	ToDatabaseClusterOutputWithContext(ctx context.Context) DatabaseClusterOutput
}

func (*DatabaseCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseCluster)(nil)).Elem()
}

func (i *DatabaseCluster) ToDatabaseClusterOutput() DatabaseClusterOutput {
	return i.ToDatabaseClusterOutputWithContext(context.Background())
}

func (i *DatabaseCluster) ToDatabaseClusterOutputWithContext(ctx context.Context) DatabaseClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterOutput)
}

// DatabaseClusterArrayInput is an input type that accepts DatabaseClusterArray and DatabaseClusterArrayOutput values.
// You can construct a concrete instance of `DatabaseClusterArrayInput` via:
//
//	DatabaseClusterArray{ DatabaseClusterArgs{...} }
type DatabaseClusterArrayInput interface {
	pulumi.Input

	ToDatabaseClusterArrayOutput() DatabaseClusterArrayOutput
	ToDatabaseClusterArrayOutputWithContext(context.Context) DatabaseClusterArrayOutput
}

type DatabaseClusterArray []DatabaseClusterInput

func (DatabaseClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseCluster)(nil)).Elem()
}

func (i DatabaseClusterArray) ToDatabaseClusterArrayOutput() DatabaseClusterArrayOutput {
	return i.ToDatabaseClusterArrayOutputWithContext(context.Background())
}

func (i DatabaseClusterArray) ToDatabaseClusterArrayOutputWithContext(ctx context.Context) DatabaseClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterArrayOutput)
}

// DatabaseClusterMapInput is an input type that accepts DatabaseClusterMap and DatabaseClusterMapOutput values.
// You can construct a concrete instance of `DatabaseClusterMapInput` via:
//
//	DatabaseClusterMap{ "key": DatabaseClusterArgs{...} }
type DatabaseClusterMapInput interface {
	pulumi.Input

	ToDatabaseClusterMapOutput() DatabaseClusterMapOutput
	ToDatabaseClusterMapOutputWithContext(context.Context) DatabaseClusterMapOutput
}

type DatabaseClusterMap map[string]DatabaseClusterInput

func (DatabaseClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseCluster)(nil)).Elem()
}

func (i DatabaseClusterMap) ToDatabaseClusterMapOutput() DatabaseClusterMapOutput {
	return i.ToDatabaseClusterMapOutputWithContext(context.Background())
}

func (i DatabaseClusterMap) ToDatabaseClusterMapOutputWithContext(ctx context.Context) DatabaseClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseClusterMapOutput)
}

type DatabaseClusterOutput struct{ *pulumi.OutputState }

func (DatabaseClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseCluster)(nil)).Elem()
}

func (o DatabaseClusterOutput) ToDatabaseClusterOutput() DatabaseClusterOutput {
	return o
}

func (o DatabaseClusterOutput) ToDatabaseClusterOutputWithContext(ctx context.Context) DatabaseClusterOutput {
	return o
}

func (o DatabaseClusterOutput) BackupRestore() DatabaseClusterBackupRestorePtrOutput {
	return o.ApplyT(func(v *DatabaseCluster) DatabaseClusterBackupRestorePtrOutput { return v.BackupRestore }).(DatabaseClusterBackupRestorePtrOutput)
}

// The uniform resource name of the database cluster.
func (o DatabaseClusterOutput) ClusterUrn() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.ClusterUrn }).(pulumi.StringOutput)
}

// Name of the cluster's default database.
func (o DatabaseClusterOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Database engine used by the cluster (ex. `pg` for PostreSQL, `mysql` for MySQL, `redis` for Redis, `mongodb` for MongoDB, or `kafka` for Kafka).
func (o DatabaseClusterOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// A string specifying the eviction policy for a Redis cluster. Valid values are: `noeviction`, `allkeysLru`, `allkeysRandom`, `volatileLru`, `volatileRandom`, or `volatileTtl`.
func (o DatabaseClusterOutput) EvictionPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringPtrOutput { return v.EvictionPolicy }).(pulumi.StringPtrOutput)
}

// Database cluster's hostname.
func (o DatabaseClusterOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Defines when the automatic maintenance should be performed for the database cluster.
func (o DatabaseClusterOutput) MaintenanceWindows() DatabaseClusterMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v *DatabaseCluster) DatabaseClusterMaintenanceWindowArrayOutput { return v.MaintenanceWindows }).(DatabaseClusterMaintenanceWindowArrayOutput)
}

// The name of the database cluster.
func (o DatabaseClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of nodes that will be included in the cluster. For `kafka` clusters, this must be 3.
func (o DatabaseClusterOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.IntOutput { return v.NodeCount }).(pulumi.IntOutput)
}

// Password for the cluster's default user.
func (o DatabaseClusterOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Network port that the database cluster is listening on.
func (o DatabaseClusterOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Same as `host`, but only accessible from resources within the account and in the same region.
func (o DatabaseClusterOutput) PrivateHost() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.PrivateHost }).(pulumi.StringOutput)
}

// The ID of the VPC where the database cluster will be located.
func (o DatabaseClusterOutput) PrivateNetworkUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.PrivateNetworkUuid }).(pulumi.StringOutput)
}

// Same as `uri`, but only accessible from resources within the account and in the same region.
func (o DatabaseClusterOutput) PrivateUri() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.PrivateUri }).(pulumi.StringOutput)
}

// The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.
func (o DatabaseClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// DigitalOcean region where the cluster will reside.
func (o DatabaseClusterOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Database Droplet size associated with the cluster (ex. `db-s-1vcpu-1gb`). See here for a [list of valid size slugs](https://docs.digitalocean.com/reference/api/api-reference/#tag/Databases).
func (o DatabaseClusterOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Size }).(pulumi.StringOutput)
}

// A comma separated string specifying the  SQL modes for a MySQL cluster.
func (o DatabaseClusterOutput) SqlMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringPtrOutput { return v.SqlMode }).(pulumi.StringPtrOutput)
}

// Defines the disk size, in MiB, allocated to the cluster. This can be adjusted on MySQL and PostreSQL clusters based on predefined ranges for each slug/droplet size.
func (o DatabaseClusterOutput) StorageSizeMib() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.StorageSizeMib }).(pulumi.StringOutput)
}

// A list of tag names to be applied to the database cluster.
func (o DatabaseClusterOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Name of the OpenSearch dashboard db.
func (o DatabaseClusterOutput) UiDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.UiDatabase }).(pulumi.StringOutput)
}

// Hostname for the OpenSearch dashboard.
func (o DatabaseClusterOutput) UiHost() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.UiHost }).(pulumi.StringOutput)
}

// Password for the OpenSearch dashboard's default user.
func (o DatabaseClusterOutput) UiPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.UiPassword }).(pulumi.StringOutput)
}

// Network port that the OpenSearch dashboard is listening on.
func (o DatabaseClusterOutput) UiPort() pulumi.IntOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.IntOutput { return v.UiPort }).(pulumi.IntOutput)
}

// The full URI for connecting to the OpenSearch dashboard.
func (o DatabaseClusterOutput) UiUri() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.UiUri }).(pulumi.StringOutput)
}

// Username for OpenSearch dashboard's default user.
func (o DatabaseClusterOutput) UiUser() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.UiUser }).(pulumi.StringOutput)
}

// The full URI for connecting to the database cluster.
func (o DatabaseClusterOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

// Username for the cluster's default user.
func (o DatabaseClusterOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// Engine version used by the cluster (ex. `14` for PostgreSQL 14).
// When this value is changed, a call to the [Upgrade major Version for a Database](https://docs.digitalocean.com/reference/api/api-reference/#operation/databases_update_major_version) API operation is made with the new version.
func (o DatabaseClusterOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DatabaseCluster) pulumi.StringPtrOutput { return v.Version }).(pulumi.StringPtrOutput)
}

type DatabaseClusterArrayOutput struct{ *pulumi.OutputState }

func (DatabaseClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseCluster)(nil)).Elem()
}

func (o DatabaseClusterArrayOutput) ToDatabaseClusterArrayOutput() DatabaseClusterArrayOutput {
	return o
}

func (o DatabaseClusterArrayOutput) ToDatabaseClusterArrayOutputWithContext(ctx context.Context) DatabaseClusterArrayOutput {
	return o
}

func (o DatabaseClusterArrayOutput) Index(i pulumi.IntInput) DatabaseClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseCluster {
		return vs[0].([]*DatabaseCluster)[vs[1].(int)]
	}).(DatabaseClusterOutput)
}

type DatabaseClusterMapOutput struct{ *pulumi.OutputState }

func (DatabaseClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseCluster)(nil)).Elem()
}

func (o DatabaseClusterMapOutput) ToDatabaseClusterMapOutput() DatabaseClusterMapOutput {
	return o
}

func (o DatabaseClusterMapOutput) ToDatabaseClusterMapOutputWithContext(ctx context.Context) DatabaseClusterMapOutput {
	return o
}

func (o DatabaseClusterMapOutput) MapIndex(k pulumi.StringInput) DatabaseClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseCluster {
		return vs[0].(map[string]*DatabaseCluster)[vs[1].(string)]
	}).(DatabaseClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterInput)(nil)).Elem(), &DatabaseCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterArrayInput)(nil)).Elem(), DatabaseClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseClusterMapInput)(nil)).Elem(), DatabaseClusterMap{})
	pulumi.RegisterOutputType(DatabaseClusterOutput{})
	pulumi.RegisterOutputType(DatabaseClusterArrayOutput{})
	pulumi.RegisterOutputType(DatabaseClusterMapOutput{})
}
