// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a virtual resource that can be used to start an online migration
// for a DigitalOcean managed database cluster. Migrating a cluster establishes a
// connection with an existing cluster and replicates its contents to the target
// cluster. If the existing database is continuously being written to, the migration
// process will continue for up to two weeks unless it is manually stopped.
// Online migration is only available for MySQL, PostgreSQL, Caching, and Valkey clusters.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			source, err := digitalocean.NewDatabaseCluster(ctx, "source", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("st01"),
//				Engine:    pulumi.String("mysql"),
//				Version:   pulumi.String("8"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//				Tags: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			destination, err := digitalocean.NewDatabaseCluster(ctx, "destination", &digitalocean.DatabaseClusterArgs{
//				Name:      pulumi.String("dt01"),
//				Engine:    pulumi.String("mysql"),
//				Version:   pulumi.String("8"),
//				Size:      pulumi.String(digitalocean.DatabaseSlug_DB_1VPCU1GB),
//				Region:    pulumi.String(digitalocean.RegionNYC1),
//				NodeCount: pulumi.Int(1),
//				Tags: pulumi.StringArray{
//					pulumi.String("production"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			sourceDb, err := digitalocean.NewDatabaseDb(ctx, "source_db", &digitalocean.DatabaseDbArgs{
//				ClusterId: source.ID(),
//				Name:      pulumi.String("terraform-db-om-source"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = digitalocean.NewDatabaseOnlineMigration(ctx, "foobar", &digitalocean.DatabaseOnlineMigrationArgs{
//				ClusterId: destination.ID(),
//				Source: &digitalocean.DatabaseOnlineMigrationSourceArgs{
//					Host:     source.Host,
//					DbName:   sourceDb.Name,
//					Port:     source.Port,
//					Username: source.User,
//					Password: source.Password,
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				destination,
//				source,
//				sourceDb,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A MySQL database cluster's online_migration can be imported using the `id` the parent cluster, e.g.
//
// ```sh
// $ pulumi import digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration example 4b62829a-9c42-465b-aaa3-84051048e712
// ```
type DatabaseOnlineMigration struct {
	pulumi.CustomResourceState

	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The date and time when the online migration was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// When set to true, enables SSL encryption when connecting to the source database.
	DisableSsl pulumi.BoolPtrOutput `pulumi:"disableSsl"`
	// A list of databases that should be ignored during migration.
	IgnoreDbs pulumi.StringArrayOutput `pulumi:"ignoreDbs"`
	// Configuration for migration
	Source DatabaseOnlineMigrationSourceOutput `pulumi:"source"`
	// The status of the online migration
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewDatabaseOnlineMigration registers a new resource with the given unique name, arguments, and options.
func NewDatabaseOnlineMigration(ctx *pulumi.Context,
	name string, args *DatabaseOnlineMigrationArgs, opts ...pulumi.ResourceOption) (*DatabaseOnlineMigration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseOnlineMigration
	err := ctx.RegisterResource("digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseOnlineMigration gets an existing DatabaseOnlineMigration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseOnlineMigration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseOnlineMigrationState, opts ...pulumi.ResourceOption) (*DatabaseOnlineMigration, error) {
	var resource DatabaseOnlineMigration
	err := ctx.ReadResource("digitalocean:index/databaseOnlineMigration:DatabaseOnlineMigration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseOnlineMigration resources.
type databaseOnlineMigrationState struct {
	// The ID of the target MySQL cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The date and time when the online migration was created
	CreatedAt *string `pulumi:"createdAt"`
	// When set to true, enables SSL encryption when connecting to the source database.
	DisableSsl *bool `pulumi:"disableSsl"`
	// A list of databases that should be ignored during migration.
	IgnoreDbs []string `pulumi:"ignoreDbs"`
	// Configuration for migration
	Source *DatabaseOnlineMigrationSource `pulumi:"source"`
	// The status of the online migration
	Status *string `pulumi:"status"`
}

type DatabaseOnlineMigrationState struct {
	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringPtrInput
	// The date and time when the online migration was created
	CreatedAt pulumi.StringPtrInput
	// When set to true, enables SSL encryption when connecting to the source database.
	DisableSsl pulumi.BoolPtrInput
	// A list of databases that should be ignored during migration.
	IgnoreDbs pulumi.StringArrayInput
	// Configuration for migration
	Source DatabaseOnlineMigrationSourcePtrInput
	// The status of the online migration
	Status pulumi.StringPtrInput
}

func (DatabaseOnlineMigrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseOnlineMigrationState)(nil)).Elem()
}

type databaseOnlineMigrationArgs struct {
	// The ID of the target MySQL cluster.
	ClusterId string `pulumi:"clusterId"`
	// When set to true, enables SSL encryption when connecting to the source database.
	DisableSsl *bool `pulumi:"disableSsl"`
	// A list of databases that should be ignored during migration.
	IgnoreDbs []string `pulumi:"ignoreDbs"`
	// Configuration for migration
	Source DatabaseOnlineMigrationSource `pulumi:"source"`
}

// The set of arguments for constructing a DatabaseOnlineMigration resource.
type DatabaseOnlineMigrationArgs struct {
	// The ID of the target MySQL cluster.
	ClusterId pulumi.StringInput
	// When set to true, enables SSL encryption when connecting to the source database.
	DisableSsl pulumi.BoolPtrInput
	// A list of databases that should be ignored during migration.
	IgnoreDbs pulumi.StringArrayInput
	// Configuration for migration
	Source DatabaseOnlineMigrationSourceInput
}

func (DatabaseOnlineMigrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseOnlineMigrationArgs)(nil)).Elem()
}

type DatabaseOnlineMigrationInput interface {
	pulumi.Input

	ToDatabaseOnlineMigrationOutput() DatabaseOnlineMigrationOutput
	ToDatabaseOnlineMigrationOutputWithContext(ctx context.Context) DatabaseOnlineMigrationOutput
}

func (*DatabaseOnlineMigration) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOnlineMigration)(nil)).Elem()
}

func (i *DatabaseOnlineMigration) ToDatabaseOnlineMigrationOutput() DatabaseOnlineMigrationOutput {
	return i.ToDatabaseOnlineMigrationOutputWithContext(context.Background())
}

func (i *DatabaseOnlineMigration) ToDatabaseOnlineMigrationOutputWithContext(ctx context.Context) DatabaseOnlineMigrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOnlineMigrationOutput)
}

// DatabaseOnlineMigrationArrayInput is an input type that accepts DatabaseOnlineMigrationArray and DatabaseOnlineMigrationArrayOutput values.
// You can construct a concrete instance of `DatabaseOnlineMigrationArrayInput` via:
//
//	DatabaseOnlineMigrationArray{ DatabaseOnlineMigrationArgs{...} }
type DatabaseOnlineMigrationArrayInput interface {
	pulumi.Input

	ToDatabaseOnlineMigrationArrayOutput() DatabaseOnlineMigrationArrayOutput
	ToDatabaseOnlineMigrationArrayOutputWithContext(context.Context) DatabaseOnlineMigrationArrayOutput
}

type DatabaseOnlineMigrationArray []DatabaseOnlineMigrationInput

func (DatabaseOnlineMigrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseOnlineMigration)(nil)).Elem()
}

func (i DatabaseOnlineMigrationArray) ToDatabaseOnlineMigrationArrayOutput() DatabaseOnlineMigrationArrayOutput {
	return i.ToDatabaseOnlineMigrationArrayOutputWithContext(context.Background())
}

func (i DatabaseOnlineMigrationArray) ToDatabaseOnlineMigrationArrayOutputWithContext(ctx context.Context) DatabaseOnlineMigrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOnlineMigrationArrayOutput)
}

// DatabaseOnlineMigrationMapInput is an input type that accepts DatabaseOnlineMigrationMap and DatabaseOnlineMigrationMapOutput values.
// You can construct a concrete instance of `DatabaseOnlineMigrationMapInput` via:
//
//	DatabaseOnlineMigrationMap{ "key": DatabaseOnlineMigrationArgs{...} }
type DatabaseOnlineMigrationMapInput interface {
	pulumi.Input

	ToDatabaseOnlineMigrationMapOutput() DatabaseOnlineMigrationMapOutput
	ToDatabaseOnlineMigrationMapOutputWithContext(context.Context) DatabaseOnlineMigrationMapOutput
}

type DatabaseOnlineMigrationMap map[string]DatabaseOnlineMigrationInput

func (DatabaseOnlineMigrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseOnlineMigration)(nil)).Elem()
}

func (i DatabaseOnlineMigrationMap) ToDatabaseOnlineMigrationMapOutput() DatabaseOnlineMigrationMapOutput {
	return i.ToDatabaseOnlineMigrationMapOutputWithContext(context.Background())
}

func (i DatabaseOnlineMigrationMap) ToDatabaseOnlineMigrationMapOutputWithContext(ctx context.Context) DatabaseOnlineMigrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOnlineMigrationMapOutput)
}

type DatabaseOnlineMigrationOutput struct{ *pulumi.OutputState }

func (DatabaseOnlineMigrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseOnlineMigration)(nil)).Elem()
}

func (o DatabaseOnlineMigrationOutput) ToDatabaseOnlineMigrationOutput() DatabaseOnlineMigrationOutput {
	return o
}

func (o DatabaseOnlineMigrationOutput) ToDatabaseOnlineMigrationOutputWithContext(ctx context.Context) DatabaseOnlineMigrationOutput {
	return o
}

// The ID of the target MySQL cluster.
func (o DatabaseOnlineMigrationOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The date and time when the online migration was created
func (o DatabaseOnlineMigrationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// When set to true, enables SSL encryption when connecting to the source database.
func (o DatabaseOnlineMigrationOutput) DisableSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) pulumi.BoolPtrOutput { return v.DisableSsl }).(pulumi.BoolPtrOutput)
}

// A list of databases that should be ignored during migration.
func (o DatabaseOnlineMigrationOutput) IgnoreDbs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) pulumi.StringArrayOutput { return v.IgnoreDbs }).(pulumi.StringArrayOutput)
}

// Configuration for migration
func (o DatabaseOnlineMigrationOutput) Source() DatabaseOnlineMigrationSourceOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) DatabaseOnlineMigrationSourceOutput { return v.Source }).(DatabaseOnlineMigrationSourceOutput)
}

// The status of the online migration
func (o DatabaseOnlineMigrationOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseOnlineMigration) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type DatabaseOnlineMigrationArrayOutput struct{ *pulumi.OutputState }

func (DatabaseOnlineMigrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseOnlineMigration)(nil)).Elem()
}

func (o DatabaseOnlineMigrationArrayOutput) ToDatabaseOnlineMigrationArrayOutput() DatabaseOnlineMigrationArrayOutput {
	return o
}

func (o DatabaseOnlineMigrationArrayOutput) ToDatabaseOnlineMigrationArrayOutputWithContext(ctx context.Context) DatabaseOnlineMigrationArrayOutput {
	return o
}

func (o DatabaseOnlineMigrationArrayOutput) Index(i pulumi.IntInput) DatabaseOnlineMigrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseOnlineMigration {
		return vs[0].([]*DatabaseOnlineMigration)[vs[1].(int)]
	}).(DatabaseOnlineMigrationOutput)
}

type DatabaseOnlineMigrationMapOutput struct{ *pulumi.OutputState }

func (DatabaseOnlineMigrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseOnlineMigration)(nil)).Elem()
}

func (o DatabaseOnlineMigrationMapOutput) ToDatabaseOnlineMigrationMapOutput() DatabaseOnlineMigrationMapOutput {
	return o
}

func (o DatabaseOnlineMigrationMapOutput) ToDatabaseOnlineMigrationMapOutputWithContext(ctx context.Context) DatabaseOnlineMigrationMapOutput {
	return o
}

func (o DatabaseOnlineMigrationMapOutput) MapIndex(k pulumi.StringInput) DatabaseOnlineMigrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseOnlineMigration {
		return vs[0].(map[string]*DatabaseOnlineMigration)[vs[1].(string)]
	}).(DatabaseOnlineMigrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOnlineMigrationInput)(nil)).Elem(), &DatabaseOnlineMigration{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOnlineMigrationArrayInput)(nil)).Elem(), DatabaseOnlineMigrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseOnlineMigrationMapInput)(nil)).Elem(), DatabaseOnlineMigrationMap{})
	pulumi.RegisterOutputType(DatabaseOnlineMigrationOutput{})
	pulumi.RegisterOutputType(DatabaseOnlineMigrationArrayOutput{})
	pulumi.RegisterOutputType(DatabaseOnlineMigrationMapOutput{})
}
