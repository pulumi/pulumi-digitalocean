// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The provider type for the digitalocean package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The URL to use for the DigitalOcean API.
	ApiEndpoint pulumi.StringPtrOutput `pulumi:"apiEndpoint"`
	// The access key ID for Spaces API operations.
	SpacesAccessId pulumi.StringPtrOutput `pulumi:"spacesAccessId"`
	// The URL to use for the DigitalOcean Spaces API.
	SpacesEndpoint pulumi.StringPtrOutput `pulumi:"spacesEndpoint"`
	// The secret access key for Spaces API operations.
	SpacesSecretKey pulumi.StringPtrOutput `pulumi:"spacesSecretKey"`
	// The token key for API operations.
	Token pulumi.StringPtrOutput `pulumi:"token"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if isZero(args.ApiEndpoint) {
		args.ApiEndpoint = pulumi.StringPtr(getEnvOrDefault("https://api.digitalocean.com", nil, "DIGITALOCEAN_API_URL").(string))
	}
	if isZero(args.SpacesEndpoint) {
		args.SpacesEndpoint = pulumi.StringPtr(getEnvOrDefault("", nil, "SPACES_ENDPOINT_URL").(string))
	}
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:digitalocean", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The URL to use for the DigitalOcean API.
	ApiEndpoint *string `pulumi:"apiEndpoint"`
	// The access key ID for Spaces API operations.
	SpacesAccessId *string `pulumi:"spacesAccessId"`
	// The URL to use for the DigitalOcean Spaces API.
	SpacesEndpoint *string `pulumi:"spacesEndpoint"`
	// The secret access key for Spaces API operations.
	SpacesSecretKey *string `pulumi:"spacesSecretKey"`
	// The token key for API operations.
	Token *string `pulumi:"token"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The URL to use for the DigitalOcean API.
	ApiEndpoint pulumi.StringPtrInput
	// The access key ID for Spaces API operations.
	SpacesAccessId pulumi.StringPtrInput
	// The URL to use for the DigitalOcean Spaces API.
	SpacesEndpoint pulumi.StringPtrInput
	// The secret access key for Spaces API operations.
	SpacesSecretKey pulumi.StringPtrInput
	// The token key for API operations.
	Token pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
