// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetGenaiKnowledgeBases(ctx *pulumi.Context, args *GetGenaiKnowledgeBasesArgs, opts ...pulumi.InvokeOption) (*GetGenaiKnowledgeBasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGenaiKnowledgeBasesResult
	err := ctx.Invoke("digitalocean:index/getGenaiKnowledgeBases:getGenaiKnowledgeBases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGenaiKnowledgeBases.
type GetGenaiKnowledgeBasesArgs struct {
	Filters []GetGenaiKnowledgeBasesFilter `pulumi:"filters"`
	Sorts   []GetGenaiKnowledgeBasesSort   `pulumi:"sorts"`
}

// A collection of values returned by getGenaiKnowledgeBases.
type GetGenaiKnowledgeBasesResult struct {
	Filters []GetGenaiKnowledgeBasesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id             string                                `pulumi:"id"`
	KnowledgeBases []GetGenaiKnowledgeBasesKnowledgeBase `pulumi:"knowledgeBases"`
	Sorts          []GetGenaiKnowledgeBasesSort          `pulumi:"sorts"`
}

func GetGenaiKnowledgeBasesOutput(ctx *pulumi.Context, args GetGenaiKnowledgeBasesOutputArgs, opts ...pulumi.InvokeOption) GetGenaiKnowledgeBasesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGenaiKnowledgeBasesResultOutput, error) {
			args := v.(GetGenaiKnowledgeBasesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("digitalocean:index/getGenaiKnowledgeBases:getGenaiKnowledgeBases", args, GetGenaiKnowledgeBasesResultOutput{}, options).(GetGenaiKnowledgeBasesResultOutput), nil
		}).(GetGenaiKnowledgeBasesResultOutput)
}

// A collection of arguments for invoking getGenaiKnowledgeBases.
type GetGenaiKnowledgeBasesOutputArgs struct {
	Filters GetGenaiKnowledgeBasesFilterArrayInput `pulumi:"filters"`
	Sorts   GetGenaiKnowledgeBasesSortArrayInput   `pulumi:"sorts"`
}

func (GetGenaiKnowledgeBasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGenaiKnowledgeBasesArgs)(nil)).Elem()
}

// A collection of values returned by getGenaiKnowledgeBases.
type GetGenaiKnowledgeBasesResultOutput struct{ *pulumi.OutputState }

func (GetGenaiKnowledgeBasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGenaiKnowledgeBasesResult)(nil)).Elem()
}

func (o GetGenaiKnowledgeBasesResultOutput) ToGetGenaiKnowledgeBasesResultOutput() GetGenaiKnowledgeBasesResultOutput {
	return o
}

func (o GetGenaiKnowledgeBasesResultOutput) ToGetGenaiKnowledgeBasesResultOutputWithContext(ctx context.Context) GetGenaiKnowledgeBasesResultOutput {
	return o
}

func (o GetGenaiKnowledgeBasesResultOutput) Filters() GetGenaiKnowledgeBasesFilterArrayOutput {
	return o.ApplyT(func(v GetGenaiKnowledgeBasesResult) []GetGenaiKnowledgeBasesFilter { return v.Filters }).(GetGenaiKnowledgeBasesFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetGenaiKnowledgeBasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGenaiKnowledgeBasesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGenaiKnowledgeBasesResultOutput) KnowledgeBases() GetGenaiKnowledgeBasesKnowledgeBaseArrayOutput {
	return o.ApplyT(func(v GetGenaiKnowledgeBasesResult) []GetGenaiKnowledgeBasesKnowledgeBase { return v.KnowledgeBases }).(GetGenaiKnowledgeBasesKnowledgeBaseArrayOutput)
}

func (o GetGenaiKnowledgeBasesResultOutput) Sorts() GetGenaiKnowledgeBasesSortArrayOutput {
	return o.ApplyT(func(v GetGenaiKnowledgeBasesResult) []GetGenaiKnowledgeBasesSort { return v.Sorts }).(GetGenaiKnowledgeBasesSortArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGenaiKnowledgeBasesResultOutput{})
}
