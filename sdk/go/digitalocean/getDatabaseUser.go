// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides information on a DigitalOcean database user resource.
func LookupDatabaseUser(ctx *pulumi.Context, args *LookupDatabaseUserArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseUserResult
	err := ctx.Invoke("digitalocean:index/getDatabaseUser:getDatabaseUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseUser.
type LookupDatabaseUserArgs struct {
	// The ID of the database cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the database user.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatabaseUser.
type LookupDatabaseUserResult struct {
	ClusterId string `pulumi:"clusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The authentication method of the MySQL user. The value will be `mysqlNativePassword` or `cachingSha2Password`.
	MysqlAuthPlugin string `pulumi:"mysqlAuthPlugin"`
	Name            string `pulumi:"name"`
	// The password of the database user. This will not be set for MongoDB users.
	Password string `pulumi:"password"`
	// The role of the database user. The value will be either `primary` or `normal`.
	Role string `pulumi:"role"`
}

func LookupDatabaseUserOutput(ctx *pulumi.Context, args LookupDatabaseUserOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseUserResult, error) {
			args := v.(LookupDatabaseUserArgs)
			r, err := LookupDatabaseUser(ctx, &args, opts...)
			var s LookupDatabaseUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDatabaseUserResultOutput)
}

// A collection of arguments for invoking getDatabaseUser.
type LookupDatabaseUserOutputArgs struct {
	// The ID of the database cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the database user.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatabaseUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseUserArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseUser.
type LookupDatabaseUserResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseUserResult)(nil)).Elem()
}

func (o LookupDatabaseUserResultOutput) ToLookupDatabaseUserResultOutput() LookupDatabaseUserResultOutput {
	return o
}

func (o LookupDatabaseUserResultOutput) ToLookupDatabaseUserResultOutputWithContext(ctx context.Context) LookupDatabaseUserResultOutput {
	return o
}

func (o LookupDatabaseUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDatabaseUserResult] {
	return pulumix.Output[LookupDatabaseUserResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDatabaseUserResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// The authentication method of the MySQL user. The value will be `mysqlNativePassword` or `cachingSha2Password`.
func (o LookupDatabaseUserResultOutput) MysqlAuthPlugin() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.MysqlAuthPlugin }).(pulumi.StringOutput)
}

func (o LookupDatabaseUserResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.Name }).(pulumi.StringOutput)
}

// The password of the database user. This will not be set for MongoDB users.
func (o LookupDatabaseUserResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.Password }).(pulumi.StringOutput)
}

// The role of the database user. The value will be either `primary` or `normal`.
func (o LookupDatabaseUserResultOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseUserResult) string { return v.Role }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseUserResultOutput{})
}
