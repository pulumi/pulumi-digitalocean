// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a resource which can be used to create a snapshot from an existing DigitalOcean Droplet.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-digitalocean/blob/master/website/docs/r/droplet_snapshot.html.markdown.
type DropletSnapshot struct {
	s *pulumi.ResourceState
}

// NewDropletSnapshot registers a new resource with the given unique name, arguments, and options.
func NewDropletSnapshot(ctx *pulumi.Context,
	name string, args *DropletSnapshotArgs, opts ...pulumi.ResourceOpt) (*DropletSnapshot, error) {
	if args == nil || args.DropletId == nil {
		return nil, errors.New("missing required argument 'DropletId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dropletId"] = nil
		inputs["name"] = nil
	} else {
		inputs["dropletId"] = args.DropletId
		inputs["name"] = args.Name
	}
	inputs["createdAt"] = nil
	inputs["minDiskSize"] = nil
	inputs["regions"] = nil
	inputs["size"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/dropletSnapshot:DropletSnapshot", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DropletSnapshot{s: s}, nil
}

// GetDropletSnapshot gets an existing DropletSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletSnapshot(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DropletSnapshotState, opts ...pulumi.ResourceOpt) (*DropletSnapshot, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["createdAt"] = state.CreatedAt
		inputs["dropletId"] = state.DropletId
		inputs["minDiskSize"] = state.MinDiskSize
		inputs["name"] = state.Name
		inputs["regions"] = state.Regions
		inputs["size"] = state.Size
	}
	s, err := ctx.ReadResource("digitalocean:index/dropletSnapshot:DropletSnapshot", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DropletSnapshot{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DropletSnapshot) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DropletSnapshot) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The date and time the Droplet snapshot was created.
func (r *DropletSnapshot) CreatedAt() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["createdAt"])
}

// The ID of the Droplet from which the snapshot will be taken.
func (r *DropletSnapshot) DropletId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dropletId"])
}

// The minimum size in gigabytes required for a Droplet to be created based on this snapshot.
func (r *DropletSnapshot) MinDiskSize() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["minDiskSize"])
}

// A name for the Droplet snapshot.
func (r *DropletSnapshot) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// A list of DigitalOcean region "slugs" indicating where the droplet snapshot is available.
func (r *DropletSnapshot) Regions() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["regions"])
}

// The billable size of the Droplet snapshot in gigabytes.
func (r *DropletSnapshot) Size() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["size"])
}

// Input properties used for looking up and filtering DropletSnapshot resources.
type DropletSnapshotState struct {
	// The date and time the Droplet snapshot was created.
	CreatedAt interface{}
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId interface{}
	// The minimum size in gigabytes required for a Droplet to be created based on this snapshot.
	MinDiskSize interface{}
	// A name for the Droplet snapshot.
	Name interface{}
	// A list of DigitalOcean region "slugs" indicating where the droplet snapshot is available.
	Regions interface{}
	// The billable size of the Droplet snapshot in gigabytes.
	Size interface{}
}

// The set of arguments for constructing a DropletSnapshot resource.
type DropletSnapshotArgs struct {
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId interface{}
	// A name for the Droplet snapshot.
	Name interface{}
}
