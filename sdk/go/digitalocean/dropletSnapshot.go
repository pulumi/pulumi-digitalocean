// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a resource which can be used to create a snapshot from an existing DigitalOcean Droplet.
type DropletSnapshot struct {
	pulumi.CustomResourceState

	// The date and time the Droplet snapshot was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId pulumi.StringOutput `pulumi:"dropletId"`
	// The minimum size in gigabytes required for a Droplet to be created based on this snapshot.
	MinDiskSize pulumi.IntOutput `pulumi:"minDiskSize"`
	// A name for the Droplet snapshot.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of DigitalOcean region "slugs" indicating where the droplet snapshot is available.
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// The billable size of the Droplet snapshot in gigabytes.
	Size pulumi.Float64Output `pulumi:"size"`
}

// NewDropletSnapshot registers a new resource with the given unique name, arguments, and options.
func NewDropletSnapshot(ctx *pulumi.Context,
	name string, args *DropletSnapshotArgs, opts ...pulumi.ResourceOption) (*DropletSnapshot, error) {
	if args == nil || args.DropletId == nil {
		return nil, errors.New("missing required argument 'DropletId'")
	}
	if args == nil {
		args = &DropletSnapshotArgs{}
	}
	var resource DropletSnapshot
	err := ctx.RegisterResource("digitalocean:index/dropletSnapshot:DropletSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDropletSnapshot gets an existing DropletSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDropletSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DropletSnapshotState, opts ...pulumi.ResourceOption) (*DropletSnapshot, error) {
	var resource DropletSnapshot
	err := ctx.ReadResource("digitalocean:index/dropletSnapshot:DropletSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DropletSnapshot resources.
type dropletSnapshotState struct {
	// The date and time the Droplet snapshot was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId *string `pulumi:"dropletId"`
	// The minimum size in gigabytes required for a Droplet to be created based on this snapshot.
	MinDiskSize *int `pulumi:"minDiskSize"`
	// A name for the Droplet snapshot.
	Name *string `pulumi:"name"`
	// A list of DigitalOcean region "slugs" indicating where the droplet snapshot is available.
	Regions []string `pulumi:"regions"`
	// The billable size of the Droplet snapshot in gigabytes.
	Size *float64 `pulumi:"size"`
}

type DropletSnapshotState struct {
	// The date and time the Droplet snapshot was created.
	CreatedAt pulumi.StringPtrInput
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId pulumi.StringPtrInput
	// The minimum size in gigabytes required for a Droplet to be created based on this snapshot.
	MinDiskSize pulumi.IntPtrInput
	// A name for the Droplet snapshot.
	Name pulumi.StringPtrInput
	// A list of DigitalOcean region "slugs" indicating where the droplet snapshot is available.
	Regions pulumi.StringArrayInput
	// The billable size of the Droplet snapshot in gigabytes.
	Size pulumi.Float64PtrInput
}

func (DropletSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletSnapshotState)(nil)).Elem()
}

type dropletSnapshotArgs struct {
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId string `pulumi:"dropletId"`
	// A name for the Droplet snapshot.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DropletSnapshot resource.
type DropletSnapshotArgs struct {
	// The ID of the Droplet from which the snapshot will be taken.
	DropletId pulumi.StringInput
	// A name for the Droplet snapshot.
	Name pulumi.StringPtrInput
}

func (DropletSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dropletSnapshotArgs)(nil)).Elem()
}
