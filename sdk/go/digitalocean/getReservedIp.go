// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupReservedIp(ctx *pulumi.Context, args *LookupReservedIpArgs, opts ...pulumi.InvokeOption) (*LookupReservedIpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReservedIpResult
	err := ctx.Invoke("digitalocean:index/getReservedIp:getReservedIp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReservedIp.
type LookupReservedIpArgs struct {
	// The allocated IP address of the specific reserved IP to retrieve.
	IpAddress string `pulumi:"ipAddress"`
}

// A collection of values returned by getReservedIp.
type LookupReservedIpResult struct {
	// The Droplet id that the reserved IP has been assigned to.
	DropletId int `pulumi:"dropletId"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	IpAddress string `pulumi:"ipAddress"`
	// The region that the reserved IP is reserved to.
	Region string `pulumi:"region"`
	// The uniform resource name of the reserved IP.
	Urn string `pulumi:"urn"`
}

func LookupReservedIpOutput(ctx *pulumi.Context, args LookupReservedIpOutputArgs, opts ...pulumi.InvokeOption) LookupReservedIpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReservedIpResult, error) {
			args := v.(LookupReservedIpArgs)
			r, err := LookupReservedIp(ctx, &args, opts...)
			var s LookupReservedIpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReservedIpResultOutput)
}

// A collection of arguments for invoking getReservedIp.
type LookupReservedIpOutputArgs struct {
	// The allocated IP address of the specific reserved IP to retrieve.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (LookupReservedIpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIpArgs)(nil)).Elem()
}

// A collection of values returned by getReservedIp.
type LookupReservedIpResultOutput struct{ *pulumi.OutputState }

func (LookupReservedIpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReservedIpResult)(nil)).Elem()
}

func (o LookupReservedIpResultOutput) ToLookupReservedIpResultOutput() LookupReservedIpResultOutput {
	return o
}

func (o LookupReservedIpResultOutput) ToLookupReservedIpResultOutputWithContext(ctx context.Context) LookupReservedIpResultOutput {
	return o
}

func (o LookupReservedIpResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupReservedIpResult] {
	return pulumix.Output[LookupReservedIpResult]{
		OutputState: o.OutputState,
	}
}

// The Droplet id that the reserved IP has been assigned to.
func (o LookupReservedIpResultOutput) DropletId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReservedIpResult) int { return v.DropletId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupReservedIpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupReservedIpResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The region that the reserved IP is reserved to.
func (o LookupReservedIpResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Region }).(pulumi.StringOutput)
}

// The uniform resource name of the reserved IP.
func (o LookupReservedIpResultOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReservedIpResult) string { return v.Urn }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReservedIpResultOutput{})
}
