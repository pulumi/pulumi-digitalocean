// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GenaiKnowledgeBaseDataSource struct {
	pulumi.CustomResourceState

	// UUID of the Knowledge Base
	KnowledgeBaseUuid    pulumi.StringOutput                                       `pulumi:"knowledgeBaseUuid"`
	SpacesDataSource     GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrOutput     `pulumi:"spacesDataSource"`
	WebCrawlerDataSource GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrOutput `pulumi:"webCrawlerDataSource"`
}

// NewGenaiKnowledgeBaseDataSource registers a new resource with the given unique name, arguments, and options.
func NewGenaiKnowledgeBaseDataSource(ctx *pulumi.Context,
	name string, args *GenaiKnowledgeBaseDataSourceArgs, opts ...pulumi.ResourceOption) (*GenaiKnowledgeBaseDataSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KnowledgeBaseUuid == nil {
		return nil, errors.New("invalid value for required argument 'KnowledgeBaseUuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenaiKnowledgeBaseDataSource
	err := ctx.RegisterResource("digitalocean:index/genaiKnowledgeBaseDataSource:GenaiKnowledgeBaseDataSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenaiKnowledgeBaseDataSource gets an existing GenaiKnowledgeBaseDataSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenaiKnowledgeBaseDataSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenaiKnowledgeBaseDataSourceState, opts ...pulumi.ResourceOption) (*GenaiKnowledgeBaseDataSource, error) {
	var resource GenaiKnowledgeBaseDataSource
	err := ctx.ReadResource("digitalocean:index/genaiKnowledgeBaseDataSource:GenaiKnowledgeBaseDataSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenaiKnowledgeBaseDataSource resources.
type genaiKnowledgeBaseDataSourceState struct {
	// UUID of the Knowledge Base
	KnowledgeBaseUuid    *string                                           `pulumi:"knowledgeBaseUuid"`
	SpacesDataSource     *GenaiKnowledgeBaseDataSourceSpacesDataSource     `pulumi:"spacesDataSource"`
	WebCrawlerDataSource *GenaiKnowledgeBaseDataSourceWebCrawlerDataSource `pulumi:"webCrawlerDataSource"`
}

type GenaiKnowledgeBaseDataSourceState struct {
	// UUID of the Knowledge Base
	KnowledgeBaseUuid    pulumi.StringPtrInput
	SpacesDataSource     GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrInput
	WebCrawlerDataSource GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrInput
}

func (GenaiKnowledgeBaseDataSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiKnowledgeBaseDataSourceState)(nil)).Elem()
}

type genaiKnowledgeBaseDataSourceArgs struct {
	// UUID of the Knowledge Base
	KnowledgeBaseUuid    string                                            `pulumi:"knowledgeBaseUuid"`
	SpacesDataSource     *GenaiKnowledgeBaseDataSourceSpacesDataSource     `pulumi:"spacesDataSource"`
	WebCrawlerDataSource *GenaiKnowledgeBaseDataSourceWebCrawlerDataSource `pulumi:"webCrawlerDataSource"`
}

// The set of arguments for constructing a GenaiKnowledgeBaseDataSource resource.
type GenaiKnowledgeBaseDataSourceArgs struct {
	// UUID of the Knowledge Base
	KnowledgeBaseUuid    pulumi.StringInput
	SpacesDataSource     GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrInput
	WebCrawlerDataSource GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrInput
}

func (GenaiKnowledgeBaseDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiKnowledgeBaseDataSourceArgs)(nil)).Elem()
}

type GenaiKnowledgeBaseDataSourceInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseDataSourceOutput() GenaiKnowledgeBaseDataSourceOutput
	ToGenaiKnowledgeBaseDataSourceOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceOutput
}

func (*GenaiKnowledgeBaseDataSource) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (i *GenaiKnowledgeBaseDataSource) ToGenaiKnowledgeBaseDataSourceOutput() GenaiKnowledgeBaseDataSourceOutput {
	return i.ToGenaiKnowledgeBaseDataSourceOutputWithContext(context.Background())
}

func (i *GenaiKnowledgeBaseDataSource) ToGenaiKnowledgeBaseDataSourceOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseDataSourceOutput)
}

// GenaiKnowledgeBaseDataSourceArrayInput is an input type that accepts GenaiKnowledgeBaseDataSourceArray and GenaiKnowledgeBaseDataSourceArrayOutput values.
// You can construct a concrete instance of `GenaiKnowledgeBaseDataSourceArrayInput` via:
//
//	GenaiKnowledgeBaseDataSourceArray{ GenaiKnowledgeBaseDataSourceArgs{...} }
type GenaiKnowledgeBaseDataSourceArrayInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseDataSourceArrayOutput() GenaiKnowledgeBaseDataSourceArrayOutput
	ToGenaiKnowledgeBaseDataSourceArrayOutputWithContext(context.Context) GenaiKnowledgeBaseDataSourceArrayOutput
}

type GenaiKnowledgeBaseDataSourceArray []GenaiKnowledgeBaseDataSourceInput

func (GenaiKnowledgeBaseDataSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (i GenaiKnowledgeBaseDataSourceArray) ToGenaiKnowledgeBaseDataSourceArrayOutput() GenaiKnowledgeBaseDataSourceArrayOutput {
	return i.ToGenaiKnowledgeBaseDataSourceArrayOutputWithContext(context.Background())
}

func (i GenaiKnowledgeBaseDataSourceArray) ToGenaiKnowledgeBaseDataSourceArrayOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseDataSourceArrayOutput)
}

// GenaiKnowledgeBaseDataSourceMapInput is an input type that accepts GenaiKnowledgeBaseDataSourceMap and GenaiKnowledgeBaseDataSourceMapOutput values.
// You can construct a concrete instance of `GenaiKnowledgeBaseDataSourceMapInput` via:
//
//	GenaiKnowledgeBaseDataSourceMap{ "key": GenaiKnowledgeBaseDataSourceArgs{...} }
type GenaiKnowledgeBaseDataSourceMapInput interface {
	pulumi.Input

	ToGenaiKnowledgeBaseDataSourceMapOutput() GenaiKnowledgeBaseDataSourceMapOutput
	ToGenaiKnowledgeBaseDataSourceMapOutputWithContext(context.Context) GenaiKnowledgeBaseDataSourceMapOutput
}

type GenaiKnowledgeBaseDataSourceMap map[string]GenaiKnowledgeBaseDataSourceInput

func (GenaiKnowledgeBaseDataSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (i GenaiKnowledgeBaseDataSourceMap) ToGenaiKnowledgeBaseDataSourceMapOutput() GenaiKnowledgeBaseDataSourceMapOutput {
	return i.ToGenaiKnowledgeBaseDataSourceMapOutputWithContext(context.Background())
}

func (i GenaiKnowledgeBaseDataSourceMap) ToGenaiKnowledgeBaseDataSourceMapOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiKnowledgeBaseDataSourceMapOutput)
}

type GenaiKnowledgeBaseDataSourceOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (o GenaiKnowledgeBaseDataSourceOutput) ToGenaiKnowledgeBaseDataSourceOutput() GenaiKnowledgeBaseDataSourceOutput {
	return o
}

func (o GenaiKnowledgeBaseDataSourceOutput) ToGenaiKnowledgeBaseDataSourceOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceOutput {
	return o
}

// UUID of the Knowledge Base
func (o GenaiKnowledgeBaseDataSourceOutput) KnowledgeBaseUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBaseDataSource) pulumi.StringOutput { return v.KnowledgeBaseUuid }).(pulumi.StringOutput)
}

func (o GenaiKnowledgeBaseDataSourceOutput) SpacesDataSource() GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBaseDataSource) GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrOutput {
		return v.SpacesDataSource
	}).(GenaiKnowledgeBaseDataSourceSpacesDataSourcePtrOutput)
}

func (o GenaiKnowledgeBaseDataSourceOutput) WebCrawlerDataSource() GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrOutput {
	return o.ApplyT(func(v *GenaiKnowledgeBaseDataSource) GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrOutput {
		return v.WebCrawlerDataSource
	}).(GenaiKnowledgeBaseDataSourceWebCrawlerDataSourcePtrOutput)
}

type GenaiKnowledgeBaseDataSourceArrayOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseDataSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (o GenaiKnowledgeBaseDataSourceArrayOutput) ToGenaiKnowledgeBaseDataSourceArrayOutput() GenaiKnowledgeBaseDataSourceArrayOutput {
	return o
}

func (o GenaiKnowledgeBaseDataSourceArrayOutput) ToGenaiKnowledgeBaseDataSourceArrayOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceArrayOutput {
	return o
}

func (o GenaiKnowledgeBaseDataSourceArrayOutput) Index(i pulumi.IntInput) GenaiKnowledgeBaseDataSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenaiKnowledgeBaseDataSource {
		return vs[0].([]*GenaiKnowledgeBaseDataSource)[vs[1].(int)]
	}).(GenaiKnowledgeBaseDataSourceOutput)
}

type GenaiKnowledgeBaseDataSourceMapOutput struct{ *pulumi.OutputState }

func (GenaiKnowledgeBaseDataSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiKnowledgeBaseDataSource)(nil)).Elem()
}

func (o GenaiKnowledgeBaseDataSourceMapOutput) ToGenaiKnowledgeBaseDataSourceMapOutput() GenaiKnowledgeBaseDataSourceMapOutput {
	return o
}

func (o GenaiKnowledgeBaseDataSourceMapOutput) ToGenaiKnowledgeBaseDataSourceMapOutputWithContext(ctx context.Context) GenaiKnowledgeBaseDataSourceMapOutput {
	return o
}

func (o GenaiKnowledgeBaseDataSourceMapOutput) MapIndex(k pulumi.StringInput) GenaiKnowledgeBaseDataSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenaiKnowledgeBaseDataSource {
		return vs[0].(map[string]*GenaiKnowledgeBaseDataSource)[vs[1].(string)]
	}).(GenaiKnowledgeBaseDataSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseDataSourceInput)(nil)).Elem(), &GenaiKnowledgeBaseDataSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseDataSourceArrayInput)(nil)).Elem(), GenaiKnowledgeBaseDataSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiKnowledgeBaseDataSourceMapInput)(nil)).Elem(), GenaiKnowledgeBaseDataSourceMap{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseDataSourceOutput{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseDataSourceArrayOutput{})
	pulumi.RegisterOutputType(GenaiKnowledgeBaseDataSourceMapOutput{})
}
