// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ReservedIpv6 struct {
	pulumi.CustomResourceState

	DropletId  pulumi.IntOutput    `pulumi:"dropletId"`
	Ip         pulumi.StringOutput `pulumi:"ip"`
	RegionSlug pulumi.StringOutput `pulumi:"regionSlug"`
	// the uniform resource name for the reserved ipv6
	Urn pulumi.StringOutput `pulumi:"urn"`
}

// NewReservedIpv6 registers a new resource with the given unique name, arguments, and options.
func NewReservedIpv6(ctx *pulumi.Context,
	name string, args *ReservedIpv6Args, opts ...pulumi.ResourceOption) (*ReservedIpv6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionSlug == nil {
		return nil, errors.New("invalid value for required argument 'RegionSlug'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReservedIpv6
	err := ctx.RegisterResource("digitalocean:index/reservedIpv6:ReservedIpv6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReservedIpv6 gets an existing ReservedIpv6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReservedIpv6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReservedIpv6State, opts ...pulumi.ResourceOption) (*ReservedIpv6, error) {
	var resource ReservedIpv6
	err := ctx.ReadResource("digitalocean:index/reservedIpv6:ReservedIpv6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReservedIpv6 resources.
type reservedIpv6State struct {
	DropletId  *int    `pulumi:"dropletId"`
	Ip         *string `pulumi:"ip"`
	RegionSlug *string `pulumi:"regionSlug"`
	// the uniform resource name for the reserved ipv6
	Urn *string `pulumi:"urn"`
}

type ReservedIpv6State struct {
	DropletId  pulumi.IntPtrInput
	Ip         pulumi.StringPtrInput
	RegionSlug pulumi.StringPtrInput
	// the uniform resource name for the reserved ipv6
	Urn pulumi.StringPtrInput
}

func (ReservedIpv6State) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpv6State)(nil)).Elem()
}

type reservedIpv6Args struct {
	DropletId  *int    `pulumi:"dropletId"`
	Ip         *string `pulumi:"ip"`
	RegionSlug string  `pulumi:"regionSlug"`
}

// The set of arguments for constructing a ReservedIpv6 resource.
type ReservedIpv6Args struct {
	DropletId  pulumi.IntPtrInput
	Ip         pulumi.StringPtrInput
	RegionSlug pulumi.StringInput
}

func (ReservedIpv6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*reservedIpv6Args)(nil)).Elem()
}

type ReservedIpv6Input interface {
	pulumi.Input

	ToReservedIpv6Output() ReservedIpv6Output
	ToReservedIpv6OutputWithContext(ctx context.Context) ReservedIpv6Output
}

func (*ReservedIpv6) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpv6)(nil)).Elem()
}

func (i *ReservedIpv6) ToReservedIpv6Output() ReservedIpv6Output {
	return i.ToReservedIpv6OutputWithContext(context.Background())
}

func (i *ReservedIpv6) ToReservedIpv6OutputWithContext(ctx context.Context) ReservedIpv6Output {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6Output)
}

// ReservedIpv6ArrayInput is an input type that accepts ReservedIpv6Array and ReservedIpv6ArrayOutput values.
// You can construct a concrete instance of `ReservedIpv6ArrayInput` via:
//
//	ReservedIpv6Array{ ReservedIpv6Args{...} }
type ReservedIpv6ArrayInput interface {
	pulumi.Input

	ToReservedIpv6ArrayOutput() ReservedIpv6ArrayOutput
	ToReservedIpv6ArrayOutputWithContext(context.Context) ReservedIpv6ArrayOutput
}

type ReservedIpv6Array []ReservedIpv6Input

func (ReservedIpv6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpv6)(nil)).Elem()
}

func (i ReservedIpv6Array) ToReservedIpv6ArrayOutput() ReservedIpv6ArrayOutput {
	return i.ToReservedIpv6ArrayOutputWithContext(context.Background())
}

func (i ReservedIpv6Array) ToReservedIpv6ArrayOutputWithContext(ctx context.Context) ReservedIpv6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6ArrayOutput)
}

// ReservedIpv6MapInput is an input type that accepts ReservedIpv6Map and ReservedIpv6MapOutput values.
// You can construct a concrete instance of `ReservedIpv6MapInput` via:
//
//	ReservedIpv6Map{ "key": ReservedIpv6Args{...} }
type ReservedIpv6MapInput interface {
	pulumi.Input

	ToReservedIpv6MapOutput() ReservedIpv6MapOutput
	ToReservedIpv6MapOutputWithContext(context.Context) ReservedIpv6MapOutput
}

type ReservedIpv6Map map[string]ReservedIpv6Input

func (ReservedIpv6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpv6)(nil)).Elem()
}

func (i ReservedIpv6Map) ToReservedIpv6MapOutput() ReservedIpv6MapOutput {
	return i.ToReservedIpv6MapOutputWithContext(context.Background())
}

func (i ReservedIpv6Map) ToReservedIpv6MapOutputWithContext(ctx context.Context) ReservedIpv6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReservedIpv6MapOutput)
}

type ReservedIpv6Output struct{ *pulumi.OutputState }

func (ReservedIpv6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**ReservedIpv6)(nil)).Elem()
}

func (o ReservedIpv6Output) ToReservedIpv6Output() ReservedIpv6Output {
	return o
}

func (o ReservedIpv6Output) ToReservedIpv6OutputWithContext(ctx context.Context) ReservedIpv6Output {
	return o
}

func (o ReservedIpv6Output) DropletId() pulumi.IntOutput {
	return o.ApplyT(func(v *ReservedIpv6) pulumi.IntOutput { return v.DropletId }).(pulumi.IntOutput)
}

func (o ReservedIpv6Output) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpv6) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o ReservedIpv6Output) RegionSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpv6) pulumi.StringOutput { return v.RegionSlug }).(pulumi.StringOutput)
}

// the uniform resource name for the reserved ipv6
func (o ReservedIpv6Output) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v *ReservedIpv6) pulumi.StringOutput { return v.Urn }).(pulumi.StringOutput)
}

type ReservedIpv6ArrayOutput struct{ *pulumi.OutputState }

func (ReservedIpv6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReservedIpv6)(nil)).Elem()
}

func (o ReservedIpv6ArrayOutput) ToReservedIpv6ArrayOutput() ReservedIpv6ArrayOutput {
	return o
}

func (o ReservedIpv6ArrayOutput) ToReservedIpv6ArrayOutputWithContext(ctx context.Context) ReservedIpv6ArrayOutput {
	return o
}

func (o ReservedIpv6ArrayOutput) Index(i pulumi.IntInput) ReservedIpv6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReservedIpv6 {
		return vs[0].([]*ReservedIpv6)[vs[1].(int)]
	}).(ReservedIpv6Output)
}

type ReservedIpv6MapOutput struct{ *pulumi.OutputState }

func (ReservedIpv6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReservedIpv6)(nil)).Elem()
}

func (o ReservedIpv6MapOutput) ToReservedIpv6MapOutput() ReservedIpv6MapOutput {
	return o
}

func (o ReservedIpv6MapOutput) ToReservedIpv6MapOutputWithContext(ctx context.Context) ReservedIpv6MapOutput {
	return o
}

func (o ReservedIpv6MapOutput) MapIndex(k pulumi.StringInput) ReservedIpv6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReservedIpv6 {
		return vs[0].(map[string]*ReservedIpv6)[vs[1].(string)]
	}).(ReservedIpv6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6Input)(nil)).Elem(), &ReservedIpv6{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6ArrayInput)(nil)).Elem(), ReservedIpv6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReservedIpv6MapInput)(nil)).Elem(), ReservedIpv6Map{})
	pulumi.RegisterOutputType(ReservedIpv6Output{})
	pulumi.RegisterOutputType(ReservedIpv6ArrayOutput{})
	pulumi.RegisterOutputType(ReservedIpv6MapOutput{})
}
