// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides information on a DigitalOcean PostgreSQL database connection pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := digitalocean.LookupDatabaseCluster(ctx, &digitalocean.LookupDatabaseClusterArgs{
//				Name: "example-cluster",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			read_only, err := digitalocean.LookupDatabaseConnectionPool(ctx, &digitalocean.LookupDatabaseConnectionPoolArgs{
//				ClusterId: example.Id,
//				Name:      "pool-01",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("connectionPoolUriOutput", read_only.Uri)
//			return nil
//		})
//	}
//
// ```
func LookupDatabaseConnectionPool(ctx *pulumi.Context, args *LookupDatabaseConnectionPoolArgs, opts ...pulumi.InvokeOption) (*LookupDatabaseConnectionPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDatabaseConnectionPoolResult
	err := ctx.Invoke("digitalocean:index/getDatabaseConnectionPool:getDatabaseConnectionPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseConnectionPool.
type LookupDatabaseConnectionPoolArgs struct {
	// The ID of the original source database cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name for the database connection pool.
	Name string `pulumi:"name"`
}

// A collection of values returned by getDatabaseConnectionPool.
type LookupDatabaseConnectionPoolResult struct {
	ClusterId string `pulumi:"clusterId"`
	// Name of the connection pool's default database.
	DbName string `pulumi:"dbName"`
	// Connection pool hostname.
	Host string `pulumi:"host"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The transaction mode for the connection pool.
	Mode string `pulumi:"mode"`
	Name string `pulumi:"name"`
	// Password for the connection pool's default user.
	Password string `pulumi:"password"`
	// Network port that the connection pool is listening on.
	Port int `pulumi:"port"`
	// Same as `host`, but only accessible from resources within the account and in the same region.
	PrivateHost string `pulumi:"privateHost"`
	// Same as `uri`, but only accessible from resources within the account and in the same region.
	PrivateUri string `pulumi:"privateUri"`
	// Size of the connection pool.
	Size int `pulumi:"size"`
	// The full URI for connecting to the database connection pool.
	Uri string `pulumi:"uri"`
	// Username for the connection pool's default user.
	User string `pulumi:"user"`
}

func LookupDatabaseConnectionPoolOutput(ctx *pulumi.Context, args LookupDatabaseConnectionPoolOutputArgs, opts ...pulumi.InvokeOption) LookupDatabaseConnectionPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDatabaseConnectionPoolResultOutput, error) {
			args := v.(LookupDatabaseConnectionPoolArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupDatabaseConnectionPoolResult
			secret, err := ctx.InvokePackageRaw("digitalocean:index/getDatabaseConnectionPool:getDatabaseConnectionPool", args, &rv, "", opts...)
			if err != nil {
				return LookupDatabaseConnectionPoolResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupDatabaseConnectionPoolResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupDatabaseConnectionPoolResultOutput), nil
			}
			return output, nil
		}).(LookupDatabaseConnectionPoolResultOutput)
}

// A collection of arguments for invoking getDatabaseConnectionPool.
type LookupDatabaseConnectionPoolOutputArgs struct {
	// The ID of the original source database cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name for the database connection pool.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupDatabaseConnectionPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseConnectionPoolArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseConnectionPool.
type LookupDatabaseConnectionPoolResultOutput struct{ *pulumi.OutputState }

func (LookupDatabaseConnectionPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDatabaseConnectionPoolResult)(nil)).Elem()
}

func (o LookupDatabaseConnectionPoolResultOutput) ToLookupDatabaseConnectionPoolResultOutput() LookupDatabaseConnectionPoolResultOutput {
	return o
}

func (o LookupDatabaseConnectionPoolResultOutput) ToLookupDatabaseConnectionPoolResultOutputWithContext(ctx context.Context) LookupDatabaseConnectionPoolResultOutput {
	return o
}

func (o LookupDatabaseConnectionPoolResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Name of the connection pool's default database.
func (o LookupDatabaseConnectionPoolResultOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.DbName }).(pulumi.StringOutput)
}

// Connection pool hostname.
func (o LookupDatabaseConnectionPoolResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Host }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDatabaseConnectionPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The transaction mode for the connection pool.
func (o LookupDatabaseConnectionPoolResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o LookupDatabaseConnectionPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// Password for the connection pool's default user.
func (o LookupDatabaseConnectionPoolResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Password }).(pulumi.StringOutput)
}

// Network port that the connection pool is listening on.
func (o LookupDatabaseConnectionPoolResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) int { return v.Port }).(pulumi.IntOutput)
}

// Same as `host`, but only accessible from resources within the account and in the same region.
func (o LookupDatabaseConnectionPoolResultOutput) PrivateHost() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.PrivateHost }).(pulumi.StringOutput)
}

// Same as `uri`, but only accessible from resources within the account and in the same region.
func (o LookupDatabaseConnectionPoolResultOutput) PrivateUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.PrivateUri }).(pulumi.StringOutput)
}

// Size of the connection pool.
func (o LookupDatabaseConnectionPoolResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) int { return v.Size }).(pulumi.IntOutput)
}

// The full URI for connecting to the database connection pool.
func (o LookupDatabaseConnectionPoolResultOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.Uri }).(pulumi.StringOutput)
}

// Username for the connection pool's default user.
func (o LookupDatabaseConnectionPoolResultOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDatabaseConnectionPoolResult) string { return v.User }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDatabaseConnectionPoolResultOutput{})
}
