// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Retrieve information about all supported DigitalOcean regions, with the ability to
// filter and sort the results. If no filters are specified, all regions will be returned.
//
// Note: You can use the `getRegion` data source
// to obtain metadata about a single region if you already know the `slug` to retrieve.
//
// ## Example Usage
//
// Use the `filter` block with a `key` string and `values` list to filter regions.
//
// For example to find all available regions:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v2/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.GetRegions(ctx, &digitalocean.GetRegionsArgs{
// 			Filters: []digitalocean.GetRegionsFilter{
// 				digitalocean.GetRegionsFilter{
// 					Key: "available",
// 					Values: []string{
// 						"true",
// 					},
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// You can filter on multiple fields and sort the results as well:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-digitalocean/sdk/v2/go/digitalocean"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := digitalocean.GetRegions(ctx, &digitalocean.GetRegionsArgs{
// 			Filters: []digitalocean.GetRegionsFilter{
// 				digitalocean.GetRegionsFilter{
// 					Key: "available",
// 					Values: []string{
// 						"true",
// 					},
// 				},
// 				digitalocean.GetRegionsFilter{
// 					Key: "features",
// 					Values: []string{
// 						"private_networking",
// 					},
// 				},
// 			},
// 			Sorts: []digitalocean.GetRegionsSort{
// 				digitalocean.GetRegionsSort{
// 					Direction: "desc",
// 					Key:       "name",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetRegions(ctx *pulumi.Context, args *GetRegionsArgs, opts ...pulumi.InvokeOption) (*GetRegionsResult, error) {
	var rv GetRegionsResult
	err := ctx.Invoke("digitalocean:index/getRegions:getRegions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegions.
type GetRegionsArgs struct {
	// Filter the results.
	// The `filter` block is documented below.
	Filters []GetRegionsFilter `pulumi:"filters"`
	// Sort the results.
	// The `sort` block is documented below.
	Sorts []GetRegionsSort `pulumi:"sorts"`
}

// A collection of values returned by getRegions.
type GetRegionsResult struct {
	Filters []GetRegionsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A set of regions satisfying any `filter` and `sort` criteria. Each region has the following attributes:
	// - `slug` - A human-readable string that is used as a unique identifier for each region.
	// - `name` - The display name of the region.
	// - `available` - A boolean value that represents whether new Droplets can be created in this region.
	// - `sizes` - A set of identifying slugs for the Droplet sizes available in this region.
	// - `features` - A set of features available in this region.
	Regions []GetRegionsRegion `pulumi:"regions"`
	Sorts   []GetRegionsSort   `pulumi:"sorts"`
}
