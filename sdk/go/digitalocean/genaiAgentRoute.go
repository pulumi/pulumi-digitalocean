// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-digitalocean/sdk/v4/go/digitalocean/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type GenaiAgentRoute struct {
	pulumi.CustomResourceState

	// The UUID of the child agent.
	ChildAgentUuid pulumi.StringOutput `pulumi:"childAgentUuid"`
	// if-case condition for the route.
	IfCase pulumi.StringPtrOutput `pulumi:"ifCase"`
	// The UUID of the parent agent.
	ParentAgentUuid pulumi.StringOutput  `pulumi:"parentAgentUuid"`
	Rollback        pulumi.BoolPtrOutput `pulumi:"rollback"`
	// A name for the route.
	RouteName pulumi.StringPtrOutput `pulumi:"routeName"`
	// The UUID of the linkage
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewGenaiAgentRoute registers a new resource with the given unique name, arguments, and options.
func NewGenaiAgentRoute(ctx *pulumi.Context,
	name string, args *GenaiAgentRouteArgs, opts ...pulumi.ResourceOption) (*GenaiAgentRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChildAgentUuid == nil {
		return nil, errors.New("invalid value for required argument 'ChildAgentUuid'")
	}
	if args.ParentAgentUuid == nil {
		return nil, errors.New("invalid value for required argument 'ParentAgentUuid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GenaiAgentRoute
	err := ctx.RegisterResource("digitalocean:index/genaiAgentRoute:GenaiAgentRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenaiAgentRoute gets an existing GenaiAgentRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenaiAgentRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenaiAgentRouteState, opts ...pulumi.ResourceOption) (*GenaiAgentRoute, error) {
	var resource GenaiAgentRoute
	err := ctx.ReadResource("digitalocean:index/genaiAgentRoute:GenaiAgentRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenaiAgentRoute resources.
type genaiAgentRouteState struct {
	// The UUID of the child agent.
	ChildAgentUuid *string `pulumi:"childAgentUuid"`
	// if-case condition for the route.
	IfCase *string `pulumi:"ifCase"`
	// The UUID of the parent agent.
	ParentAgentUuid *string `pulumi:"parentAgentUuid"`
	Rollback        *bool   `pulumi:"rollback"`
	// A name for the route.
	RouteName *string `pulumi:"routeName"`
	// The UUID of the linkage
	Uuid *string `pulumi:"uuid"`
}

type GenaiAgentRouteState struct {
	// The UUID of the child agent.
	ChildAgentUuid pulumi.StringPtrInput
	// if-case condition for the route.
	IfCase pulumi.StringPtrInput
	// The UUID of the parent agent.
	ParentAgentUuid pulumi.StringPtrInput
	Rollback        pulumi.BoolPtrInput
	// A name for the route.
	RouteName pulumi.StringPtrInput
	// The UUID of the linkage
	Uuid pulumi.StringPtrInput
}

func (GenaiAgentRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiAgentRouteState)(nil)).Elem()
}

type genaiAgentRouteArgs struct {
	// The UUID of the child agent.
	ChildAgentUuid string `pulumi:"childAgentUuid"`
	// if-case condition for the route.
	IfCase *string `pulumi:"ifCase"`
	// The UUID of the parent agent.
	ParentAgentUuid string `pulumi:"parentAgentUuid"`
	Rollback        *bool  `pulumi:"rollback"`
	// A name for the route.
	RouteName *string `pulumi:"routeName"`
}

// The set of arguments for constructing a GenaiAgentRoute resource.
type GenaiAgentRouteArgs struct {
	// The UUID of the child agent.
	ChildAgentUuid pulumi.StringInput
	// if-case condition for the route.
	IfCase pulumi.StringPtrInput
	// The UUID of the parent agent.
	ParentAgentUuid pulumi.StringInput
	Rollback        pulumi.BoolPtrInput
	// A name for the route.
	RouteName pulumi.StringPtrInput
}

func (GenaiAgentRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genaiAgentRouteArgs)(nil)).Elem()
}

type GenaiAgentRouteInput interface {
	pulumi.Input

	ToGenaiAgentRouteOutput() GenaiAgentRouteOutput
	ToGenaiAgentRouteOutputWithContext(ctx context.Context) GenaiAgentRouteOutput
}

func (*GenaiAgentRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiAgentRoute)(nil)).Elem()
}

func (i *GenaiAgentRoute) ToGenaiAgentRouteOutput() GenaiAgentRouteOutput {
	return i.ToGenaiAgentRouteOutputWithContext(context.Background())
}

func (i *GenaiAgentRoute) ToGenaiAgentRouteOutputWithContext(ctx context.Context) GenaiAgentRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiAgentRouteOutput)
}

// GenaiAgentRouteArrayInput is an input type that accepts GenaiAgentRouteArray and GenaiAgentRouteArrayOutput values.
// You can construct a concrete instance of `GenaiAgentRouteArrayInput` via:
//
//	GenaiAgentRouteArray{ GenaiAgentRouteArgs{...} }
type GenaiAgentRouteArrayInput interface {
	pulumi.Input

	ToGenaiAgentRouteArrayOutput() GenaiAgentRouteArrayOutput
	ToGenaiAgentRouteArrayOutputWithContext(context.Context) GenaiAgentRouteArrayOutput
}

type GenaiAgentRouteArray []GenaiAgentRouteInput

func (GenaiAgentRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiAgentRoute)(nil)).Elem()
}

func (i GenaiAgentRouteArray) ToGenaiAgentRouteArrayOutput() GenaiAgentRouteArrayOutput {
	return i.ToGenaiAgentRouteArrayOutputWithContext(context.Background())
}

func (i GenaiAgentRouteArray) ToGenaiAgentRouteArrayOutputWithContext(ctx context.Context) GenaiAgentRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiAgentRouteArrayOutput)
}

// GenaiAgentRouteMapInput is an input type that accepts GenaiAgentRouteMap and GenaiAgentRouteMapOutput values.
// You can construct a concrete instance of `GenaiAgentRouteMapInput` via:
//
//	GenaiAgentRouteMap{ "key": GenaiAgentRouteArgs{...} }
type GenaiAgentRouteMapInput interface {
	pulumi.Input

	ToGenaiAgentRouteMapOutput() GenaiAgentRouteMapOutput
	ToGenaiAgentRouteMapOutputWithContext(context.Context) GenaiAgentRouteMapOutput
}

type GenaiAgentRouteMap map[string]GenaiAgentRouteInput

func (GenaiAgentRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiAgentRoute)(nil)).Elem()
}

func (i GenaiAgentRouteMap) ToGenaiAgentRouteMapOutput() GenaiAgentRouteMapOutput {
	return i.ToGenaiAgentRouteMapOutputWithContext(context.Background())
}

func (i GenaiAgentRouteMap) ToGenaiAgentRouteMapOutputWithContext(ctx context.Context) GenaiAgentRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenaiAgentRouteMapOutput)
}

type GenaiAgentRouteOutput struct{ *pulumi.OutputState }

func (GenaiAgentRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenaiAgentRoute)(nil)).Elem()
}

func (o GenaiAgentRouteOutput) ToGenaiAgentRouteOutput() GenaiAgentRouteOutput {
	return o
}

func (o GenaiAgentRouteOutput) ToGenaiAgentRouteOutputWithContext(ctx context.Context) GenaiAgentRouteOutput {
	return o
}

// The UUID of the child agent.
func (o GenaiAgentRouteOutput) ChildAgentUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.StringOutput { return v.ChildAgentUuid }).(pulumi.StringOutput)
}

// if-case condition for the route.
func (o GenaiAgentRouteOutput) IfCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.StringPtrOutput { return v.IfCase }).(pulumi.StringPtrOutput)
}

// The UUID of the parent agent.
func (o GenaiAgentRouteOutput) ParentAgentUuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.StringOutput { return v.ParentAgentUuid }).(pulumi.StringOutput)
}

func (o GenaiAgentRouteOutput) Rollback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.BoolPtrOutput { return v.Rollback }).(pulumi.BoolPtrOutput)
}

// A name for the route.
func (o GenaiAgentRouteOutput) RouteName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.StringPtrOutput { return v.RouteName }).(pulumi.StringPtrOutput)
}

// The UUID of the linkage
func (o GenaiAgentRouteOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *GenaiAgentRoute) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type GenaiAgentRouteArrayOutput struct{ *pulumi.OutputState }

func (GenaiAgentRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenaiAgentRoute)(nil)).Elem()
}

func (o GenaiAgentRouteArrayOutput) ToGenaiAgentRouteArrayOutput() GenaiAgentRouteArrayOutput {
	return o
}

func (o GenaiAgentRouteArrayOutput) ToGenaiAgentRouteArrayOutputWithContext(ctx context.Context) GenaiAgentRouteArrayOutput {
	return o
}

func (o GenaiAgentRouteArrayOutput) Index(i pulumi.IntInput) GenaiAgentRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GenaiAgentRoute {
		return vs[0].([]*GenaiAgentRoute)[vs[1].(int)]
	}).(GenaiAgentRouteOutput)
}

type GenaiAgentRouteMapOutput struct{ *pulumi.OutputState }

func (GenaiAgentRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenaiAgentRoute)(nil)).Elem()
}

func (o GenaiAgentRouteMapOutput) ToGenaiAgentRouteMapOutput() GenaiAgentRouteMapOutput {
	return o
}

func (o GenaiAgentRouteMapOutput) ToGenaiAgentRouteMapOutputWithContext(ctx context.Context) GenaiAgentRouteMapOutput {
	return o
}

func (o GenaiAgentRouteMapOutput) MapIndex(k pulumi.StringInput) GenaiAgentRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GenaiAgentRoute {
		return vs[0].(map[string]*GenaiAgentRoute)[vs[1].(string)]
	}).(GenaiAgentRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiAgentRouteInput)(nil)).Elem(), &GenaiAgentRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiAgentRouteArrayInput)(nil)).Elem(), GenaiAgentRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GenaiAgentRouteMapInput)(nil)).Elem(), GenaiAgentRouteMap{})
	pulumi.RegisterOutputType(GenaiAgentRouteOutput{})
	pulumi.RegisterOutputType(GenaiAgentRouteArrayOutput{})
	pulumi.RegisterOutputType(GenaiAgentRouteMapOutput{})
}
