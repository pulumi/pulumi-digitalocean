// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package digitalocean

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a DigitalOcean Floating IP to represent a publicly-accessible static IP addresses that can be mapped to one of your Droplets.
// 
// > **NOTE:** Floating IPs can be assigned to a Droplet either directly on the `digitalocean_floating_ip` resource by setting a `droplet_id` or using the `digitalocean_floating_ip_assignment` resource, but the two cannot be used together.
type FloatingIp struct {
	s *pulumi.ResourceState
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	if args == nil || args.Region == nil {
		return nil, errors.New("missing required argument 'Region'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dropletId"] = nil
		inputs["ipAddress"] = nil
		inputs["region"] = nil
	} else {
		inputs["dropletId"] = args.DropletId
		inputs["ipAddress"] = args.IpAddress
		inputs["region"] = args.Region
	}
	inputs["urn"] = nil
	s, err := ctx.RegisterResource("digitalocean:index/floatingIp:FloatingIp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FloatingIpState, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dropletId"] = state.DropletId
		inputs["ipAddress"] = state.IpAddress
		inputs["region"] = state.Region
		inputs["urn"] = state.Urn
	}
	s, err := ctx.ReadResource("digitalocean:index/floatingIp:FloatingIp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FloatingIp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FloatingIp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The ID of Droplet that the Floating IP will be assigned to.
func (r *FloatingIp) DropletId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["dropletId"])
}

// The IP Address of the resource
func (r *FloatingIp) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

// The region that the Floating IP is reserved to.
func (r *FloatingIp) Region() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["region"])
}

// The uniform resource name of the floating ip
func (r *FloatingIp) Urn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["urn"])
}

// Input properties used for looking up and filtering FloatingIp resources.
type FloatingIpState struct {
	// The ID of Droplet that the Floating IP will be assigned to.
	DropletId interface{}
	// The IP Address of the resource
	IpAddress interface{}
	// The region that the Floating IP is reserved to.
	Region interface{}
	// The uniform resource name of the floating ip
	Urn interface{}
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	// The ID of Droplet that the Floating IP will be assigned to.
	DropletId interface{}
	// The IP Address of the resource
	IpAddress interface{}
	// The region that the Floating IP is reserved to.
	Region interface{}
}
