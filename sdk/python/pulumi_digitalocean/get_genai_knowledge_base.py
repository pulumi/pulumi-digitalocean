# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGenaiKnowledgeBaseResult',
    'AwaitableGetGenaiKnowledgeBaseResult',
    'get_genai_knowledge_base',
    'get_genai_knowledge_base_output',
]

@pulumi.output_type
class GetGenaiKnowledgeBaseResult:
    """
    A collection of values returned by getGenaiKnowledgeBase.
    """
    def __init__(__self__, added_to_agent_at=None, created_at=None, database_id=None, embedding_model_uuid=None, id=None, is_public=None, last_indexing_jobs=None, name=None, project_id=None, region=None, tags=None, updated_at=None, user_id=None, uuid=None):
        if added_to_agent_at and not isinstance(added_to_agent_at, str):
            raise TypeError("Expected argument 'added_to_agent_at' to be a str")
        pulumi.set(__self__, "added_to_agent_at", added_to_agent_at)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if database_id and not isinstance(database_id, str):
            raise TypeError("Expected argument 'database_id' to be a str")
        pulumi.set(__self__, "database_id", database_id)
        if embedding_model_uuid and not isinstance(embedding_model_uuid, str):
            raise TypeError("Expected argument 'embedding_model_uuid' to be a str")
        pulumi.set(__self__, "embedding_model_uuid", embedding_model_uuid)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if is_public and not isinstance(is_public, bool):
            raise TypeError("Expected argument 'is_public' to be a bool")
        pulumi.set(__self__, "is_public", is_public)
        if last_indexing_jobs and not isinstance(last_indexing_jobs, list):
            raise TypeError("Expected argument 'last_indexing_jobs' to be a list")
        pulumi.set(__self__, "last_indexing_jobs", last_indexing_jobs)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if user_id and not isinstance(user_id, str):
            raise TypeError("Expected argument 'user_id' to be a str")
        pulumi.set(__self__, "user_id", user_id)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter(name="addedToAgentAt")
    def added_to_agent_at(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "added_to_agent_at")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "database_id")

    @_builtins.property
    @pulumi.getter(name="embeddingModelUuid")
    def embedding_model_uuid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "embedding_model_uuid")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "is_public")

    @_builtins.property
    @pulumi.getter(name="lastIndexingJobs")
    def last_indexing_jobs(self) -> Optional[Sequence['outputs.GetGenaiKnowledgeBaseLastIndexingJobResult']]:
        return pulumi.get(self, "last_indexing_jobs")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "project_id")

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[_builtins.str]]:
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> _builtins.str:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "user_id")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "uuid")


class AwaitableGetGenaiKnowledgeBaseResult(GetGenaiKnowledgeBaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenaiKnowledgeBaseResult(
            added_to_agent_at=self.added_to_agent_at,
            created_at=self.created_at,
            database_id=self.database_id,
            embedding_model_uuid=self.embedding_model_uuid,
            id=self.id,
            is_public=self.is_public,
            last_indexing_jobs=self.last_indexing_jobs,
            name=self.name,
            project_id=self.project_id,
            region=self.region,
            tags=self.tags,
            updated_at=self.updated_at,
            user_id=self.user_id,
            uuid=self.uuid)


def get_genai_knowledge_base(added_to_agent_at: Optional[_builtins.str] = None,
                             database_id: Optional[_builtins.str] = None,
                             embedding_model_uuid: Optional[_builtins.str] = None,
                             is_public: Optional[_builtins.bool] = None,
                             last_indexing_jobs: Optional[Sequence[Union['GetGenaiKnowledgeBaseLastIndexingJobArgs', 'GetGenaiKnowledgeBaseLastIndexingJobArgsDict']]] = None,
                             name: Optional[_builtins.str] = None,
                             project_id: Optional[_builtins.str] = None,
                             region: Optional[_builtins.str] = None,
                             tags: Optional[Sequence[_builtins.str]] = None,
                             user_id: Optional[_builtins.str] = None,
                             uuid: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenaiKnowledgeBaseResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addedToAgentAt'] = added_to_agent_at
    __args__['databaseId'] = database_id
    __args__['embeddingModelUuid'] = embedding_model_uuid
    __args__['isPublic'] = is_public
    __args__['lastIndexingJobs'] = last_indexing_jobs
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['userId'] = user_id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getGenaiKnowledgeBase:getGenaiKnowledgeBase', __args__, opts=opts, typ=GetGenaiKnowledgeBaseResult).value

    return AwaitableGetGenaiKnowledgeBaseResult(
        added_to_agent_at=pulumi.get(__ret__, 'added_to_agent_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        database_id=pulumi.get(__ret__, 'database_id'),
        embedding_model_uuid=pulumi.get(__ret__, 'embedding_model_uuid'),
        id=pulumi.get(__ret__, 'id'),
        is_public=pulumi.get(__ret__, 'is_public'),
        last_indexing_jobs=pulumi.get(__ret__, 'last_indexing_jobs'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        region=pulumi.get(__ret__, 'region'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        user_id=pulumi.get(__ret__, 'user_id'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_genai_knowledge_base_output(added_to_agent_at: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    database_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    embedding_model_uuid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    is_public: Optional[pulumi.Input[Optional[_builtins.bool]]] = None,
                                    last_indexing_jobs: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiKnowledgeBaseLastIndexingJobArgs', 'GetGenaiKnowledgeBaseLastIndexingJobArgsDict']]]]] = None,
                                    name: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    project_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    region: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    tags: Optional[pulumi.Input[Optional[Sequence[_builtins.str]]]] = None,
                                    user_id: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    uuid: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenaiKnowledgeBaseResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['addedToAgentAt'] = added_to_agent_at
    __args__['databaseId'] = database_id
    __args__['embeddingModelUuid'] = embedding_model_uuid
    __args__['isPublic'] = is_public
    __args__['lastIndexingJobs'] = last_indexing_jobs
    __args__['name'] = name
    __args__['projectId'] = project_id
    __args__['region'] = region
    __args__['tags'] = tags
    __args__['userId'] = user_id
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean:index/getGenaiKnowledgeBase:getGenaiKnowledgeBase', __args__, opts=opts, typ=GetGenaiKnowledgeBaseResult)
    return __ret__.apply(lambda __response__: GetGenaiKnowledgeBaseResult(
        added_to_agent_at=pulumi.get(__response__, 'added_to_agent_at'),
        created_at=pulumi.get(__response__, 'created_at'),
        database_id=pulumi.get(__response__, 'database_id'),
        embedding_model_uuid=pulumi.get(__response__, 'embedding_model_uuid'),
        id=pulumi.get(__response__, 'id'),
        is_public=pulumi.get(__response__, 'is_public'),
        last_indexing_jobs=pulumi.get(__response__, 'last_indexing_jobs'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        region=pulumi.get(__response__, 'region'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        user_id=pulumi.get(__response__, 'user_id'),
        uuid=pulumi.get(__response__, 'uuid')))
