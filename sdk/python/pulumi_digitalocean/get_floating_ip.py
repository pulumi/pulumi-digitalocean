# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetFloatingIpResult:
    """
    A collection of values returned by getFloatingIp.
    """
    def __init__(__self__, droplet_id=None, ip_address=None, region=None, urn=None, id=None):
        if droplet_id and not isinstance(droplet_id, float):
            raise TypeError("Expected argument 'droplet_id' to be a float")
        __self__.droplet_id = droplet_id
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        __self__.ip_address = ip_address
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        __self__.region = region
        if urn and not isinstance(urn, str):
            raise TypeError("Expected argument 'urn' to be a str")
        __self__.urn = urn
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_floating_ip(ip_address=None,opts=None):
    """
    Get information on a floating ip. This data source provides the region and Droplet id
    as configured on your DigitalOcean account. This is useful if the floating IP
    in question is not managed by Terraform or you need to find the Droplet the IP is
    attached to.
    
    An error is triggered if the provided floating IP does not exist.
    """
    __args__ = dict()

    __args__['ipAddress'] = ip_address
    __ret__ = await pulumi.runtime.invoke('digitalocean:index/getFloatingIp:getFloatingIp', __args__, opts=opts)

    return GetFloatingIpResult(
        droplet_id=__ret__.get('dropletId'),
        ip_address=__ret__.get('ipAddress'),
        region=__ret__.get('region'),
        urn=__ret__.get('urn'),
        id=__ret__.get('id'))
