# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetCertificateResult:
    """
    A collection of values returned by getCertificate.
    """
    def __init__(__self__, domains=None, name=None, not_after=None, sha1_fingerprint=None, state=None, type=None, id=None):
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        __self__.domains = domains
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if not_after and not isinstance(not_after, str):
            raise TypeError("Expected argument 'not_after' to be a str")
        __self__.not_after = not_after
        if sha1_fingerprint and not isinstance(sha1_fingerprint, str):
            raise TypeError("Expected argument 'sha1_fingerprint' to be a str")
        __self__.sha1_fingerprint = sha1_fingerprint
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        __self__.state = state
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_certificate(name=None,opts=None):
    """
    Get information on a certificate. This data source provides the name, type, state,
    domains, expiry date, and the sha1 fingerprint as configured on your DigitalOcean account.
    This is useful if the certificate in question is not managed by Terraform or you need to utilize
    any of the certificates data.
    
    An error is triggered if the provided certificate name does not exist.
    """
    __args__ = dict()

    __args__['name'] = name
    __ret__ = await pulumi.runtime.invoke('digitalocean:index/getCertificate:getCertificate', __args__, opts=opts)

    return GetCertificateResult(
        domains=__ret__.get('domains'),
        name=__ret__.get('name'),
        not_after=__ret__.get('notAfter'),
        sha1_fingerprint=__ret__.get('sha1Fingerprint'),
        state=__ret__.get('state'),
        type=__ret__.get('type'),
        id=__ret__.get('id'))
