# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class LoadBalancer(pulumi.CustomResource):
    algorithm: pulumi.Output[str]
    """
    The load balancing algorithm used to determine
    which backend Droplet will be selected by a client. It must be either `round_robin`
    or `least_connections`. The default value is `round_robin`.
    """
    droplet_ids: pulumi.Output[list]
    """
    A list of the IDs of each droplet to be attached to the Load Balancer.
    """
    droplet_tag: pulumi.Output[str]
    """
    The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
    """
    enable_proxy_protocol: pulumi.Output[bool]
    """
    A boolean value indicating whether PROXY
    Protocol should be used to pass information from connecting client requests to
    the backend service. Default value is `false`.
    """
    forwarding_rules: pulumi.Output[list]
    """
    A list of `forwarding_rule` to be assigned to the
    Load Balancer. The `forwarding_rule` block is documented below.
    """
    healthcheck: pulumi.Output[dict]
    """
    A `healthcheck` block to be assigned to the
    Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
    """
    ip: pulumi.Output[str]
    name: pulumi.Output[str]
    """
    The Load Balancer name
    """
    redirect_http_to_https: pulumi.Output[bool]
    """
    A boolean value indicating whether
    HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
    Default value is `false`.
    """
    region: pulumi.Output[str]
    """
    The region to start in
    """
    status: pulumi.Output[str]
    sticky_sessions: pulumi.Output[dict]
    """
    A `sticky_sessions` block to be assigned to the
    Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
    """
    urn: pulumi.Output[str]
    """
    The uniform resource name for the Load Balancer
    """
    def __init__(__self__, resource_name, opts=None, algorithm=None, droplet_ids=None, droplet_tag=None, enable_proxy_protocol=None, forwarding_rules=None, healthcheck=None, name=None, redirect_http_to_https=None, region=None, sticky_sessions=None, __name__=None, __opts__=None):
        """
        Provides a DigitalOcean Load Balancer resource. This can be used to create,
        modify, and delete Load Balancers.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] algorithm: The load balancing algorithm used to determine
               which backend Droplet will be selected by a client. It must be either `round_robin`
               or `least_connections`. The default value is `round_robin`.
        :param pulumi.Input[list] droplet_ids: A list of the IDs of each droplet to be attached to the Load Balancer.
        :param pulumi.Input[str] droplet_tag: The name of a Droplet tag corresponding to Droplets to be assigned to the Load Balancer.
        :param pulumi.Input[bool] enable_proxy_protocol: A boolean value indicating whether PROXY
               Protocol should be used to pass information from connecting client requests to
               the backend service. Default value is `false`.
        :param pulumi.Input[list] forwarding_rules: A list of `forwarding_rule` to be assigned to the
               Load Balancer. The `forwarding_rule` block is documented below.
        :param pulumi.Input[dict] healthcheck: A `healthcheck` block to be assigned to the
               Load Balancer. The `healthcheck` block is documented below. Only 1 healthcheck is allowed.
        :param pulumi.Input[str] name: The Load Balancer name
        :param pulumi.Input[bool] redirect_http_to_https: A boolean value indicating whether
               HTTP requests to the Load Balancer on port 80 will be redirected to HTTPS on port 443.
               Default value is `false`.
        :param pulumi.Input[str] region: The region to start in
        :param pulumi.Input[dict] sticky_sessions: A `sticky_sessions` block to be assigned to the
               Load Balancer. The `sticky_sessions` block is documented below. Only 1 sticky_sessions block is allowed.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['algorithm'] = algorithm

        __props__['droplet_ids'] = droplet_ids

        __props__['droplet_tag'] = droplet_tag

        __props__['enable_proxy_protocol'] = enable_proxy_protocol

        if forwarding_rules is None:
            raise TypeError("Missing required property 'forwarding_rules'")
        __props__['forwarding_rules'] = forwarding_rules

        __props__['healthcheck'] = healthcheck

        __props__['name'] = name

        __props__['redirect_http_to_https'] = redirect_http_to_https

        if region is None:
            raise TypeError("Missing required property 'region'")
        __props__['region'] = region

        __props__['sticky_sessions'] = sticky_sessions

        __props__['ip'] = None
        __props__['status'] = None
        __props__['urn'] = None

        super(LoadBalancer, __self__).__init__(
            'digitalocean:index/loadBalancer:LoadBalancer',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

