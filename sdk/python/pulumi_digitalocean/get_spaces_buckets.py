# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetSpacesBucketsResult:
    """
    A collection of values returned by getSpacesBuckets.
    """
    def __init__(__self__, buckets=None, filters=None, id=None, sorts=None):
        if buckets and not isinstance(buckets, list):
            raise TypeError("Expected argument 'buckets' to be a list")
        __self__.buckets = buckets
        """
        A list of Spaces buckets satisfying any `filter` and `sort` criteria. Each bucket has the following attributes:  
        """
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        __self__.filters = filters
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        __self__.sorts = sorts
class AwaitableGetSpacesBucketsResult(GetSpacesBucketsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSpacesBucketsResult(
            buckets=self.buckets,
            filters=self.filters,
            id=self.id,
            sorts=self.sorts)

def get_spaces_buckets(filters=None,sorts=None,opts=None):
    """
    Get information on Spaces buckets for use in other resources, with the ability to filter and sort the results.
    If no filters are specified, all Spaces buckets will be returned.

    Note: You can use the `.SpacesBucket` data source to
    obtain metadata about a single bucket if you already know its `name` and `region`.

    ## Example Usage



    ```python
    import pulumi
    import pulumi_digitalocean as digitalocean

    nyc3 = digitalocean.get_spaces_buckets(filters=[{
        "key": "region",
        "values": ["nyc3"],
    }])
    ```



    :param list filters: Filter the results.
           The `filter` block is documented below.
    :param list sorts: Sort the results.
           The `sort` block is documented below.

    The **filters** object supports the following:

      * `key` (`str`) - Filter the images by this key. This may be one of `bucket_domain_name`, `name`, `region`, or `urn`.
      * `values` (`list`) - A list of values to match against the `key` field. Only retrieves images
        where the `key` field takes on one or more of the values provided here.

    The **sorts** object supports the following:

      * `direction` (`str`) - The sort direction. This may be either `asc` or `desc`.
      * `key` (`str`) - Sort the images by this key. This may be one of `bucket_domain_name`, `name`, `region`, or `urn`.
    """
    __args__ = dict()


    __args__['filters'] = filters
    __args__['sorts'] = sorts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getSpacesBuckets:getSpacesBuckets', __args__, opts=opts).value

    return AwaitableGetSpacesBucketsResult(
        buckets=__ret__.get('buckets'),
        filters=__ret__.get('filters'),
        id=__ret__.get('id'),
        sorts=__ret__.get('sorts'))
