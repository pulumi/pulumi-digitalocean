# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGenaiAgentsResult',
    'AwaitableGetGenaiAgentsResult',
    'get_genai_agents',
    'get_genai_agents_output',
]

@pulumi.output_type
class GetGenaiAgentsResult:
    """
    A collection of values returned by getGenaiAgents.
    """
    def __init__(__self__, agents=None, filters=None, id=None, only_deployed=None, sorts=None):
        if agents and not isinstance(agents, list):
            raise TypeError("Expected argument 'agents' to be a list")
        pulumi.set(__self__, "agents", agents)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if only_deployed and not isinstance(only_deployed, bool):
            raise TypeError("Expected argument 'only_deployed' to be a bool")
        pulumi.set(__self__, "only_deployed", only_deployed)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @property
    @pulumi.getter
    def agents(self) -> Sequence['outputs.GetGenaiAgentsAgentResult']:
        return pulumi.get(self, "agents")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetGenaiAgentsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="onlyDeployed")
    def only_deployed(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "only_deployed")

    @property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetGenaiAgentsSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetGenaiAgentsResult(GetGenaiAgentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenaiAgentsResult(
            agents=self.agents,
            filters=self.filters,
            id=self.id,
            only_deployed=self.only_deployed,
            sorts=self.sorts)


def get_genai_agents(filters: Optional[Sequence[Union['GetGenaiAgentsFilterArgs', 'GetGenaiAgentsFilterArgsDict']]] = None,
                     only_deployed: Optional[builtins.bool] = None,
                     sorts: Optional[Sequence[Union['GetGenaiAgentsSortArgs', 'GetGenaiAgentsSortArgsDict']]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenaiAgentsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['onlyDeployed'] = only_deployed
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getGenaiAgents:getGenaiAgents', __args__, opts=opts, typ=GetGenaiAgentsResult).value

    return AwaitableGetGenaiAgentsResult(
        agents=pulumi.get(__ret__, 'agents'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        only_deployed=pulumi.get(__ret__, 'only_deployed'),
        sorts=pulumi.get(__ret__, 'sorts'))
def get_genai_agents_output(filters: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiAgentsFilterArgs', 'GetGenaiAgentsFilterArgsDict']]]]] = None,
                            only_deployed: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                            sorts: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiAgentsSortArgs', 'GetGenaiAgentsSortArgsDict']]]]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenaiAgentsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['onlyDeployed'] = only_deployed
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean:index/getGenaiAgents:getGenaiAgents', __args__, opts=opts, typ=GetGenaiAgentsResult)
    return __ret__.apply(lambda __response__: GetGenaiAgentsResult(
        agents=pulumi.get(__response__, 'agents'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        only_deployed=pulumi.get(__response__, 'only_deployed'),
        sorts=pulumi.get(__response__, 'sorts')))
