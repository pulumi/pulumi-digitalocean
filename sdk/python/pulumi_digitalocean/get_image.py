# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetImageResult:
    """
    A collection of values returned by getImage.
    """
    def __init__(__self__, distribution=None, image=None, min_disk_size=None, name=None, private=None, regions=None, slug=None, type=None, id=None):
        if distribution and not isinstance(distribution, str):
            raise TypeError("Expected argument 'distribution' to be a str")
        __self__.distribution = distribution
        """
        The name of the distribution of the OS of the image.
        * `min_disk_size`: The minimum 'disk' required for the image.
        """
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        __self__.image = image
        """
        The id of the image.
        """
        if min_disk_size and not isinstance(min_disk_size, float):
            raise TypeError("Expected argument 'min_disk_size' to be a float")
        __self__.min_disk_size = min_disk_size
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if private and not isinstance(private, bool):
            raise TypeError("Expected argument 'private' to be a bool")
        __self__.private = private
        """
        Is image a public image or not. Public images represent
        Linux distributions or One-Click Applications, while non-public images represent
        snapshots and backups and are only available within your account.
        * `regions`: The regions that the image is available in.
        * `type`: Type of the image.
        """
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        __self__.regions = regions
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        __self__.slug = slug
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        id is the provider-assigned unique ID for this managed resource.
        """

async def get_image(name=None,slug=None,opts=None):
    """
    Get information on an images for use in other resources (e.g. creating a Droplet
    based on snapshot). This data source provides all of the image properties as
    configured on your DigitalOcean account. This is useful if the image in question
    is not managed by Terraform or you need to utilize any of the image's data.
    
    An error is triggered if zero or more than one result is returned by the query.
    """
    __args__ = dict()

    __args__['name'] = name
    __args__['slug'] = slug
    __ret__ = await pulumi.runtime.invoke('digitalocean:index/getImage:getImage', __args__, opts=opts)

    return GetImageResult(
        distribution=__ret__.get('distribution'),
        image=__ret__.get('image'),
        min_disk_size=__ret__.get('minDiskSize'),
        name=__ret__.get('name'),
        private=__ret__.get('private'),
        regions=__ret__.get('regions'),
        slug=__ret__.get('slug'),
        type=__ret__.get('type'),
        id=__ret__.get('id'))
