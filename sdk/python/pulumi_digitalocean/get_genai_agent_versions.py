# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetGenaiAgentVersionsResult',
    'AwaitableGetGenaiAgentVersionsResult',
    'get_genai_agent_versions',
    'get_genai_agent_versions_output',
]

@pulumi.output_type
class GetGenaiAgentVersionsResult:
    """
    A collection of values returned by getGenaiAgentVersions.
    """
    def __init__(__self__, agent_id=None, agent_versions=None, filters=None, id=None, sorts=None):
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if agent_versions and not isinstance(agent_versions, list):
            raise TypeError("Expected argument 'agent_versions' to be a list")
        pulumi.set(__self__, "agent_versions", agent_versions)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sorts and not isinstance(sorts, list):
            raise TypeError("Expected argument 'sorts' to be a list")
        pulumi.set(__self__, "sorts", sorts)

    @_builtins.property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> _builtins.str:
        return pulumi.get(self, "agent_id")

    @_builtins.property
    @pulumi.getter(name="agentVersions")
    def agent_versions(self) -> Sequence['outputs.GetGenaiAgentVersionsAgentVersionResult']:
        return pulumi.get(self, "agent_versions")

    @_builtins.property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetGenaiAgentVersionsFilterResult']]:
        return pulumi.get(self, "filters")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def sorts(self) -> Optional[Sequence['outputs.GetGenaiAgentVersionsSortResult']]:
        return pulumi.get(self, "sorts")


class AwaitableGetGenaiAgentVersionsResult(GetGenaiAgentVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenaiAgentVersionsResult(
            agent_id=self.agent_id,
            agent_versions=self.agent_versions,
            filters=self.filters,
            id=self.id,
            sorts=self.sorts)


def get_genai_agent_versions(agent_id: Optional[_builtins.str] = None,
                             filters: Optional[Sequence[Union['GetGenaiAgentVersionsFilterArgs', 'GetGenaiAgentVersionsFilterArgsDict']]] = None,
                             sorts: Optional[Sequence[Union['GetGenaiAgentVersionsSortArgs', 'GetGenaiAgentVersionsSortArgsDict']]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenaiAgentVersionsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getGenaiAgentVersions:getGenaiAgentVersions', __args__, opts=opts, typ=GetGenaiAgentVersionsResult).value

    return AwaitableGetGenaiAgentVersionsResult(
        agent_id=pulumi.get(__ret__, 'agent_id'),
        agent_versions=pulumi.get(__ret__, 'agent_versions'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        sorts=pulumi.get(__ret__, 'sorts'))
def get_genai_agent_versions_output(agent_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    filters: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiAgentVersionsFilterArgs', 'GetGenaiAgentVersionsFilterArgsDict']]]]] = None,
                                    sorts: Optional[pulumi.Input[Optional[Sequence[Union['GetGenaiAgentVersionsSortArgs', 'GetGenaiAgentVersionsSortArgsDict']]]]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenaiAgentVersionsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    __args__['filters'] = filters
    __args__['sorts'] = sorts
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean:index/getGenaiAgentVersions:getGenaiAgentVersions', __args__, opts=opts, typ=GetGenaiAgentVersionsResult)
    return __ret__.apply(lambda __response__: GetGenaiAgentVersionsResult(
        agent_id=pulumi.get(__response__, 'agent_id'),
        agent_versions=pulumi.get(__response__, 'agent_versions'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        sorts=pulumi.get(__response__, 'sorts')))
