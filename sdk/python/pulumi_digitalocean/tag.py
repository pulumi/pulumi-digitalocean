# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Tag(pulumi.CustomResource):
    databases_count: pulumi.Output[float]
    """
    A count of the database clusters that the tag is applied to.
    """
    droplets_count: pulumi.Output[float]
    """
    A count of the Droplets the tag is applied to.
    """
    images_count: pulumi.Output[float]
    """
    A count of the images that the tag is applied to.
    """
    name: pulumi.Output[str]
    """
    The name of the tag
    """
    total_resource_count: pulumi.Output[float]
    """
    A count of the total number of resources that the tag is applied to.
    """
    volume_snapshots_count: pulumi.Output[float]
    """
    A count of the volume snapshots that the tag is applied to.
    """
    volumes_count: pulumi.Output[float]
    """
    A count of the volumes that the tag is applied to.
    """
    def __init__(__self__, resource_name, opts=None, name=None, __props__=None, __name__=None, __opts__=None):
        """
        Provides a DigitalOcean Tag resource. A Tag is a label that can be applied to a
        Droplet resource in order to better organize or facilitate the lookups and
        actions on it. Tags created with this resource can be referenced in your Droplet
        configuration via their ID or name.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_digitalocean as digitalocean

        # Create a new tag
        foobar = digitalocean.Tag("foobar")
        # Create a new Droplet in nyc3 with the foobar tag
        web = digitalocean.Droplet("web",
            image="ubuntu-18-04-x64",
            region="nyc3",
            size="s-1vcpu-1gb",
            tags=[foobar.id])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the tag
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['name'] = name
            __props__['databases_count'] = None
            __props__['droplets_count'] = None
            __props__['images_count'] = None
            __props__['total_resource_count'] = None
            __props__['volume_snapshots_count'] = None
            __props__['volumes_count'] = None
        super(Tag, __self__).__init__(
            'digitalocean:index/tag:Tag',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, databases_count=None, droplets_count=None, images_count=None, name=None, total_resource_count=None, volume_snapshots_count=None, volumes_count=None):
        """
        Get an existing Tag resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] databases_count: A count of the database clusters that the tag is applied to.
        :param pulumi.Input[float] droplets_count: A count of the Droplets the tag is applied to.
        :param pulumi.Input[float] images_count: A count of the images that the tag is applied to.
        :param pulumi.Input[str] name: The name of the tag
        :param pulumi.Input[float] total_resource_count: A count of the total number of resources that the tag is applied to.
        :param pulumi.Input[float] volume_snapshots_count: A count of the volume snapshots that the tag is applied to.
        :param pulumi.Input[float] volumes_count: A count of the volumes that the tag is applied to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["databases_count"] = databases_count
        __props__["droplets_count"] = droplets_count
        __props__["images_count"] = images_count
        __props__["name"] = name
        __props__["total_resource_count"] = total_resource_count
        __props__["volume_snapshots_count"] = volume_snapshots_count
        __props__["volumes_count"] = volumes_count
        return Tag(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
