# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetTagResult:
    """
    A collection of values returned by getTag.
    """
    def __init__(__self__, databases_count=None, droplets_count=None, id=None, images_count=None, name=None, total_resource_count=None, volume_snapshots_count=None, volumes_count=None):
        if databases_count and not isinstance(databases_count, float):
            raise TypeError("Expected argument 'databases_count' to be a float")
        __self__.databases_count = databases_count
        """
        A count of the database clusters that the tag is applied to.
        """
        if droplets_count and not isinstance(droplets_count, float):
            raise TypeError("Expected argument 'droplets_count' to be a float")
        __self__.droplets_count = droplets_count
        """
        A count of the Droplets the tag is applied to.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if images_count and not isinstance(images_count, float):
            raise TypeError("Expected argument 'images_count' to be a float")
        __self__.images_count = images_count
        """
        A count of the images that the tag is applied to.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if total_resource_count and not isinstance(total_resource_count, float):
            raise TypeError("Expected argument 'total_resource_count' to be a float")
        __self__.total_resource_count = total_resource_count
        """
        A count of the total number of resources that the tag is applied to.
        """
        if volume_snapshots_count and not isinstance(volume_snapshots_count, float):
            raise TypeError("Expected argument 'volume_snapshots_count' to be a float")
        __self__.volume_snapshots_count = volume_snapshots_count
        """
        A count of the volume snapshots that the tag is applied to.
        """
        if volumes_count and not isinstance(volumes_count, float):
            raise TypeError("Expected argument 'volumes_count' to be a float")
        __self__.volumes_count = volumes_count
        """
        A count of the volumes that the tag is applied to.
        """
class AwaitableGetTagResult(GetTagResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTagResult(
            databases_count=self.databases_count,
            droplets_count=self.droplets_count,
            id=self.id,
            images_count=self.images_count,
            name=self.name,
            total_resource_count=self.total_resource_count,
            volume_snapshots_count=self.volume_snapshots_count,
            volumes_count=self.volumes_count)

def get_tag(name=None,opts=None):
    """
    Get information on a tag. This data source provides the name as configured on
    your DigitalOcean account. This is useful if the tag name in question is not
    managed by this provider or you need validate if the tag exists in the account.

    An error is triggered if the provided tag name does not exist.

    ## Example Usage

    Get the tag:

    ```python
    import pulumi
    import pulumi_digitalocean as digitalocean

    example_tag = digitalocean.get_tag(name="example")
    example_droplet = digitalocean.Droplet("exampleDroplet",
        image="ubuntu-18-04-x64",
        region="nyc2",
        size="s-1vcpu-1gb",
        tags=[example_tag.name])
    ```


    :param str name: The name of the tag.
    """
    __args__ = dict()


    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getTag:getTag', __args__, opts=opts).value

    return AwaitableGetTagResult(
        databases_count=__ret__.get('databasesCount'),
        droplets_count=__ret__.get('dropletsCount'),
        id=__ret__.get('id'),
        images_count=__ret__.get('imagesCount'),
        name=__ret__.get('name'),
        total_resource_count=__ret__.get('totalResourceCount'),
        volume_snapshots_count=__ret__.get('volumeSnapshotsCount'),
        volumes_count=__ret__.get('volumesCount'))
