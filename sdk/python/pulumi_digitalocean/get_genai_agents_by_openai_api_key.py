# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetGenaiAgentsByOpenaiApiKeyResult',
    'AwaitableGetGenaiAgentsByOpenaiApiKeyResult',
    'get_genai_agents_by_openai_api_key',
    'get_genai_agents_by_openai_api_key_output',
]

@pulumi.output_type
class GetGenaiAgentsByOpenaiApiKeyResult:
    """
    A collection of values returned by getGenaiAgentsByOpenaiApiKey.
    """
    def __init__(__self__, agents=None, id=None, uuid=None):
        if agents and not isinstance(agents, list):
            raise TypeError("Expected argument 'agents' to be a list")
        pulumi.set(__self__, "agents", agents)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)

    @_builtins.property
    @pulumi.getter
    def agents(self) -> Sequence['outputs.GetGenaiAgentsByOpenaiApiKeyAgentResult']:
        return pulumi.get(self, "agents")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> _builtins.str:
        return pulumi.get(self, "uuid")


class AwaitableGetGenaiAgentsByOpenaiApiKeyResult(GetGenaiAgentsByOpenaiApiKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGenaiAgentsByOpenaiApiKeyResult(
            agents=self.agents,
            id=self.id,
            uuid=self.uuid)


def get_genai_agents_by_openai_api_key(uuid: Optional[_builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGenaiAgentsByOpenaiApiKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('digitalocean:index/getGenaiAgentsByOpenaiApiKey:getGenaiAgentsByOpenaiApiKey', __args__, opts=opts, typ=GetGenaiAgentsByOpenaiApiKeyResult).value

    return AwaitableGetGenaiAgentsByOpenaiApiKeyResult(
        agents=pulumi.get(__ret__, 'agents'),
        id=pulumi.get(__ret__, 'id'),
        uuid=pulumi.get(__ret__, 'uuid'))
def get_genai_agents_by_openai_api_key_output(uuid: Optional[pulumi.Input[_builtins.str]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGenaiAgentsByOpenaiApiKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['uuid'] = uuid
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('digitalocean:index/getGenaiAgentsByOpenaiApiKey:getGenaiAgentsByOpenaiApiKey', __args__, opts=opts, typ=GetGenaiAgentsByOpenaiApiKeyResult)
    return __ret__.apply(lambda __response__: GetGenaiAgentsByOpenaiApiKeyResult(
        agents=pulumi.get(__response__, 'agents'),
        id=pulumi.get(__response__, 'id'),
        uuid=pulumi.get(__response__, 'uuid')))
