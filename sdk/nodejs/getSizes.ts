// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Retrieves information about the Droplet sizes that DigitalOcean supports, with
 * the ability to filter and sort the results. If no filters are specified, all sizes
 * will be returned.
 *
 * ## Example Usage
 *
 * Most common usage will probably be to supply a size to Droplet:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const main = digitalocean.getSizes({
 *     filters: [{
 *         key: "slug",
 *         values: ["s-1vcpu-1gb"],
 *     }],
 * });
 * const web = new digitalocean.Droplet("web", {
 *     image: "ubuntu-18-04-x64",
 *     region: "sgp1",
 *     size: main.then(main => main.sizes)[0].then(sizes => sizes.slug),
 * });
 * ```
 *
 * The data source also supports multiple filters and sorts. For example, to fetch sizes with 1 or 2 virtual CPU that are available "sgp1" region, then pick the cheapest one:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const main = digitalocean.getSizes({
 *     filters: [
 *         {
 *             key: "vcpus",
 *             values: [
 *                 1,
 *                 2,
 *             ],
 *         },
 *         {
 *             key: "regions",
 *             values: ["sgp1"],
 *         },
 *     ],
 *     sorts: [{
 *         key: "price_monthly",
 *         direction: "asc",
 *     }],
 * });
 * const web = new digitalocean.Droplet("web", {
 *     image: "ubuntu-18-04-x64",
 *     region: "sgp1",
 *     size: main.then(main => main.sizes)[0].then(sizes => sizes.slug),
 * });
 * ```
 *
 * The data source can also handle multiple sorts. In which case, the sort will be applied in the order it is defined. For example, to sort by memory in ascending order, then sort by disk in descending order between sizes with same memory:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const main = pulumi.output(digitalocean.getSizes({
 *     sorts: [
 *         {
 *             direction: "asc",
 *             // Sort by memory ascendingly
 *             key: "memory",
 *         },
 *         {
 *             direction: "desc",
 *             // Then sort by disk descendingly for sizes with same memory
 *             key: "disk",
 *         },
 *     ],
 * }, { async: true }));
 * ```
 */
export function getSizes(args?: GetSizesArgs, opts?: pulumi.InvokeOptions): Promise<GetSizesResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("digitalocean:index/getSizes:getSizes", {
        "filters": args.filters,
        "sorts": args.sorts,
    }, opts);
}

/**
 * A collection of arguments for invoking getSizes.
 */
export interface GetSizesArgs {
    /**
     * Filter the results.
     * The `filter` block is documented below.
     */
    readonly filters?: inputs.GetSizesFilter[];
    /**
     * Sort the results.
     * The `sort` block is documented below.
     */
    readonly sorts?: inputs.GetSizesSort[];
}

/**
 * A collection of values returned by getSizes.
 */
export interface GetSizesResult {
    readonly filters?: outputs.GetSizesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly sizes: outputs.GetSizesSize[];
    readonly sorts?: outputs.GetSizesSort[];
}
