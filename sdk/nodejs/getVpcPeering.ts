// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### VPC Peering By Id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 *
 * ### VPC Peering By Name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 */
export function getVpcPeering(args?: GetVpcPeeringArgs, opts?: pulumi.InvokeOptions): Promise<GetVpcPeeringResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getVpcPeering:getVpcPeering", {
        "id": args.id,
        "name": args.name,
        "vpcIds": args.vpcIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpcPeering.
 */
export interface GetVpcPeeringArgs {
    /**
     * The unique identifier of an existing VPC Peering.
     */
    id?: string;
    /**
     * The name of an existing VPC Peering.
     */
    name?: string;
    /**
     * The list of VPC IDs involved in the peering.
     */
    vpcIds?: string[];
}

/**
 * A collection of values returned by getVpcPeering.
 */
export interface GetVpcPeeringResult {
    /**
     * The date and time of when the VPC Peering was created.
     */
    readonly createdAt: string;
    /**
     * The unique identifier for the VPC Peering.
     */
    readonly id: string;
    /**
     * The name of the VPC Peering.
     */
    readonly name: string;
    /**
     * The status of the VPC Peering.
     */
    readonly status: string;
    /**
     * The list of VPC IDs involved in the peering.
     */
    readonly vpcIds: string[];
}
/**
 * ## Example Usage
 *
 * ### VPC Peering By Id
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     id: "example-id",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 *
 * ### VPC Peering By Name
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * ```
 *
 * Reuse the data about a VPC Peering in other resources:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getVpcPeering({
 *     name: "example-peering",
 * });
 * const exampleDroplet = new digitalocean.Droplet("example", {
 *     name: "example-01",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: example.then(example => example.vpcIds?.[0]),
 * });
 * ```
 */
export function getVpcPeeringOutput(args?: GetVpcPeeringOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpcPeeringResult> {
    return pulumi.output(args).apply((a: any) => getVpcPeering(a, opts))
}

/**
 * A collection of arguments for invoking getVpcPeering.
 */
export interface GetVpcPeeringOutputArgs {
    /**
     * The unique identifier of an existing VPC Peering.
     */
    id?: pulumi.Input<string>;
    /**
     * The name of an existing VPC Peering.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of VPC IDs involved in the peering.
     */
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}
