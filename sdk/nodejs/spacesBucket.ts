// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a bucket resource for Spaces, DigitalOcean's object storage product.
 *
 * The [Spaces API](https://docs.digitalocean.com/reference/api/spaces-api/) was
 * designed to be interoperable with Amazon's AWS S3 API. This allows users to
 * interact with the service while using the tools they already know. Spaces
 * mirrors S3's authentication framework and requests to Spaces require a key pair
 * similar to Amazon's Access ID and Secret Key.
 *
 * The authentication requirement can be met by either setting the
 * `SPACES_ACCESS_KEY_ID` and `SPACES_SECRET_ACCESS_KEY` environment variables or
 * the provider's `spacesAccessId` and `spacesSecretKey` arguments to the
 * access ID and secret you generate via the DigitalOcean control panel. For
 * example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const static_assets = new digitalocean.SpacesBucket("static-assets", {});
 * // ...
 * ```
 *
 * For more information, See [An Introduction to DigitalOcean Spaces](https://www.digitalocean.com/community/tutorials/an-introduction-to-digitalocean-spaces)
 *
 * ## Example Usage
 * ### Create a New Bucket
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.SpacesBucket("foobar", {
 *     region: "nyc3",
 * });
 * ```
 * ### Create a New Bucket With CORS Rules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const foobar = new digitalocean.SpacesBucket("foobar", {
 *     corsRules: [
 *         {
 *             allowedHeaders: ["*"],
 *             allowedMethods: ["GET"],
 *             allowedOrigins: ["*"],
 *             maxAgeSeconds: 3000,
 *         },
 *         {
 *             allowedHeaders: ["*"],
 *             allowedMethods: [
 *                 "PUT",
 *                 "POST",
 *                 "DELETE",
 *             ],
 *             allowedOrigins: ["https://www.example.com"],
 *             maxAgeSeconds: 3000,
 *         },
 *     ],
 *     region: "nyc3",
 * });
 * ```
 *
 * ## Import
 *
 * Buckets can be imported using the `region` and `name` attributes (delimited by a comma)
 *
 * ```sh
 *  $ pulumi import digitalocean:index/spacesBucket:SpacesBucket foobar `region`,`name`
 * ```
 */
export class SpacesBucket extends pulumi.CustomResource {
    /**
     * Get an existing SpacesBucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacesBucketState, opts?: pulumi.CustomResourceOptions): SpacesBucket {
        return new SpacesBucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/spacesBucket:SpacesBucket';

    /**
     * Returns true if the given object is an instance of SpacesBucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpacesBucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpacesBucket.__pulumiType;
    }

    /**
     * Canned ACL applied on bucket creation (`private` or `public-read`)
     */
    public readonly acl!: pulumi.Output<string | undefined>;
    /**
     * The FQDN of the bucket (e.g. bucket-name.nyc3.digitaloceanspaces.com)
     */
    public /*out*/ readonly bucketDomainName!: pulumi.Output<string>;
    /**
     * The uniform resource name for the bucket
     */
    public /*out*/ readonly bucketUrn!: pulumi.Output<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    public readonly corsRules!: pulumi.Output<outputs.SpacesBucketCorsRule[] | undefined>;
    /**
     * Unless `true`, the bucket will only be destroyed if empty (Defaults to `false`)
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    public readonly lifecycleRules!: pulumi.Output<outputs.SpacesBucketLifecycleRule[] | undefined>;
    /**
     * The name of the bucket
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The region where the bucket resides (Defaults to `nyc3`)
     */
    public readonly region!: pulumi.Output<string | undefined>;
    /**
     * A state of versioning (documented below)
     */
    public readonly versioning!: pulumi.Output<outputs.SpacesBucketVersioning | undefined>;

    /**
     * Create a SpacesBucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SpacesBucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpacesBucketArgs | SpacesBucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpacesBucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["bucketDomainName"] = state ? state.bucketDomainName : undefined;
            resourceInputs["bucketUrn"] = state ? state.bucketUrn : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["lifecycleRules"] = state ? state.lifecycleRules : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["versioning"] = state ? state.versioning : undefined;
        } else {
            const args = argsOrState as SpacesBucketArgs | undefined;
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["lifecycleRules"] = args ? args.lifecycleRules : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["versioning"] = args ? args.versioning : undefined;
            resourceInputs["bucketDomainName"] = undefined /*out*/;
            resourceInputs["bucketUrn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpacesBucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpacesBucket resources.
 */
export interface SpacesBucketState {
    /**
     * Canned ACL applied on bucket creation (`private` or `public-read`)
     */
    acl?: pulumi.Input<string>;
    /**
     * The FQDN of the bucket (e.g. bucket-name.nyc3.digitaloceanspaces.com)
     */
    bucketDomainName?: pulumi.Input<string>;
    /**
     * The uniform resource name for the bucket
     */
    bucketUrn?: pulumi.Input<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsRule>[]>;
    /**
     * Unless `true`, the bucket will only be destroyed if empty (Defaults to `false`)
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketLifecycleRule>[]>;
    /**
     * The name of the bucket
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the bucket resides (Defaults to `nyc3`)
     */
    region?: pulumi.Input<string | enums.Region>;
    /**
     * A state of versioning (documented below)
     */
    versioning?: pulumi.Input<inputs.SpacesBucketVersioning>;
}

/**
 * The set of arguments for constructing a SpacesBucket resource.
 */
export interface SpacesBucketArgs {
    /**
     * Canned ACL applied on bucket creation (`private` or `public-read`)
     */
    acl?: pulumi.Input<string>;
    /**
     * A rule of Cross-Origin Resource Sharing (documented below).
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsRule>[]>;
    /**
     * Unless `true`, the bucket will only be destroyed if empty (Defaults to `false`)
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A configuration of object lifecycle management (documented below).
     */
    lifecycleRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketLifecycleRule>[]>;
    /**
     * The name of the bucket
     */
    name?: pulumi.Input<string>;
    /**
     * The region where the bucket resides (Defaults to `nyc3`)
     */
    region?: pulumi.Input<string | enums.Region>;
    /**
     * A state of versioning (documented below)
     */
    versioning?: pulumi.Input<inputs.SpacesBucketVersioning>;
}
