// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a DigitalOcean VPC Peering resource.
 *
 * VPC Peerings are used to connect two VPC networks allowing resources in each
 * VPC to communicate with each other privately.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = new digitalocean.VpcPeering("example", {
 *     name: "example-peering",
 *     vpcIds: [
 *         vpc1.id,
 *         vpc2.id,
 *     ],
 * });
 * ```
 *
 * ### Resource Assignement
 *
 * You can use the VPC Peering resource to allow communication between resources
 * in different VPCs. For example:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const vpc1 = new digitalocean.Vpc("vpc1", {
 *     name: "vpc1",
 *     region: "nyc3",
 * });
 * const vpc2 = new digitalocean.Vpc("vpc2", {
 *     name: "vpc2",
 *     region: "nyc3",
 * });
 * const example = new digitalocean.VpcPeering("example", {
 *     name: "example-peering",
 *     vpcIds: [
 *         vpc1.id,
 *         vpc2.id,
 *     ],
 * });
 * const example1 = new digitalocean.Droplet("example1", {
 *     name: "example1",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: vpc1.id,
 * });
 * const example2 = new digitalocean.Droplet("example2", {
 *     name: "example2",
 *     size: digitalocean.DropletSlug.DropletS1VCPU1GB,
 *     image: "ubuntu-18-04-x64",
 *     region: digitalocean.Region.NYC3,
 *     vpcUuid: vpc2.id,
 * });
 * ```
 *
 * ## Import
 *
 * A VPC Peering can be imported using its `id`, e.g.
 *
 * ```sh
 * $ pulumi import digitalocean:index/vpcPeering:VpcPeering example 771ad360-c017-4b4e-a34e-73934f5f0190
 * ```
 */
export class VpcPeering extends pulumi.CustomResource {
    /**
     * Get an existing VpcPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcPeeringState, opts?: pulumi.CustomResourceOptions): VpcPeering {
        return new VpcPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/vpcPeering:VpcPeering';

    /**
     * Returns true if the given object is an instance of VpcPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcPeering.__pulumiType;
    }

    /**
     * The date and time of when the VPC Peering was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A name for the VPC Peering. Must be unique and contain alphanumeric characters, dashes, and periods only.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The status of the VPC Peering.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * A set of two VPC IDs to be peered.
     */
    public readonly vpcIds!: pulumi.Output<string[]>;

    /**
     * Create a VpcPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcPeeringArgs | VpcPeeringState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcPeeringState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["vpcIds"] = state ? state.vpcIds : undefined;
        } else {
            const args = argsOrState as VpcPeeringArgs | undefined;
            if ((!args || args.vpcIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcIds'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["vpcIds"] = args ? args.vpcIds : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcPeering.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcPeering resources.
 */
export interface VpcPeeringState {
    /**
     * The date and time of when the VPC Peering was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A name for the VPC Peering. Must be unique and contain alphanumeric characters, dashes, and periods only.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the VPC Peering.
     */
    status?: pulumi.Input<string>;
    /**
     * A set of two VPC IDs to be peered.
     */
    vpcIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a VpcPeering resource.
 */
export interface VpcPeeringArgs {
    /**
     * A name for the VPC Peering. Must be unique and contain alphanumeric characters, dashes, and periods only.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of two VPC IDs to be peered.
     */
    vpcIds: pulumi.Input<pulumi.Input<string>[]>;
}
