// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information on a DigitalOcean database replica.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDatabaseCluster({
 *     name: "example-cluster",
 * });
 * const read-only = example.then(example => digitalocean.getDatabaseReplica({
 *     clusterId: example.id,
 *     name: "terra-test-ro",
 * }));
 * export const replicaOutput = read_only.then(read_only => read_only.uri);
 * ```
 */
export function getDatabaseReplica(args: GetDatabaseReplicaArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseReplicaResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("digitalocean:index/getDatabaseReplica:getDatabaseReplica", {
        "clusterId": args.clusterId,
        "name": args.name,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseReplica.
 */
export interface GetDatabaseReplicaArgs {
    /**
     * The ID of the original source database cluster.
     */
    clusterId: string;
    /**
     * The name for the database replica.
     */
    name: string;
    /**
     * A list of tag names to be applied to the database replica.
     */
    tags?: string[];
}

/**
 * A collection of values returned by getDatabaseReplica.
 */
export interface GetDatabaseReplicaResult {
    readonly clusterId: string;
    /**
     * Name of the replica's default database.
     */
    readonly database: string;
    /**
     * Database replica's hostname.
     */
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    /**
     * Password for the replica's default user.
     */
    readonly password: string;
    /**
     * Network port that the database replica is listening on.
     */
    readonly port: number;
    /**
     * Same as `host`, but only accessible from resources within the account and in the same region.
     */
    readonly privateHost: string;
    readonly privateNetworkUuid: string;
    /**
     * Same as `uri`, but only accessible from resources within the account and in the same region.
     */
    readonly privateUri: string;
    readonly region: string;
    /**
     * A list of tag names to be applied to the database replica.
     */
    readonly tags?: string[];
    /**
     * The full URI for connecting to the database replica.
     */
    readonly uri: string;
    /**
     * Username for the replica's default user.
     */
    readonly user: string;
}

export function getDatabaseReplicaOutput(args: GetDatabaseReplicaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseReplicaResult> {
    return pulumi.output(args).apply(a => getDatabaseReplica(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseReplica.
 */
export interface GetDatabaseReplicaOutputArgs {
    /**
     * The ID of the original source database cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The name for the database replica.
     */
    name: pulumi.Input<string>;
    /**
     * A list of tag names to be applied to the database replica.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
