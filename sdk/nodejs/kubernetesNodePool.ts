// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > **NOTE:** DigitalOcean Kubernetes is currently in [Limited Availability](https://www.digitalocean.com/docs/platform/product-lifecycle/). In order to access its API, you must first enable Kubernetes on your account by opting-in via the [cloud control panel](https://cloud.digitalocean.com/kubernetes/clusters). While the Kubernetes Cluster functionality is currently in limited availability the structure of this resource may change over time. Please share any feedback you may have by [opening an issue on GitHub](https://github.com/terraform-providers/terraform-provider-digitalocean/issues).
 * 
 * Provides a DigitalOcean Kubernetes node pool resource. While the default node pool must be defined in the `digitalocean_kubernetes_cluster` resource, this resource can be used to add additional ones to a cluster.
 * 
 * ## Example Usage
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 * 
 * const foo = new digitalocean.KubernetesCluster("foo", {
 *     nodePool: {
 *         name: "front-end-pool",
 *         nodeCount: 3,
 *         size: "s-2vcpu-2gb",
 *     },
 *     region: "nyc1",
 *     version: "1.12.1-do.2",
 * });
 * const bar = new digitalocean.KubernetesNodePool("bar", {
 *     clusterId: foo.id,
 *     nodeCount: 2,
 *     size: "c-2",
 *     tags: ["backend"],
 * });
 * ```
 */
export class KubernetesNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubernetesNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions): KubernetesNodePool {
        return new KubernetesNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/kubernetesNodePool:KubernetesNodePool';

    /**
     * Returns true if the given object is an instance of KubernetesNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubernetesNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubernetesNodePool.__pulumiType;
    }

    /**
     * The ID of the Kubernetes cluster to which the node pool is associated.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * A name for the node pool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of Droplet instances in the node pool.
     */
    public readonly nodeCount!: pulumi.Output<number>;
    /**
     * A list of nodes in the pool. Each node exports the following attributes:
     * - `id` -  A unique ID that can be used to identify and reference the node.
     * - `name` - The auto-generated name for the node.
     * - `status` -  A string indicating the current status of the individual node.
     * - `created_at` - The date and time when the node was created.
     * - `updated_at` - The date and time when the node was last updated.
     */
    public /*out*/ readonly nodes!: pulumi.Output<{ createdAt: string, id: string, name: string, status: string, updatedAt: string }[]>;
    /**
     * The slug identifier for the type of Droplet to be used as workers in the node pool.
     */
    public readonly size!: pulumi.Output<string>;
    /**
     * A list of tag names to be applied to the Kubernetes cluster.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;

    /**
     * Create a KubernetesNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubernetesNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubernetesNodePoolArgs | KubernetesNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as KubernetesNodePoolState | undefined;
            inputs["clusterId"] = state ? state.clusterId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nodeCount"] = state ? state.nodeCount : undefined;
            inputs["nodes"] = state ? state.nodes : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as KubernetesNodePoolArgs | undefined;
            if (!args || args.clusterId === undefined) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (!args || args.nodeCount === undefined) {
                throw new Error("Missing required property 'nodeCount'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            inputs["clusterId"] = args ? args.clusterId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nodeCount"] = args ? args.nodeCount : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["nodes"] = undefined /*out*/;
        }
        super(KubernetesNodePool.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubernetesNodePool resources.
 */
export interface KubernetesNodePoolState {
    /**
     * The ID of the Kubernetes cluster to which the node pool is associated.
     */
    readonly clusterId?: pulumi.Input<string>;
    /**
     * A name for the node pool.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The number of Droplet instances in the node pool.
     */
    readonly nodeCount?: pulumi.Input<number>;
    /**
     * A list of nodes in the pool. Each node exports the following attributes:
     * - `id` -  A unique ID that can be used to identify and reference the node.
     * - `name` - The auto-generated name for the node.
     * - `status` -  A string indicating the current status of the individual node.
     * - `created_at` - The date and time when the node was created.
     * - `updated_at` - The date and time when the node was last updated.
     */
    readonly nodes?: pulumi.Input<pulumi.Input<{ createdAt?: pulumi.Input<string>, id?: pulumi.Input<string>, name?: pulumi.Input<string>, status?: pulumi.Input<string>, updatedAt?: pulumi.Input<string> }>[]>;
    /**
     * The slug identifier for the type of Droplet to be used as workers in the node pool.
     */
    readonly size?: pulumi.Input<string>;
    /**
     * A list of tag names to be applied to the Kubernetes cluster.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a KubernetesNodePool resource.
 */
export interface KubernetesNodePoolArgs {
    /**
     * The ID of the Kubernetes cluster to which the node pool is associated.
     */
    readonly clusterId: pulumi.Input<string>;
    /**
     * A name for the node pool.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The number of Droplet instances in the node pool.
     */
    readonly nodeCount: pulumi.Input<number>;
    /**
     * The slug identifier for the type of Droplet to be used as workers in the node pool.
     */
    readonly size: pulumi.Input<string>;
    /**
     * A list of tag names to be applied to the Kubernetes cluster.
     */
    readonly tags?: pulumi.Input<pulumi.Input<string>[]>;
}
