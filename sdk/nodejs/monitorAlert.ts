// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

/**
 * Provides a [DigitalOcean Monitoring](https://docs.digitalocean.com/reference/api/api-reference/#tag/Monitoring)
 * resource. Monitor alerts can be configured to alert about, e.g., disk or memory
 * usage exceeding a certain threshold or traffic at a certain limit. Notifications
 * can be sent to either an email address or a Slack channel.
 *
 * > **Note** Currently, the [DigitalOcean API](https://docs.digitalocean.com/reference/api/api-reference/#operation/create_alert_policy) only supports creating alerts for Droplets.
 *
 * ## Import
 *
 * Monitor alerts can be imported using the monitor alert `uuid`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/monitorAlert:MonitorAlert cpu_alert b8ecd2ab-2267-4a5e-8692-cbf1d32583e3
 * ```
 */
export class MonitorAlert extends pulumi.CustomResource {
    /**
     * Get an existing MonitorAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorAlertState, opts?: pulumi.CustomResourceOptions): MonitorAlert {
        return new MonitorAlert(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/monitorAlert:MonitorAlert';

    /**
     * Returns true if the given object is an instance of MonitorAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MonitorAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MonitorAlert.__pulumiType;
    }

    /**
     * How to send notifications about the alerts. This is a list with one element, .
     * Note that for Slack, the DigitalOcean app needs to have permissions for your workspace. You can
     * read more in [Slack's documentation](https://slack.com/intl/en-dk/help/articles/222386767-Manage-app-installation-settings-for-your-workspace)
     */
    public readonly alerts!: pulumi.Output<outputs.MonitorAlertAlerts>;
    /**
     * The comparison for `value`.
     * This may be either `GreaterThan` or `LessThan`.
     */
    public readonly compare!: pulumi.Output<string>;
    /**
     * The description of the alert.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The status of the alert.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of IDs for the resources to which the alert policy applies.
     */
    public readonly entities!: pulumi.Output<string[] | undefined>;
    /**
     * A list of tags. When an included tag is added to a resource, the alert policy will apply to it.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The type of the alert.
     * This may be either `v1/insights/droplet/load_1`, `v1/insights/droplet/load_5`, `v1/insights/droplet/load_15`,
     * `v1/insights/droplet/memory_utilization_percent`, `v1/insights/droplet/disk_utilization_percent`,
     * `v1/insights/droplet/cpu`, `v1/insights/droplet/disk_read`, `v1/insights/droplet/disk_write`,
     * `v1/insights/droplet/public_outbound_bandwidth`, `v1/insights/droplet/public_inbound_bandwidth`,
     * `v1/insights/droplet/private_outbound_bandwidth`, `v1/insights/droplet/private_inbound_bandwidth`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The uuid of the alert.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The value to start alerting at, e.g., 90% or 85Mbps. This is a floating-point number.
     * DigitalOcean will show the correct unit in the web panel.
     */
    public readonly value!: pulumi.Output<number>;
    /**
     * The time frame of the alert. Either `5m`, `10m`, `30m`, or `1h`.
     */
    public readonly window!: pulumi.Output<string>;

    /**
     * Create a MonitorAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorAlertArgs | MonitorAlertState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorAlertState | undefined;
            resourceInputs["alerts"] = state ? state.alerts : undefined;
            resourceInputs["compare"] = state ? state.compare : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["entities"] = state ? state.entities : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["window"] = state ? state.window : undefined;
        } else {
            const args = argsOrState as MonitorAlertArgs | undefined;
            if ((!args || args.alerts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alerts'");
            }
            if ((!args || args.compare === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compare'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.window === undefined) && !opts.urn) {
                throw new Error("Missing required property 'window'");
            }
            resourceInputs["alerts"] = args ? args.alerts : undefined;
            resourceInputs["compare"] = args ? args.compare : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["entities"] = args ? args.entities : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["window"] = args ? args.window : undefined;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MonitorAlert.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MonitorAlert resources.
 */
export interface MonitorAlertState {
    /**
     * How to send notifications about the alerts. This is a list with one element, .
     * Note that for Slack, the DigitalOcean app needs to have permissions for your workspace. You can
     * read more in [Slack's documentation](https://slack.com/intl/en-dk/help/articles/222386767-Manage-app-installation-settings-for-your-workspace)
     */
    alerts?: pulumi.Input<inputs.MonitorAlertAlerts>;
    /**
     * The comparison for `value`.
     * This may be either `GreaterThan` or `LessThan`.
     */
    compare?: pulumi.Input<string>;
    /**
     * The description of the alert.
     */
    description?: pulumi.Input<string>;
    /**
     * The status of the alert.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of IDs for the resources to which the alert policy applies.
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags. When an included tag is added to a resource, the alert policy will apply to it.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the alert.
     * This may be either `v1/insights/droplet/load_1`, `v1/insights/droplet/load_5`, `v1/insights/droplet/load_15`,
     * `v1/insights/droplet/memory_utilization_percent`, `v1/insights/droplet/disk_utilization_percent`,
     * `v1/insights/droplet/cpu`, `v1/insights/droplet/disk_read`, `v1/insights/droplet/disk_write`,
     * `v1/insights/droplet/public_outbound_bandwidth`, `v1/insights/droplet/public_inbound_bandwidth`,
     * `v1/insights/droplet/private_outbound_bandwidth`, `v1/insights/droplet/private_inbound_bandwidth`.
     */
    type?: pulumi.Input<string>;
    /**
     * The uuid of the alert.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The value to start alerting at, e.g., 90% or 85Mbps. This is a floating-point number.
     * DigitalOcean will show the correct unit in the web panel.
     */
    value?: pulumi.Input<number>;
    /**
     * The time frame of the alert. Either `5m`, `10m`, `30m`, or `1h`.
     */
    window?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MonitorAlert resource.
 */
export interface MonitorAlertArgs {
    /**
     * How to send notifications about the alerts. This is a list with one element, .
     * Note that for Slack, the DigitalOcean app needs to have permissions for your workspace. You can
     * read more in [Slack's documentation](https://slack.com/intl/en-dk/help/articles/222386767-Manage-app-installation-settings-for-your-workspace)
     */
    alerts: pulumi.Input<inputs.MonitorAlertAlerts>;
    /**
     * The comparison for `value`.
     * This may be either `GreaterThan` or `LessThan`.
     */
    compare: pulumi.Input<string>;
    /**
     * The description of the alert.
     */
    description: pulumi.Input<string>;
    /**
     * The status of the alert.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A list of IDs for the resources to which the alert policy applies.
     */
    entities?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of tags. When an included tag is added to a resource, the alert policy will apply to it.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of the alert.
     * This may be either `v1/insights/droplet/load_1`, `v1/insights/droplet/load_5`, `v1/insights/droplet/load_15`,
     * `v1/insights/droplet/memory_utilization_percent`, `v1/insights/droplet/disk_utilization_percent`,
     * `v1/insights/droplet/cpu`, `v1/insights/droplet/disk_read`, `v1/insights/droplet/disk_write`,
     * `v1/insights/droplet/public_outbound_bandwidth`, `v1/insights/droplet/public_inbound_bandwidth`,
     * `v1/insights/droplet/private_outbound_bandwidth`, `v1/insights/droplet/private_inbound_bandwidth`.
     */
    type: pulumi.Input<string>;
    /**
     * The value to start alerting at, e.g., 90% or 85Mbps. This is a floating-point number.
     * DigitalOcean will show the correct unit in the web panel.
     */
    value: pulumi.Input<number>;
    /**
     * The time frame of the alert. Either `5m`, `10m`, `30m`, or `1h`.
     */
    window: pulumi.Input<string>;
}
