// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information on a volume for use in other resources. This data source provides
 * all of the volumes properties as configured on your DigitalOcean account. This is
 * useful if the volume in question is not managed by this provider or you need to utilize
 * any of the volumes data.
 *
 * An error is triggered if the provided volume name does not exist.
 *
 * ## Example Usage
 *
 * Get the volume:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = pulumi.output(digitalocean.getVolume({
 *     name: "app-data",
 *     region: "nyc3",
 * }, { async: true }));
 * ```
 *
 * Reuse the data about a volume to attach it to a Droplet:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const exampleVolume = digitalocean.getVolume({
 *     name: "app-data",
 *     region: "nyc3",
 * });
 * const exampleDroplet = new digitalocean.Droplet("exampleDroplet", {
 *     size: "s-1vcpu-1gb",
 *     image: "ubuntu-18-04-x64",
 *     region: "nyc3",
 * });
 * const foobar = new digitalocean.VolumeAttachment("foobar", {
 *     dropletId: exampleDroplet.id,
 *     volumeId: exampleVolume.then(exampleVolume => exampleVolume.id),
 * });
 * ```
 */
export function getVolume(args: GetVolumeArgs, opts?: pulumi.InvokeOptions): Promise<GetVolumeResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("digitalocean:index/getVolume:getVolume", {
        "description": args.description,
        "name": args.name,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getVolume.
 */
export interface GetVolumeArgs {
    /**
     * Text describing a block storage volume.
     */
    readonly description?: string;
    /**
     * The name of block storage volume.
     */
    readonly name: string;
    /**
     * The region the block storage volume is provisioned in.
     */
    readonly region?: string;
}

/**
 * A collection of values returned by getVolume.
 */
export interface GetVolumeResult {
    /**
     * Text describing a block storage volume.
     */
    readonly description?: string;
    /**
     * A list of associated Droplet ids.
     */
    readonly dropletIds: number[];
    /**
     * Filesystem label currently in-use on the block storage volume.
     */
    readonly filesystemLabel: string;
    /**
     * Filesystem type currently in-use on the block storage volume.
     */
    readonly filesystemType: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly region?: string;
    /**
     * The size of the block storage volume in GiB.
     */
    readonly size: number;
    /**
     * A list of the tags associated to the Volume.
     */
    readonly tags: string[];
    readonly urn: string;
}
