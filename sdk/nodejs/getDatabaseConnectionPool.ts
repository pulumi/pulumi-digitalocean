// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides information on a DigitalOcean PostgreSQL database connection pool.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDatabaseCluster({
 *     name: "example-cluster",
 * });
 * const read-only = example.then(example => digitalocean.getDatabaseConnectionPool({
 *     clusterId: example.id,
 *     name: "pool-01",
 * }));
 * export const connectionPoolUriOutput = read_only.then(read_only => read_only.uri);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDatabaseConnectionPool(args: GetDatabaseConnectionPoolArgs, opts?: pulumi.InvokeOptions): Promise<GetDatabaseConnectionPoolResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("digitalocean:index/getDatabaseConnectionPool:getDatabaseConnectionPool", {
        "clusterId": args.clusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolArgs {
    /**
     * The ID of the original source database cluster.
     */
    clusterId: string;
    /**
     * The name for the database connection pool.
     */
    name: string;
}

/**
 * A collection of values returned by getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolResult {
    readonly clusterId: string;
    /**
     * Name of the connection pool's default database.
     */
    readonly dbName: string;
    /**
     * Connection pool hostname.
     */
    readonly host: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The transaction mode for the connection pool.
     */
    readonly mode: string;
    readonly name: string;
    /**
     * Password for the connection pool's default user.
     */
    readonly password: string;
    /**
     * Network port that the connection pool is listening on.
     */
    readonly port: number;
    /**
     * Same as `host`, but only accessible from resources within the account and in the same region.
     */
    readonly privateHost: string;
    /**
     * Same as `uri`, but only accessible from resources within the account and in the same region.
     */
    readonly privateUri: string;
    /**
     * Size of the connection pool.
     */
    readonly size: number;
    /**
     * The full URI for connecting to the database connection pool.
     */
    readonly uri: string;
    /**
     * Username for the connection pool's default user.
     */
    readonly user: string;
}
/**
 * Provides information on a DigitalOcean PostgreSQL database connection pool.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const example = digitalocean.getDatabaseCluster({
 *     name: "example-cluster",
 * });
 * const read-only = example.then(example => digitalocean.getDatabaseConnectionPool({
 *     clusterId: example.id,
 *     name: "pool-01",
 * }));
 * export const connectionPoolUriOutput = read_only.then(read_only => read_only.uri);
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getDatabaseConnectionPoolOutput(args: GetDatabaseConnectionPoolOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDatabaseConnectionPoolResult> {
    return pulumi.output(args).apply((a: any) => getDatabaseConnectionPool(a, opts))
}

/**
 * A collection of arguments for invoking getDatabaseConnectionPool.
 */
export interface GetDatabaseConnectionPoolOutputArgs {
    /**
     * The ID of the original source database cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The name for the database connection pool.
     */
    name: pulumi.Input<string>;
}
