// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a [DigitalOcean Uptime Checks](https://docs.digitalocean.com/reference/api/api-reference/#tag/Uptime)
 * resource. Uptime Checks provide the ability to monitor your endpoints from around the world, and alert you when they're slow, unavailable, or SSL certificates are expiring.
 *
 * ## Import
 *
 * Uptime checks can be imported using the uptime check's `id`, e.g.
 *
 * ```sh
 *  $ pulumi import digitalocean:index/uptimeCheck:UptimeCheck target 5a4981aa-9653-4bd1-bef5-d6bff52042e4
 * ```
 */
export class UptimeCheck extends pulumi.CustomResource {
    /**
     * Get an existing UptimeCheck resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UptimeCheckState, opts?: pulumi.CustomResourceOptions): UptimeCheck {
        return new UptimeCheck(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/uptimeCheck:UptimeCheck';

    /**
     * Returns true if the given object is an instance of UptimeCheck.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UptimeCheck {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UptimeCheck.__pulumiType;
    }

    /**
     * A boolean value indicating whether the check is enabled/disabled.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * A human-friendly display name for the check.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * An array containing the selected regions to perform healthchecks from: "usEast", "usWest", "euWest", "seAsia"
     */
    public readonly regions!: pulumi.Output<string[] | undefined>;
    /**
     * The endpoint to perform healthchecks on.
     */
    public readonly target!: pulumi.Output<string>;
    /**
     * The type of health check to perform: 'ping' 'http' 'https'.
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a UptimeCheck resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UptimeCheckArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UptimeCheckArgs | UptimeCheckState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UptimeCheckState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["target"] = state ? state.target : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as UptimeCheckArgs | undefined;
            if ((!args || args.target === undefined) && !opts.urn) {
                throw new Error("Missing required property 'target'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["target"] = args ? args.target : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UptimeCheck.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UptimeCheck resources.
 */
export interface UptimeCheckState {
    /**
     * A boolean value indicating whether the check is enabled/disabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A human-friendly display name for the check.
     */
    name?: pulumi.Input<string>;
    /**
     * An array containing the selected regions to perform healthchecks from: "usEast", "usWest", "euWest", "seAsia"
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The endpoint to perform healthchecks on.
     */
    target?: pulumi.Input<string>;
    /**
     * The type of health check to perform: 'ping' 'http' 'https'.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UptimeCheck resource.
 */
export interface UptimeCheckArgs {
    /**
     * A boolean value indicating whether the check is enabled/disabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A human-friendly display name for the check.
     */
    name?: pulumi.Input<string>;
    /**
     * An array containing the selected regions to perform healthchecks from: "usEast", "usWest", "euWest", "seAsia"
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The endpoint to perform healthchecks on.
     */
    target: pulumi.Input<string>;
    /**
     * The type of health check to perform: 'ping' 'http' 'https'.
     */
    type?: pulumi.Input<string>;
}
