// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class GenaiOpenaiApiKey extends pulumi.CustomResource {
    /**
     * Get an existing GenaiOpenaiApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiOpenaiApiKeyState, opts?: pulumi.CustomResourceOptions): GenaiOpenaiApiKey {
        return new GenaiOpenaiApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiOpenaiApiKey:GenaiOpenaiApiKey';

    /**
     * Returns true if the given object is an instance of GenaiOpenaiApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiOpenaiApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiOpenaiApiKey.__pulumiType;
    }

    /**
     * The OpenAI API key.
     */
    declare public readonly apiKey: pulumi.Output<string>;
    /**
     * When the API key was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Who created the API key.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * When the API key was deleted.
     */
    declare public /*out*/ readonly deletedAt: pulumi.Output<string>;
    /**
     * Models associated with the OpenAI API key
     */
    declare public readonly models: pulumi.Output<outputs.GenaiOpenaiApiKeyModel[]>;
    /**
     * A name for the API key.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * When the API key was last updated.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * The UUID of the API key.
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a GenaiOpenaiApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiOpenaiApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiOpenaiApiKeyArgs | GenaiOpenaiApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiOpenaiApiKeyState | undefined;
            resourceInputs["apiKey"] = state?.apiKey;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["deletedAt"] = state?.deletedAt;
            resourceInputs["models"] = state?.models;
            resourceInputs["name"] = state?.name;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as GenaiOpenaiApiKeyArgs | undefined;
            if (args?.apiKey === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            resourceInputs["apiKey"] = args?.apiKey;
            resourceInputs["models"] = args?.models;
            resourceInputs["name"] = args?.name;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["deletedAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiOpenaiApiKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiOpenaiApiKey resources.
 */
export interface GenaiOpenaiApiKeyState {
    /**
     * The OpenAI API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * When the API key was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Who created the API key.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * When the API key was deleted.
     */
    deletedAt?: pulumi.Input<string>;
    /**
     * Models associated with the OpenAI API key
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiOpenaiApiKeyModel>[]>;
    /**
     * A name for the API key.
     */
    name?: pulumi.Input<string>;
    /**
     * When the API key was last updated.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The UUID of the API key.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiOpenaiApiKey resource.
 */
export interface GenaiOpenaiApiKeyArgs {
    /**
     * The OpenAI API key.
     */
    apiKey: pulumi.Input<string>;
    /**
     * Models associated with the OpenAI API key
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiOpenaiApiKeyModel>[]>;
    /**
     * A name for the API key.
     */
    name?: pulumi.Input<string>;
}
