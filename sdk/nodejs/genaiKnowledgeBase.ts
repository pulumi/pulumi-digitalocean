// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class GenaiKnowledgeBase extends pulumi.CustomResource {
    /**
     * Get an existing GenaiKnowledgeBase resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiKnowledgeBaseState, opts?: pulumi.CustomResourceOptions): GenaiKnowledgeBase {
        return new GenaiKnowledgeBase(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiKnowledgeBase:GenaiKnowledgeBase';

    /**
     * Returns true if the given object is an instance of GenaiKnowledgeBase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiKnowledgeBase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiKnowledgeBase.__pulumiType;
    }

    /**
     * The time when the knowledge base was added to the agent.
     */
    declare public readonly addedToAgentAt: pulumi.Output<string | undefined>;
    /**
     * The time when the knowledge base was created.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
     */
    declare public readonly databaseId: pulumi.Output<string | undefined>;
    /**
     * Data sources for the knowledge base
     */
    declare public readonly datasources: pulumi.Output<outputs.GenaiKnowledgeBaseDataSource[]>;
    /**
     * The unique identifier of the embedding model
     */
    declare public readonly embeddingModelUuid: pulumi.Output<string>;
    /**
     * Indicates whether the knowledge base is public or private.
     */
    declare public readonly isPublic: pulumi.Output<boolean | undefined>;
    /**
     * The last indexing job for the knowledge base.
     */
    declare public readonly lastIndexingJobs: pulumi.Output<outputs.GenaiKnowledgeBaseLastIndexingJob[] | undefined>;
    /**
     * The name of the knowledge base.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The unique identifier of the project to which the knowledge base belongs.
     */
    declare public readonly projectId: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * The unique identifier of the VPC to which the knowledge base belongs.
     */
    declare public readonly vpcUuid: pulumi.Output<string | undefined>;

    /**
     * Create a GenaiKnowledgeBase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiKnowledgeBaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiKnowledgeBaseArgs | GenaiKnowledgeBaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiKnowledgeBaseState | undefined;
            resourceInputs["addedToAgentAt"] = state?.addedToAgentAt;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["databaseId"] = state?.databaseId;
            resourceInputs["datasources"] = state?.datasources;
            resourceInputs["embeddingModelUuid"] = state?.embeddingModelUuid;
            resourceInputs["isPublic"] = state?.isPublic;
            resourceInputs["lastIndexingJobs"] = state?.lastIndexingJobs;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["vpcUuid"] = state?.vpcUuid;
        } else {
            const args = argsOrState as GenaiKnowledgeBaseArgs | undefined;
            if (args?.datasources === undefined && !opts.urn) {
                throw new Error("Missing required property 'datasources'");
            }
            if (args?.embeddingModelUuid === undefined && !opts.urn) {
                throw new Error("Missing required property 'embeddingModelUuid'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["addedToAgentAt"] = args?.addedToAgentAt;
            resourceInputs["databaseId"] = args?.databaseId;
            resourceInputs["datasources"] = args?.datasources;
            resourceInputs["embeddingModelUuid"] = args?.embeddingModelUuid;
            resourceInputs["isPublic"] = args?.isPublic;
            resourceInputs["lastIndexingJobs"] = args?.lastIndexingJobs;
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["vpcUuid"] = args?.vpcUuid;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiKnowledgeBase.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiKnowledgeBase resources.
 */
export interface GenaiKnowledgeBaseState {
    /**
     * The time when the knowledge base was added to the agent.
     */
    addedToAgentAt?: pulumi.Input<string>;
    /**
     * The time when the knowledge base was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
     */
    databaseId?: pulumi.Input<string>;
    /**
     * Data sources for the knowledge base
     */
    datasources?: pulumi.Input<pulumi.Input<inputs.GenaiKnowledgeBaseDataSource>[]>;
    /**
     * The unique identifier of the embedding model
     */
    embeddingModelUuid?: pulumi.Input<string>;
    /**
     * Indicates whether the knowledge base is public or private.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * The last indexing job for the knowledge base.
     */
    lastIndexingJobs?: pulumi.Input<pulumi.Input<inputs.GenaiKnowledgeBaseLastIndexingJob>[]>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the project to which the knowledge base belongs.
     */
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier of the VPC to which the knowledge base belongs.
     */
    vpcUuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiKnowledgeBase resource.
 */
export interface GenaiKnowledgeBaseArgs {
    /**
     * The time when the knowledge base was added to the agent.
     */
    addedToAgentAt?: pulumi.Input<string>;
    /**
     * The unique identifier of the DigitalOcean OpenSearch database this knowledge base will use
     */
    databaseId?: pulumi.Input<string>;
    /**
     * Data sources for the knowledge base
     */
    datasources: pulumi.Input<pulumi.Input<inputs.GenaiKnowledgeBaseDataSource>[]>;
    /**
     * The unique identifier of the embedding model
     */
    embeddingModelUuid: pulumi.Input<string>;
    /**
     * Indicates whether the knowledge base is public or private.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * The last indexing job for the knowledge base.
     */
    lastIndexingJobs?: pulumi.Input<pulumi.Input<inputs.GenaiKnowledgeBaseLastIndexingJob>[]>;
    /**
     * The name of the knowledge base.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier of the project to which the knowledge base belongs.
     */
    projectId: pulumi.Input<string>;
    region: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The unique identifier of the VPC to which the knowledge base belongs.
     */
    vpcUuid?: pulumi.Input<string>;
}
