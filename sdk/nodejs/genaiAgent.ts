// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class GenaiAgent extends pulumi.CustomResource {
    /**
     * Get an existing GenaiAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiAgentState, opts?: pulumi.CustomResourceOptions): GenaiAgent {
        return new GenaiAgent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiAgent:GenaiAgent';

    /**
     * Returns true if the given object is an instance of GenaiAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiAgent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiAgent.__pulumiType;
    }

    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    public readonly agentGuardrails!: pulumi.Output<outputs.GenaiAgentAgentGuardrail[] | undefined>;
    /**
     * Anthropic API Key information
     */
    public readonly anthropicApiKeys!: pulumi.Output<outputs.GenaiAgentAnthropicApiKey[] | undefined>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    public readonly anthropicKeyUuid!: pulumi.Output<string | undefined>;
    /**
     * List of API Key Infos
     */
    public readonly apiKeyInfos!: pulumi.Output<outputs.GenaiAgentApiKeyInfo[] | undefined>;
    /**
     * List of API Keys
     */
    public readonly apiKeys!: pulumi.Output<outputs.GenaiAgentApiKey[] | undefined>;
    /**
     * List of Chatbot Identifiers
     */
    public readonly chatbotIdentifiers!: pulumi.Output<outputs.GenaiAgentChatbotIdentifier[] | undefined>;
    /**
     * ChatBot configuration
     */
    public readonly chatbots!: pulumi.Output<outputs.GenaiAgentChatbot[] | undefined>;
    /**
     * List of child agents
     */
    public readonly childAgents!: pulumi.Output<outputs.GenaiAgentChildAgent[]>;
    /**
     * Timestamp when the Agent was created
     */
    public readonly createdAt!: pulumi.Output<string | undefined>;
    /**
     * List of API Key Infos
     */
    public readonly deployments!: pulumi.Output<outputs.GenaiAgentDeployment[] | undefined>;
    /**
     * Description for the Agent
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * List of Functions
     */
    public readonly functions!: pulumi.Output<outputs.GenaiAgentFunction[] | undefined>;
    /**
     * If case condition
     */
    public readonly ifCase!: pulumi.Output<string | undefined>;
    /**
     * Instruction for the Agent
     */
    public readonly instruction!: pulumi.Output<string>;
    /**
     * K value
     */
    public readonly k!: pulumi.Output<number | undefined>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    public readonly knowledgeBaseUuids!: pulumi.Output<string[] | undefined>;
    /**
     * List of Knowledge Bases
     */
    public readonly knowledgeBases!: pulumi.Output<outputs.GenaiAgentKnowledgeBase[]>;
    /**
     * Maximum tokens allowed
     */
    public readonly maxTokens!: pulumi.Output<number | undefined>;
    /**
     * Model UUID of the Agent
     */
    public readonly modelUuid!: pulumi.Output<string>;
    /**
     * Model of the Agent
     */
    public readonly models!: pulumi.Output<outputs.GenaiAgentModel[]>;
    /**
     * Name of the Agent
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * OpenAI API Key information
     */
    public readonly openAiApiKeys!: pulumi.Output<outputs.GenaiAgentOpenAiApiKey[] | undefined>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    public readonly openAiKeyUuid!: pulumi.Output<string | undefined>;
    /**
     * List of child agents
     */
    public readonly parentAgents!: pulumi.Output<outputs.GenaiAgentParentAgent[]>;
    /**
     * Project ID of the Agent
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    public readonly provideCitations!: pulumi.Output<boolean | undefined>;
    /**
     * Region where the Agent is deployed
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Retrieval method used
     */
    public readonly retrievalMethod!: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the route was created
     */
    public /*out*/ readonly routeCreatedAt!: pulumi.Output<string>;
    /**
     * User who created the route
     */
    public readonly routeCreatedBy!: pulumi.Output<string | undefined>;
    /**
     * Route name
     */
    public readonly routeName!: pulumi.Output<string | undefined>;
    /**
     * Route UUID
     */
    public readonly routeUuid!: pulumi.Output<string | undefined>;
    /**
     * List of Tags
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * Agent temperature setting
     */
    public readonly temperature!: pulumi.Output<number | undefined>;
    /**
     * Agent Template
     */
    public readonly templates!: pulumi.Output<outputs.GenaiAgentTemplate[] | undefined>;
    /**
     * Top P sampling parameter
     */
    public readonly topP!: pulumi.Output<number | undefined>;
    /**
     * Timestamp when the Agent was updated
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * URL for the Agent
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * User ID linked with the Agent
     */
    public readonly userId!: pulumi.Output<string | undefined>;

    /**
     * Create a GenaiAgent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiAgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiAgentArgs | GenaiAgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiAgentState | undefined;
            resourceInputs["agentGuardrails"] = state ? state.agentGuardrails : undefined;
            resourceInputs["anthropicApiKeys"] = state ? state.anthropicApiKeys : undefined;
            resourceInputs["anthropicKeyUuid"] = state ? state.anthropicKeyUuid : undefined;
            resourceInputs["apiKeyInfos"] = state ? state.apiKeyInfos : undefined;
            resourceInputs["apiKeys"] = state ? state.apiKeys : undefined;
            resourceInputs["chatbotIdentifiers"] = state ? state.chatbotIdentifiers : undefined;
            resourceInputs["chatbots"] = state ? state.chatbots : undefined;
            resourceInputs["childAgents"] = state ? state.childAgents : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deployments"] = state ? state.deployments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["functions"] = state ? state.functions : undefined;
            resourceInputs["ifCase"] = state ? state.ifCase : undefined;
            resourceInputs["instruction"] = state ? state.instruction : undefined;
            resourceInputs["k"] = state ? state.k : undefined;
            resourceInputs["knowledgeBaseUuids"] = state ? state.knowledgeBaseUuids : undefined;
            resourceInputs["knowledgeBases"] = state ? state.knowledgeBases : undefined;
            resourceInputs["maxTokens"] = state ? state.maxTokens : undefined;
            resourceInputs["modelUuid"] = state ? state.modelUuid : undefined;
            resourceInputs["models"] = state ? state.models : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openAiApiKeys"] = state ? state.openAiApiKeys : undefined;
            resourceInputs["openAiKeyUuid"] = state ? state.openAiKeyUuid : undefined;
            resourceInputs["parentAgents"] = state ? state.parentAgents : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["provideCitations"] = state ? state.provideCitations : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["retrievalMethod"] = state ? state.retrievalMethod : undefined;
            resourceInputs["routeCreatedAt"] = state ? state.routeCreatedAt : undefined;
            resourceInputs["routeCreatedBy"] = state ? state.routeCreatedBy : undefined;
            resourceInputs["routeName"] = state ? state.routeName : undefined;
            resourceInputs["routeUuid"] = state ? state.routeUuid : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["temperature"] = state ? state.temperature : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["topP"] = state ? state.topP : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as GenaiAgentArgs | undefined;
            if ((!args || args.instruction === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instruction'");
            }
            if ((!args || args.modelUuid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelUuid'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["agentGuardrails"] = args ? args.agentGuardrails : undefined;
            resourceInputs["anthropicApiKeys"] = args ? args.anthropicApiKeys : undefined;
            resourceInputs["anthropicKeyUuid"] = args ? args.anthropicKeyUuid : undefined;
            resourceInputs["apiKeyInfos"] = args ? args.apiKeyInfos : undefined;
            resourceInputs["apiKeys"] = args ? args.apiKeys : undefined;
            resourceInputs["chatbotIdentifiers"] = args ? args.chatbotIdentifiers : undefined;
            resourceInputs["chatbots"] = args ? args.chatbots : undefined;
            resourceInputs["childAgents"] = args ? args.childAgents : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["deployments"] = args ? args.deployments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["functions"] = args ? args.functions : undefined;
            resourceInputs["ifCase"] = args ? args.ifCase : undefined;
            resourceInputs["instruction"] = args ? args.instruction : undefined;
            resourceInputs["k"] = args ? args.k : undefined;
            resourceInputs["knowledgeBaseUuids"] = args ? args.knowledgeBaseUuids : undefined;
            resourceInputs["knowledgeBases"] = args ? args.knowledgeBases : undefined;
            resourceInputs["maxTokens"] = args ? args.maxTokens : undefined;
            resourceInputs["modelUuid"] = args ? args.modelUuid : undefined;
            resourceInputs["models"] = args ? args.models : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["openAiApiKeys"] = args ? args.openAiApiKeys : undefined;
            resourceInputs["openAiKeyUuid"] = args ? args.openAiKeyUuid : undefined;
            resourceInputs["parentAgents"] = args ? args.parentAgents : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["provideCitations"] = args ? args.provideCitations : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["retrievalMethod"] = args ? args.retrievalMethod : undefined;
            resourceInputs["routeCreatedBy"] = args ? args.routeCreatedBy : undefined;
            resourceInputs["routeName"] = args ? args.routeName : undefined;
            resourceInputs["routeUuid"] = args ? args.routeUuid : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["temperature"] = args ? args.temperature : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["topP"] = args ? args.topP : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["routeCreatedAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiAgent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiAgent resources.
 */
export interface GenaiAgentState {
    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    agentGuardrails?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAgentGuardrail>[]>;
    /**
     * Anthropic API Key information
     */
    anthropicApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAnthropicApiKey>[]>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    anthropicKeyUuid?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    apiKeyInfos?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKeyInfo>[]>;
    /**
     * List of API Keys
     */
    apiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKey>[]>;
    /**
     * List of Chatbot Identifiers
     */
    chatbotIdentifiers?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbotIdentifier>[]>;
    /**
     * ChatBot configuration
     */
    chatbots?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbot>[]>;
    /**
     * List of child agents
     */
    childAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChildAgent>[]>;
    /**
     * Timestamp when the Agent was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.GenaiAgentDeployment>[]>;
    /**
     * Description for the Agent
     */
    description?: pulumi.Input<string>;
    /**
     * List of Functions
     */
    functions?: pulumi.Input<pulumi.Input<inputs.GenaiAgentFunction>[]>;
    /**
     * If case condition
     */
    ifCase?: pulumi.Input<string>;
    /**
     * Instruction for the Agent
     */
    instruction?: pulumi.Input<string>;
    /**
     * K value
     */
    k?: pulumi.Input<number>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    knowledgeBaseUuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Knowledge Bases
     */
    knowledgeBases?: pulumi.Input<pulumi.Input<inputs.GenaiAgentKnowledgeBase>[]>;
    /**
     * Maximum tokens allowed
     */
    maxTokens?: pulumi.Input<number>;
    /**
     * Model UUID of the Agent
     */
    modelUuid?: pulumi.Input<string>;
    /**
     * Model of the Agent
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiAgentModel>[]>;
    /**
     * Name of the Agent
     */
    name?: pulumi.Input<string>;
    /**
     * OpenAI API Key information
     */
    openAiApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentOpenAiApiKey>[]>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    openAiKeyUuid?: pulumi.Input<string>;
    /**
     * List of child agents
     */
    parentAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentParentAgent>[]>;
    /**
     * Project ID of the Agent
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    provideCitations?: pulumi.Input<boolean>;
    /**
     * Region where the Agent is deployed
     */
    region?: pulumi.Input<string>;
    /**
     * Retrieval method used
     */
    retrievalMethod?: pulumi.Input<string>;
    /**
     * Timestamp when the route was created
     */
    routeCreatedAt?: pulumi.Input<string>;
    /**
     * User who created the route
     */
    routeCreatedBy?: pulumi.Input<string>;
    /**
     * Route name
     */
    routeName?: pulumi.Input<string>;
    /**
     * Route UUID
     */
    routeUuid?: pulumi.Input<string>;
    /**
     * List of Tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Agent temperature setting
     */
    temperature?: pulumi.Input<number>;
    /**
     * Agent Template
     */
    templates?: pulumi.Input<pulumi.Input<inputs.GenaiAgentTemplate>[]>;
    /**
     * Top P sampling parameter
     */
    topP?: pulumi.Input<number>;
    /**
     * Timestamp when the Agent was updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * URL for the Agent
     */
    url?: pulumi.Input<string>;
    /**
     * User ID linked with the Agent
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiAgent resource.
 */
export interface GenaiAgentArgs {
    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    agentGuardrails?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAgentGuardrail>[]>;
    /**
     * Anthropic API Key information
     */
    anthropicApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAnthropicApiKey>[]>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    anthropicKeyUuid?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    apiKeyInfos?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKeyInfo>[]>;
    /**
     * List of API Keys
     */
    apiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKey>[]>;
    /**
     * List of Chatbot Identifiers
     */
    chatbotIdentifiers?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbotIdentifier>[]>;
    /**
     * ChatBot configuration
     */
    chatbots?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbot>[]>;
    /**
     * List of child agents
     */
    childAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChildAgent>[]>;
    /**
     * Timestamp when the Agent was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.GenaiAgentDeployment>[]>;
    /**
     * Description for the Agent
     */
    description?: pulumi.Input<string>;
    /**
     * List of Functions
     */
    functions?: pulumi.Input<pulumi.Input<inputs.GenaiAgentFunction>[]>;
    /**
     * If case condition
     */
    ifCase?: pulumi.Input<string>;
    /**
     * Instruction for the Agent
     */
    instruction: pulumi.Input<string>;
    /**
     * K value
     */
    k?: pulumi.Input<number>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    knowledgeBaseUuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Knowledge Bases
     */
    knowledgeBases?: pulumi.Input<pulumi.Input<inputs.GenaiAgentKnowledgeBase>[]>;
    /**
     * Maximum tokens allowed
     */
    maxTokens?: pulumi.Input<number>;
    /**
     * Model UUID of the Agent
     */
    modelUuid: pulumi.Input<string>;
    /**
     * Model of the Agent
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiAgentModel>[]>;
    /**
     * Name of the Agent
     */
    name?: pulumi.Input<string>;
    /**
     * OpenAI API Key information
     */
    openAiApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentOpenAiApiKey>[]>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    openAiKeyUuid?: pulumi.Input<string>;
    /**
     * List of child agents
     */
    parentAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentParentAgent>[]>;
    /**
     * Project ID of the Agent
     */
    projectId: pulumi.Input<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    provideCitations?: pulumi.Input<boolean>;
    /**
     * Region where the Agent is deployed
     */
    region: pulumi.Input<string>;
    /**
     * Retrieval method used
     */
    retrievalMethod?: pulumi.Input<string>;
    /**
     * User who created the route
     */
    routeCreatedBy?: pulumi.Input<string>;
    /**
     * Route name
     */
    routeName?: pulumi.Input<string>;
    /**
     * Route UUID
     */
    routeUuid?: pulumi.Input<string>;
    /**
     * List of Tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Agent temperature setting
     */
    temperature?: pulumi.Input<number>;
    /**
     * Agent Template
     */
    templates?: pulumi.Input<pulumi.Input<inputs.GenaiAgentTemplate>[]>;
    /**
     * Top P sampling parameter
     */
    topP?: pulumi.Input<number>;
    /**
     * URL for the Agent
     */
    url?: pulumi.Input<string>;
    /**
     * User ID linked with the Agent
     */
    userId?: pulumi.Input<string>;
}
