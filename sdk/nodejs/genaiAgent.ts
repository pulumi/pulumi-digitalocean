// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class GenaiAgent extends pulumi.CustomResource {
    /**
     * Get an existing GenaiAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiAgentState, opts?: pulumi.CustomResourceOptions): GenaiAgent {
        return new GenaiAgent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiAgent:GenaiAgent';

    /**
     * Returns true if the given object is an instance of GenaiAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiAgent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiAgent.__pulumiType;
    }

    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    declare public readonly agentGuardrails: pulumi.Output<outputs.GenaiAgentAgentGuardrail[] | undefined>;
    /**
     * Anthropic API Key information
     */
    declare public readonly anthropicApiKeys: pulumi.Output<outputs.GenaiAgentAnthropicApiKey[] | undefined>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    declare public readonly anthropicKeyUuid: pulumi.Output<string | undefined>;
    /**
     * List of API Key Infos
     */
    declare public readonly apiKeyInfos: pulumi.Output<outputs.GenaiAgentApiKeyInfo[] | undefined>;
    /**
     * List of API Keys
     */
    declare public readonly apiKeys: pulumi.Output<outputs.GenaiAgentApiKey[] | undefined>;
    /**
     * List of Chatbot Identifiers
     */
    declare public readonly chatbotIdentifiers: pulumi.Output<outputs.GenaiAgentChatbotIdentifier[] | undefined>;
    /**
     * ChatBot configuration
     */
    declare public readonly chatbots: pulumi.Output<outputs.GenaiAgentChatbot[] | undefined>;
    /**
     * List of child agents
     */
    declare public readonly childAgents: pulumi.Output<outputs.GenaiAgentChildAgent[]>;
    /**
     * Timestamp when the Agent was created
     */
    declare public readonly createdAt: pulumi.Output<string | undefined>;
    /**
     * List of API Key Infos
     */
    declare public readonly deployments: pulumi.Output<outputs.GenaiAgentDeployment[] | undefined>;
    /**
     * Description for the Agent
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * List of Functions
     */
    declare public readonly functions: pulumi.Output<outputs.GenaiAgentFunction[] | undefined>;
    /**
     * If case condition
     */
    declare public readonly ifCase: pulumi.Output<string | undefined>;
    /**
     * Instruction for the Agent
     */
    declare public readonly instruction: pulumi.Output<string>;
    /**
     * K value
     */
    declare public readonly k: pulumi.Output<number | undefined>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    declare public readonly knowledgeBaseUuids: pulumi.Output<string[] | undefined>;
    /**
     * List of Knowledge Bases
     */
    declare public readonly knowledgeBases: pulumi.Output<outputs.GenaiAgentKnowledgeBase[]>;
    /**
     * Maximum tokens allowed
     */
    declare public readonly maxTokens: pulumi.Output<number | undefined>;
    /**
     * Model UUID of the Agent
     */
    declare public readonly modelUuid: pulumi.Output<string>;
    /**
     * Model of the Agent
     */
    declare public readonly models: pulumi.Output<outputs.GenaiAgentModel[]>;
    /**
     * Name of the Agent
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * OpenAI API Key information
     */
    declare public readonly openAiApiKeys: pulumi.Output<outputs.GenaiAgentOpenAiApiKey[] | undefined>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    declare public readonly openAiKeyUuid: pulumi.Output<string | undefined>;
    /**
     * List of child agents
     */
    declare public readonly parentAgents: pulumi.Output<outputs.GenaiAgentParentAgent[]>;
    /**
     * Project ID of the Agent
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    declare public readonly provideCitations: pulumi.Output<boolean | undefined>;
    /**
     * Region where the Agent is deployed
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Retrieval method used
     */
    declare public readonly retrievalMethod: pulumi.Output<string | undefined>;
    /**
     * Timestamp when the route was created
     */
    declare public /*out*/ readonly routeCreatedAt: pulumi.Output<string>;
    /**
     * User who created the route
     */
    declare public readonly routeCreatedBy: pulumi.Output<string | undefined>;
    /**
     * Route name
     */
    declare public readonly routeName: pulumi.Output<string | undefined>;
    /**
     * Route UUID
     */
    declare public readonly routeUuid: pulumi.Output<string | undefined>;
    /**
     * List of Tags
     */
    declare public readonly tags: pulumi.Output<string[] | undefined>;
    /**
     * Agent temperature setting
     */
    declare public readonly temperature: pulumi.Output<number | undefined>;
    /**
     * Agent Template
     */
    declare public readonly templates: pulumi.Output<outputs.GenaiAgentTemplate[] | undefined>;
    /**
     * Top P sampling parameter
     */
    declare public readonly topP: pulumi.Output<number | undefined>;
    /**
     * Timestamp when the Agent was updated
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;
    /**
     * URL for the Agent
     */
    declare public readonly url: pulumi.Output<string | undefined>;
    /**
     * User ID linked with the Agent
     */
    declare public readonly userId: pulumi.Output<string | undefined>;

    /**
     * Create a GenaiAgent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiAgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiAgentArgs | GenaiAgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiAgentState | undefined;
            resourceInputs["agentGuardrails"] = state?.agentGuardrails;
            resourceInputs["anthropicApiKeys"] = state?.anthropicApiKeys;
            resourceInputs["anthropicKeyUuid"] = state?.anthropicKeyUuid;
            resourceInputs["apiKeyInfos"] = state?.apiKeyInfos;
            resourceInputs["apiKeys"] = state?.apiKeys;
            resourceInputs["chatbotIdentifiers"] = state?.chatbotIdentifiers;
            resourceInputs["chatbots"] = state?.chatbots;
            resourceInputs["childAgents"] = state?.childAgents;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["deployments"] = state?.deployments;
            resourceInputs["description"] = state?.description;
            resourceInputs["functions"] = state?.functions;
            resourceInputs["ifCase"] = state?.ifCase;
            resourceInputs["instruction"] = state?.instruction;
            resourceInputs["k"] = state?.k;
            resourceInputs["knowledgeBaseUuids"] = state?.knowledgeBaseUuids;
            resourceInputs["knowledgeBases"] = state?.knowledgeBases;
            resourceInputs["maxTokens"] = state?.maxTokens;
            resourceInputs["modelUuid"] = state?.modelUuid;
            resourceInputs["models"] = state?.models;
            resourceInputs["name"] = state?.name;
            resourceInputs["openAiApiKeys"] = state?.openAiApiKeys;
            resourceInputs["openAiKeyUuid"] = state?.openAiKeyUuid;
            resourceInputs["parentAgents"] = state?.parentAgents;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["provideCitations"] = state?.provideCitations;
            resourceInputs["region"] = state?.region;
            resourceInputs["retrievalMethod"] = state?.retrievalMethod;
            resourceInputs["routeCreatedAt"] = state?.routeCreatedAt;
            resourceInputs["routeCreatedBy"] = state?.routeCreatedBy;
            resourceInputs["routeName"] = state?.routeName;
            resourceInputs["routeUuid"] = state?.routeUuid;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["temperature"] = state?.temperature;
            resourceInputs["templates"] = state?.templates;
            resourceInputs["topP"] = state?.topP;
            resourceInputs["updatedAt"] = state?.updatedAt;
            resourceInputs["url"] = state?.url;
            resourceInputs["userId"] = state?.userId;
        } else {
            const args = argsOrState as GenaiAgentArgs | undefined;
            if (args?.instruction === undefined && !opts.urn) {
                throw new Error("Missing required property 'instruction'");
            }
            if (args?.modelUuid === undefined && !opts.urn) {
                throw new Error("Missing required property 'modelUuid'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.region === undefined && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["agentGuardrails"] = args?.agentGuardrails;
            resourceInputs["anthropicApiKeys"] = args?.anthropicApiKeys;
            resourceInputs["anthropicKeyUuid"] = args?.anthropicKeyUuid;
            resourceInputs["apiKeyInfos"] = args?.apiKeyInfos;
            resourceInputs["apiKeys"] = args?.apiKeys;
            resourceInputs["chatbotIdentifiers"] = args?.chatbotIdentifiers;
            resourceInputs["chatbots"] = args?.chatbots;
            resourceInputs["childAgents"] = args?.childAgents;
            resourceInputs["createdAt"] = args?.createdAt;
            resourceInputs["deployments"] = args?.deployments;
            resourceInputs["description"] = args?.description;
            resourceInputs["functions"] = args?.functions;
            resourceInputs["ifCase"] = args?.ifCase;
            resourceInputs["instruction"] = args?.instruction;
            resourceInputs["k"] = args?.k;
            resourceInputs["knowledgeBaseUuids"] = args?.knowledgeBaseUuids;
            resourceInputs["knowledgeBases"] = args?.knowledgeBases;
            resourceInputs["maxTokens"] = args?.maxTokens;
            resourceInputs["modelUuid"] = args?.modelUuid;
            resourceInputs["models"] = args?.models;
            resourceInputs["name"] = args?.name;
            resourceInputs["openAiApiKeys"] = args?.openAiApiKeys;
            resourceInputs["openAiKeyUuid"] = args?.openAiKeyUuid;
            resourceInputs["parentAgents"] = args?.parentAgents;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["provideCitations"] = args?.provideCitations;
            resourceInputs["region"] = args?.region;
            resourceInputs["retrievalMethod"] = args?.retrievalMethod;
            resourceInputs["routeCreatedBy"] = args?.routeCreatedBy;
            resourceInputs["routeName"] = args?.routeName;
            resourceInputs["routeUuid"] = args?.routeUuid;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["temperature"] = args?.temperature;
            resourceInputs["templates"] = args?.templates;
            resourceInputs["topP"] = args?.topP;
            resourceInputs["url"] = args?.url;
            resourceInputs["userId"] = args?.userId;
            resourceInputs["routeCreatedAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiAgent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiAgent resources.
 */
export interface GenaiAgentState {
    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    agentGuardrails?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAgentGuardrail>[]>;
    /**
     * Anthropic API Key information
     */
    anthropicApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAnthropicApiKey>[]>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    anthropicKeyUuid?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    apiKeyInfos?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKeyInfo>[]>;
    /**
     * List of API Keys
     */
    apiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKey>[]>;
    /**
     * List of Chatbot Identifiers
     */
    chatbotIdentifiers?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbotIdentifier>[]>;
    /**
     * ChatBot configuration
     */
    chatbots?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbot>[]>;
    /**
     * List of child agents
     */
    childAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChildAgent>[]>;
    /**
     * Timestamp when the Agent was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.GenaiAgentDeployment>[]>;
    /**
     * Description for the Agent
     */
    description?: pulumi.Input<string>;
    /**
     * List of Functions
     */
    functions?: pulumi.Input<pulumi.Input<inputs.GenaiAgentFunction>[]>;
    /**
     * If case condition
     */
    ifCase?: pulumi.Input<string>;
    /**
     * Instruction for the Agent
     */
    instruction?: pulumi.Input<string>;
    /**
     * K value
     */
    k?: pulumi.Input<number>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    knowledgeBaseUuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Knowledge Bases
     */
    knowledgeBases?: pulumi.Input<pulumi.Input<inputs.GenaiAgentKnowledgeBase>[]>;
    /**
     * Maximum tokens allowed
     */
    maxTokens?: pulumi.Input<number>;
    /**
     * Model UUID of the Agent
     */
    modelUuid?: pulumi.Input<string>;
    /**
     * Model of the Agent
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiAgentModel>[]>;
    /**
     * Name of the Agent
     */
    name?: pulumi.Input<string>;
    /**
     * OpenAI API Key information
     */
    openAiApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentOpenAiApiKey>[]>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    openAiKeyUuid?: pulumi.Input<string>;
    /**
     * List of child agents
     */
    parentAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentParentAgent>[]>;
    /**
     * Project ID of the Agent
     */
    projectId?: pulumi.Input<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    provideCitations?: pulumi.Input<boolean>;
    /**
     * Region where the Agent is deployed
     */
    region?: pulumi.Input<string>;
    /**
     * Retrieval method used
     */
    retrievalMethod?: pulumi.Input<string>;
    /**
     * Timestamp when the route was created
     */
    routeCreatedAt?: pulumi.Input<string>;
    /**
     * User who created the route
     */
    routeCreatedBy?: pulumi.Input<string>;
    /**
     * Route name
     */
    routeName?: pulumi.Input<string>;
    /**
     * Route UUID
     */
    routeUuid?: pulumi.Input<string>;
    /**
     * List of Tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Agent temperature setting
     */
    temperature?: pulumi.Input<number>;
    /**
     * Agent Template
     */
    templates?: pulumi.Input<pulumi.Input<inputs.GenaiAgentTemplate>[]>;
    /**
     * Top P sampling parameter
     */
    topP?: pulumi.Input<number>;
    /**
     * Timestamp when the Agent was updated
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * URL for the Agent
     */
    url?: pulumi.Input<string>;
    /**
     * User ID linked with the Agent
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiAgent resource.
 */
export interface GenaiAgentArgs {
    /**
     * AgentGuardrail represents a Guardrail attached to Gen AI Agent
     */
    agentGuardrails?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAgentGuardrail>[]>;
    /**
     * Anthropic API Key information
     */
    anthropicApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentAnthropicApiKey>[]>;
    /**
     * Optional Anthropic API key ID to use with Anthropic models
     */
    anthropicKeyUuid?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    apiKeyInfos?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKeyInfo>[]>;
    /**
     * List of API Keys
     */
    apiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentApiKey>[]>;
    /**
     * List of Chatbot Identifiers
     */
    chatbotIdentifiers?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbotIdentifier>[]>;
    /**
     * ChatBot configuration
     */
    chatbots?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChatbot>[]>;
    /**
     * List of child agents
     */
    childAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentChildAgent>[]>;
    /**
     * Timestamp when the Agent was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * List of API Key Infos
     */
    deployments?: pulumi.Input<pulumi.Input<inputs.GenaiAgentDeployment>[]>;
    /**
     * Description for the Agent
     */
    description?: pulumi.Input<string>;
    /**
     * List of Functions
     */
    functions?: pulumi.Input<pulumi.Input<inputs.GenaiAgentFunction>[]>;
    /**
     * If case condition
     */
    ifCase?: pulumi.Input<string>;
    /**
     * Instruction for the Agent
     */
    instruction: pulumi.Input<string>;
    /**
     * K value
     */
    k?: pulumi.Input<number>;
    /**
     * Ids of the knowledge base(s) to attach to the agent
     */
    knowledgeBaseUuids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of Knowledge Bases
     */
    knowledgeBases?: pulumi.Input<pulumi.Input<inputs.GenaiAgentKnowledgeBase>[]>;
    /**
     * Maximum tokens allowed
     */
    maxTokens?: pulumi.Input<number>;
    /**
     * Model UUID of the Agent
     */
    modelUuid: pulumi.Input<string>;
    /**
     * Model of the Agent
     */
    models?: pulumi.Input<pulumi.Input<inputs.GenaiAgentModel>[]>;
    /**
     * Name of the Agent
     */
    name?: pulumi.Input<string>;
    /**
     * OpenAI API Key information
     */
    openAiApiKeys?: pulumi.Input<pulumi.Input<inputs.GenaiAgentOpenAiApiKey>[]>;
    /**
     * Optional OpenAI API key ID to use with OpenAI models
     */
    openAiKeyUuid?: pulumi.Input<string>;
    /**
     * List of child agents
     */
    parentAgents?: pulumi.Input<pulumi.Input<inputs.GenaiAgentParentAgent>[]>;
    /**
     * Project ID of the Agent
     */
    projectId: pulumi.Input<string>;
    /**
     * Indicates if the agent should provide citations in responses
     */
    provideCitations?: pulumi.Input<boolean>;
    /**
     * Region where the Agent is deployed
     */
    region: pulumi.Input<string>;
    /**
     * Retrieval method used
     */
    retrievalMethod?: pulumi.Input<string>;
    /**
     * User who created the route
     */
    routeCreatedBy?: pulumi.Input<string>;
    /**
     * Route name
     */
    routeName?: pulumi.Input<string>;
    /**
     * Route UUID
     */
    routeUuid?: pulumi.Input<string>;
    /**
     * List of Tags
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Agent temperature setting
     */
    temperature?: pulumi.Input<number>;
    /**
     * Agent Template
     */
    templates?: pulumi.Input<pulumi.Input<inputs.GenaiAgentTemplate>[]>;
    /**
     * Top P sampling parameter
     */
    topP?: pulumi.Input<number>;
    /**
     * URL for the Agent
     */
    url?: pulumi.Input<string>;
    /**
     * User ID linked with the Agent
     */
    userId?: pulumi.Input<string>;
}
