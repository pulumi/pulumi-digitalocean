// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a DigitalOcean Kafka schema registry for Kafka clusters.
 *
 * ## Example Usage
 *
 * ### Create a new Kafka Schema Registry
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as digitalocean from "@pulumi/digitalocean";
 *
 * const kafka_example = new digitalocean.DatabaseCluster("kafka-example", {
 *     name: "example-kafka-cluster",
 *     engine: "kafka",
 *     version: "3.5",
 *     size: "gd-2vcpu-8gb",
 *     region: digitalocean.Region.BLR1,
 *     nodeCount: 3,
 *     tags: ["production"],
 * });
 * const schema_01 = new digitalocean.DatabaseKafkaSchemaRegistry("schema-01", {
 *     clusterId: kafka_example.id,
 *     subjectName: "test-schema",
 *     schemaType: "avro",
 *     schema: `{
 *   "type": "record",
 *   "namespace": "example",
 *   "name": "TestRecord",
 *   "fields": [
 *     {"name": "id", "type": "string"},
 *     {"name": "name", "type": "string"},
 *     {"name": "value", "type": "int"}
 *   ]
 * }
 * `,
 * });
 * ```
 */
export class DatabaseKafkaSchemaRegistry extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseKafkaSchemaRegistry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseKafkaSchemaRegistryState, opts?: pulumi.CustomResourceOptions): DatabaseKafkaSchemaRegistry {
        return new DatabaseKafkaSchemaRegistry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/databaseKafkaSchemaRegistry:DatabaseKafkaSchemaRegistry';

    /**
     * Returns true if the given object is an instance of DatabaseKafkaSchemaRegistry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DatabaseKafkaSchemaRegistry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseKafkaSchemaRegistry.__pulumiType;
    }

    /**
     * The ID of the target Kafka cluster.
     */
    declare public readonly clusterId: pulumi.Output<string>;
    /**
     * The schema definition as a string.
     */
    declare public readonly schema: pulumi.Output<string>;
    /**
     * The schema type. Available values are: avro, json, or protobuf.
     */
    declare public readonly schemaType: pulumi.Output<string>;
    /**
     * The name of the schema subject.
     */
    declare public readonly subjectName: pulumi.Output<string>;

    /**
     * Create a DatabaseKafkaSchemaRegistry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseKafkaSchemaRegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseKafkaSchemaRegistryArgs | DatabaseKafkaSchemaRegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseKafkaSchemaRegistryState | undefined;
            resourceInputs["clusterId"] = state?.clusterId;
            resourceInputs["schema"] = state?.schema;
            resourceInputs["schemaType"] = state?.schemaType;
            resourceInputs["subjectName"] = state?.subjectName;
        } else {
            const args = argsOrState as DatabaseKafkaSchemaRegistryArgs | undefined;
            if (args?.clusterId === undefined && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if (args?.schema === undefined && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if (args?.schemaType === undefined && !opts.urn) {
                throw new Error("Missing required property 'schemaType'");
            }
            if (args?.subjectName === undefined && !opts.urn) {
                throw new Error("Missing required property 'subjectName'");
            }
            resourceInputs["clusterId"] = args?.clusterId;
            resourceInputs["schema"] = args?.schema;
            resourceInputs["schemaType"] = args?.schemaType;
            resourceInputs["subjectName"] = args?.subjectName;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatabaseKafkaSchemaRegistry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DatabaseKafkaSchemaRegistry resources.
 */
export interface DatabaseKafkaSchemaRegistryState {
    /**
     * The ID of the target Kafka cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The schema definition as a string.
     */
    schema?: pulumi.Input<string>;
    /**
     * The schema type. Available values are: avro, json, or protobuf.
     */
    schemaType?: pulumi.Input<string>;
    /**
     * The name of the schema subject.
     */
    subjectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DatabaseKafkaSchemaRegistry resource.
 */
export interface DatabaseKafkaSchemaRegistryArgs {
    /**
     * The ID of the target Kafka cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The schema definition as a string.
     */
    schema: pulumi.Input<string>;
    /**
     * The schema type. Available values are: avro, json, or protobuf.
     */
    schemaType: pulumi.Input<string>;
    /**
     * The name of the schema subject.
     */
    subjectName: pulumi.Input<string>;
}
