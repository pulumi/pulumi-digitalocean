// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Bucket policies can be imported using the `region` and `bucket` attributes (delimited by a comma)
 *
 * ```sh
 *  $ pulumi import digitalocean:index/spacesBucketCorsConfiguration:SpacesBucketCorsConfiguration foobar `region`,`bucket`
 * ```
 */
export class SpacesBucketCorsConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing SpacesBucketCorsConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SpacesBucketCorsConfigurationState, opts?: pulumi.CustomResourceOptions): SpacesBucketCorsConfiguration {
        return new SpacesBucketCorsConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/spacesBucketCorsConfiguration:SpacesBucketCorsConfiguration';

    /**
     * Returns true if the given object is an instance of SpacesBucketCorsConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SpacesBucketCorsConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SpacesBucketCorsConfiguration.__pulumiType;
    }

    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    public readonly bucket!: pulumi.Output<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    public readonly corsRules!: pulumi.Output<outputs.SpacesBucketCorsConfigurationCorsRule[]>;
    /**
     * The region where the bucket resides.
     */
    public readonly region!: pulumi.Output<string>;

    /**
     * Create a SpacesBucketCorsConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SpacesBucketCorsConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SpacesBucketCorsConfigurationArgs | SpacesBucketCorsConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SpacesBucketCorsConfigurationState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["corsRules"] = state ? state.corsRules : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
        } else {
            const args = argsOrState as SpacesBucketCorsConfigurationArgs | undefined;
            if ((!args || args.bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucket'");
            }
            if ((!args || args.corsRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'corsRules'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["corsRules"] = args ? args.corsRules : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SpacesBucketCorsConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SpacesBucketCorsConfiguration resources.
 */
export interface SpacesBucketCorsConfigurationState {
    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    corsRules?: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsConfigurationCorsRule>[]>;
    /**
     * The region where the bucket resides.
     */
    region?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SpacesBucketCorsConfiguration resource.
 */
export interface SpacesBucketCorsConfigurationArgs {
    /**
     * The name of the bucket to which to apply the CORS configuration.
     */
    bucket: pulumi.Input<string>;
    /**
     * Set of origins and methods (cross-origin access that you want to allow). See below. You can configure up to 100 rules.
     */
    corsRules: pulumi.Input<pulumi.Input<inputs.SpacesBucketCorsConfigurationCorsRule>[]>;
    /**
     * The region where the bucket resides.
     */
    region: pulumi.Input<string>;
}
