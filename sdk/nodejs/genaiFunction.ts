// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GenaiFunction extends pulumi.CustomResource {
    /**
     * Get an existing GenaiFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiFunctionState, opts?: pulumi.CustomResourceOptions): GenaiFunction {
        return new GenaiFunction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiFunction:GenaiFunction';

    /**
     * Returns true if the given object is an instance of GenaiFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiFunction.__pulumiType;
    }

    /**
     * The name of the GenAI resource.
     */
    declare public readonly agentId: pulumi.Output<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The model to use for the GenAI resource.
     */
    declare public readonly faasName: pulumi.Output<string | undefined>;
    /**
     * The current status of the GenAI resource.
     */
    declare public readonly faasNamespace: pulumi.Output<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    declare public readonly functionName: pulumi.Output<string>;
    /**
     * The unique identifier of the GenAI function.
     */
    declare public /*out*/ readonly functionUuid: pulumi.Output<string>;
    /**
     * The input schema of the GenAI resource.
     */
    declare public readonly inputSchema: pulumi.Output<string>;
    /**
     * The output schema of the GenAI resource.
     */
    declare public readonly outputSchema: pulumi.Output<string | undefined>;

    /**
     * Create a GenaiFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiFunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiFunctionArgs | GenaiFunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiFunctionState | undefined;
            resourceInputs["agentId"] = state?.agentId;
            resourceInputs["description"] = state?.description;
            resourceInputs["faasName"] = state?.faasName;
            resourceInputs["faasNamespace"] = state?.faasNamespace;
            resourceInputs["functionName"] = state?.functionName;
            resourceInputs["functionUuid"] = state?.functionUuid;
            resourceInputs["inputSchema"] = state?.inputSchema;
            resourceInputs["outputSchema"] = state?.outputSchema;
        } else {
            const args = argsOrState as GenaiFunctionArgs | undefined;
            if (args?.agentId === undefined && !opts.urn) {
                throw new Error("Missing required property 'agentId'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.faasNamespace === undefined && !opts.urn) {
                throw new Error("Missing required property 'faasNamespace'");
            }
            if (args?.functionName === undefined && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if (args?.inputSchema === undefined && !opts.urn) {
                throw new Error("Missing required property 'inputSchema'");
            }
            resourceInputs["agentId"] = args?.agentId;
            resourceInputs["description"] = args?.description;
            resourceInputs["faasName"] = args?.faasName;
            resourceInputs["faasNamespace"] = args?.faasNamespace;
            resourceInputs["functionName"] = args?.functionName;
            resourceInputs["inputSchema"] = args?.inputSchema;
            resourceInputs["outputSchema"] = args?.outputSchema;
            resourceInputs["functionUuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiFunction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiFunction resources.
 */
export interface GenaiFunctionState {
    /**
     * The name of the GenAI resource.
     */
    agentId?: pulumi.Input<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    description?: pulumi.Input<string>;
    /**
     * The model to use for the GenAI resource.
     */
    faasName?: pulumi.Input<string>;
    /**
     * The current status of the GenAI resource.
     */
    faasNamespace?: pulumi.Input<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    functionName?: pulumi.Input<string>;
    /**
     * The unique identifier of the GenAI function.
     */
    functionUuid?: pulumi.Input<string>;
    /**
     * The input schema of the GenAI resource.
     */
    inputSchema?: pulumi.Input<string>;
    /**
     * The output schema of the GenAI resource.
     */
    outputSchema?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiFunction resource.
 */
export interface GenaiFunctionArgs {
    /**
     * The name of the GenAI resource.
     */
    agentId: pulumi.Input<string>;
    /**
     * The region where the GenAI resource will be created.
     */
    description: pulumi.Input<string>;
    /**
     * The model to use for the GenAI resource.
     */
    faasName?: pulumi.Input<string>;
    /**
     * The current status of the GenAI resource.
     */
    faasNamespace: pulumi.Input<string>;
    /**
     * The creation timestamp of the GenAI resource.
     */
    functionName: pulumi.Input<string>;
    /**
     * The input schema of the GenAI resource.
     */
    inputSchema: pulumi.Input<string>;
    /**
     * The output schema of the GenAI resource.
     */
    outputSchema?: pulumi.Input<string>;
}
