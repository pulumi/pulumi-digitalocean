// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./app";
export * from "./cdn";
export * from "./certificate";
export * from "./containerRegistry";
export * from "./containerRegistryDockerCredentials";
export * from "./customImage";
export * from "./databaseCluster";
export * from "./databaseConnectionPool";
export * from "./databaseDb";
export * from "./databaseFirewall";
export * from "./databaseReplica";
export * from "./databaseUser";
export * from "./dnsRecord";
export * from "./domain";
export * from "./droplet";
export * from "./dropletSnapshot";
export * from "./firewall";
export * from "./floatingIp";
export * from "./floatingIpAssignment";
export * from "./getAccount";
export * from "./getApp";
export * from "./getCertificate";
export * from "./getContainerRegistry";
export * from "./getDatabaseCa";
export * from "./getDatabaseCluster";
export * from "./getDatabaseReplica";
export * from "./getDomain";
export * from "./getDomains";
export * from "./getDroplet";
export * from "./getDropletSnapshot";
export * from "./getDroplets";
export * from "./getFirewall";
export * from "./getFloatingIp";
export * from "./getImage";
export * from "./getImages";
export * from "./getKubernetesCluster";
export * from "./getKubernetesVersions";
export * from "./getLoadBalancer";
export * from "./getProject";
export * from "./getProjects";
export * from "./getRecord";
export * from "./getRecords";
export * from "./getRegion";
export * from "./getRegions";
export * from "./getSizes";
export * from "./getSpacesBucket";
export * from "./getSpacesBucketObject";
export * from "./getSpacesBucketObjects";
export * from "./getSpacesBuckets";
export * from "./getSshKey";
export * from "./getSshKeys";
export * from "./getTag";
export * from "./getTags";
export * from "./getVolume";
export * from "./getVolumeSnapshot";
export * from "./getVpc";
export * from "./kubernetesCluster";
export * from "./kubernetesNodePool";
export * from "./loadBalancer";
export * from "./monitorAlert";
export * from "./project";
export * from "./projectResources";
export * from "./provider";
export * from "./spacesBucket";
export * from "./spacesBucketObject";
export * from "./spacesBucketPolicy";
export * from "./sshKey";
export * from "./tag";
export * from "./volume";
export * from "./volumeAttachment";
export * from "./volumeSnapshot";
export * from "./vpc";

// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { App } from "./app";
import { Cdn } from "./cdn";
import { Certificate } from "./certificate";
import { ContainerRegistry } from "./containerRegistry";
import { ContainerRegistryDockerCredentials } from "./containerRegistryDockerCredentials";
import { CustomImage } from "./customImage";
import { DatabaseCluster } from "./databaseCluster";
import { DatabaseConnectionPool } from "./databaseConnectionPool";
import { DatabaseDb } from "./databaseDb";
import { DatabaseFirewall } from "./databaseFirewall";
import { DatabaseReplica } from "./databaseReplica";
import { DatabaseUser } from "./databaseUser";
import { DnsRecord } from "./dnsRecord";
import { Domain } from "./domain";
import { Droplet } from "./droplet";
import { DropletSnapshot } from "./dropletSnapshot";
import { Firewall } from "./firewall";
import { FloatingIp } from "./floatingIp";
import { FloatingIpAssignment } from "./floatingIpAssignment";
import { KubernetesCluster } from "./kubernetesCluster";
import { KubernetesNodePool } from "./kubernetesNodePool";
import { LoadBalancer } from "./loadBalancer";
import { MonitorAlert } from "./monitorAlert";
import { Project } from "./project";
import { ProjectResources } from "./projectResources";
import { SpacesBucket } from "./spacesBucket";
import { SpacesBucketObject } from "./spacesBucketObject";
import { SpacesBucketPolicy } from "./spacesBucketPolicy";
import { SshKey } from "./sshKey";
import { Tag } from "./tag";
import { Volume } from "./volume";
import { VolumeAttachment } from "./volumeAttachment";
import { VolumeSnapshot } from "./volumeSnapshot";
import { Vpc } from "./vpc";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "digitalocean:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "digitalocean:index/cdn:Cdn":
                return new Cdn(name, <any>undefined, { urn })
            case "digitalocean:index/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "digitalocean:index/containerRegistry:ContainerRegistry":
                return new ContainerRegistry(name, <any>undefined, { urn })
            case "digitalocean:index/containerRegistryDockerCredentials:ContainerRegistryDockerCredentials":
                return new ContainerRegistryDockerCredentials(name, <any>undefined, { urn })
            case "digitalocean:index/customImage:CustomImage":
                return new CustomImage(name, <any>undefined, { urn })
            case "digitalocean:index/databaseCluster:DatabaseCluster":
                return new DatabaseCluster(name, <any>undefined, { urn })
            case "digitalocean:index/databaseConnectionPool:DatabaseConnectionPool":
                return new DatabaseConnectionPool(name, <any>undefined, { urn })
            case "digitalocean:index/databaseDb:DatabaseDb":
                return new DatabaseDb(name, <any>undefined, { urn })
            case "digitalocean:index/databaseFirewall:DatabaseFirewall":
                return new DatabaseFirewall(name, <any>undefined, { urn })
            case "digitalocean:index/databaseReplica:DatabaseReplica":
                return new DatabaseReplica(name, <any>undefined, { urn })
            case "digitalocean:index/databaseUser:DatabaseUser":
                return new DatabaseUser(name, <any>undefined, { urn })
            case "digitalocean:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "digitalocean:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "digitalocean:index/droplet:Droplet":
                return new Droplet(name, <any>undefined, { urn })
            case "digitalocean:index/dropletSnapshot:DropletSnapshot":
                return new DropletSnapshot(name, <any>undefined, { urn })
            case "digitalocean:index/firewall:Firewall":
                return new Firewall(name, <any>undefined, { urn })
            case "digitalocean:index/floatingIp:FloatingIp":
                return new FloatingIp(name, <any>undefined, { urn })
            case "digitalocean:index/floatingIpAssignment:FloatingIpAssignment":
                return new FloatingIpAssignment(name, <any>undefined, { urn })
            case "digitalocean:index/kubernetesCluster:KubernetesCluster":
                return new KubernetesCluster(name, <any>undefined, { urn })
            case "digitalocean:index/kubernetesNodePool:KubernetesNodePool":
                return new KubernetesNodePool(name, <any>undefined, { urn })
            case "digitalocean:index/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "digitalocean:index/monitorAlert:MonitorAlert":
                return new MonitorAlert(name, <any>undefined, { urn })
            case "digitalocean:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "digitalocean:index/projectResources:ProjectResources":
                return new ProjectResources(name, <any>undefined, { urn })
            case "digitalocean:index/spacesBucket:SpacesBucket":
                return new SpacesBucket(name, <any>undefined, { urn })
            case "digitalocean:index/spacesBucketObject:SpacesBucketObject":
                return new SpacesBucketObject(name, <any>undefined, { urn })
            case "digitalocean:index/spacesBucketPolicy:SpacesBucketPolicy":
                return new SpacesBucketPolicy(name, <any>undefined, { urn })
            case "digitalocean:index/sshKey:SshKey":
                return new SshKey(name, <any>undefined, { urn })
            case "digitalocean:index/tag:Tag":
                return new Tag(name, <any>undefined, { urn })
            case "digitalocean:index/volume:Volume":
                return new Volume(name, <any>undefined, { urn })
            case "digitalocean:index/volumeAttachment:VolumeAttachment":
                return new VolumeAttachment(name, <any>undefined, { urn })
            case "digitalocean:index/volumeSnapshot:VolumeSnapshot":
                return new VolumeSnapshot(name, <any>undefined, { urn })
            case "digitalocean:index/vpc:Vpc":
                return new Vpc(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("digitalocean", "index/app", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/cdn", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/certificate", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/containerRegistry", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/containerRegistryDockerCredentials", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/customImage", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseCluster", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseConnectionPool", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseDb", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseFirewall", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseReplica", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/databaseUser", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/domain", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/droplet", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/dropletSnapshot", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/firewall", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/floatingIp", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/floatingIpAssignment", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/kubernetesCluster", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/kubernetesNodePool", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/loadBalancer", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/monitorAlert", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/project", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/projectResources", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucket", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucketObject", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/spacesBucketPolicy", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/sshKey", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/tag", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/volume", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/volumeAttachment", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/volumeSnapshot", _module)
pulumi.runtime.registerResourceModule("digitalocean", "index/vpc", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("digitalocean", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:digitalocean") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
