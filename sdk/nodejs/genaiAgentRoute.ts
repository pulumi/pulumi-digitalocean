// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class GenaiAgentRoute extends pulumi.CustomResource {
    /**
     * Get an existing GenaiAgentRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GenaiAgentRouteState, opts?: pulumi.CustomResourceOptions): GenaiAgentRoute {
        return new GenaiAgentRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'digitalocean:index/genaiAgentRoute:GenaiAgentRoute';

    /**
     * Returns true if the given object is an instance of GenaiAgentRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GenaiAgentRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GenaiAgentRoute.__pulumiType;
    }

    /**
     * The UUID of the child agent.
     */
    declare public readonly childAgentUuid: pulumi.Output<string>;
    /**
     * if-case condition for the route.
     */
    declare public readonly ifCase: pulumi.Output<string | undefined>;
    /**
     * The UUID of the parent agent.
     */
    declare public readonly parentAgentUuid: pulumi.Output<string>;
    declare public readonly rollback: pulumi.Output<boolean | undefined>;
    /**
     * A name for the route.
     */
    declare public readonly routeName: pulumi.Output<string | undefined>;
    /**
     * The UUID of the linkage
     */
    declare public /*out*/ readonly uuid: pulumi.Output<string>;

    /**
     * Create a GenaiAgentRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GenaiAgentRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GenaiAgentRouteArgs | GenaiAgentRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GenaiAgentRouteState | undefined;
            resourceInputs["childAgentUuid"] = state?.childAgentUuid;
            resourceInputs["ifCase"] = state?.ifCase;
            resourceInputs["parentAgentUuid"] = state?.parentAgentUuid;
            resourceInputs["rollback"] = state?.rollback;
            resourceInputs["routeName"] = state?.routeName;
            resourceInputs["uuid"] = state?.uuid;
        } else {
            const args = argsOrState as GenaiAgentRouteArgs | undefined;
            if (args?.childAgentUuid === undefined && !opts.urn) {
                throw new Error("Missing required property 'childAgentUuid'");
            }
            if (args?.parentAgentUuid === undefined && !opts.urn) {
                throw new Error("Missing required property 'parentAgentUuid'");
            }
            resourceInputs["childAgentUuid"] = args?.childAgentUuid;
            resourceInputs["ifCase"] = args?.ifCase;
            resourceInputs["parentAgentUuid"] = args?.parentAgentUuid;
            resourceInputs["rollback"] = args?.rollback;
            resourceInputs["routeName"] = args?.routeName;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GenaiAgentRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GenaiAgentRoute resources.
 */
export interface GenaiAgentRouteState {
    /**
     * The UUID of the child agent.
     */
    childAgentUuid?: pulumi.Input<string>;
    /**
     * if-case condition for the route.
     */
    ifCase?: pulumi.Input<string>;
    /**
     * The UUID of the parent agent.
     */
    parentAgentUuid?: pulumi.Input<string>;
    rollback?: pulumi.Input<boolean>;
    /**
     * A name for the route.
     */
    routeName?: pulumi.Input<string>;
    /**
     * The UUID of the linkage
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GenaiAgentRoute resource.
 */
export interface GenaiAgentRouteArgs {
    /**
     * The UUID of the child agent.
     */
    childAgentUuid: pulumi.Input<string>;
    /**
     * if-case condition for the route.
     */
    ifCase?: pulumi.Input<string>;
    /**
     * The UUID of the parent agent.
     */
    parentAgentUuid: pulumi.Input<string>;
    rollback?: pulumi.Input<boolean>;
    /**
     * A name for the route.
     */
    routeName?: pulumi.Input<string>;
}
